#!/usr/bin/python -O
# -*- coding: utf-8 -*-
# SP 131
import sys
import traceback as tb
sys.path.append('/usr/share/artica-postfix/ressources')
import re,os
import pycurl
import requests
from datetime import datetime
import redis
import smtplib
from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText


def test_smtp(subject,message):
    smtppass="vP5Gzfsc1AxT"
    smtpuser="david"
    msg = MIMEMultipart()
    msg['From'] = 'srn@articatech.com'
    msg['To'] = 'david@articatech.com'
    msg['Subject'] = subject
    msg.attach(MIMEText(message))
    mailserver = smtplib.SMTP('37.187.142.164', 25)
    mailserver.ehlo()
    mailserver.login(smtpuser, smtppass)
    mailserver.sendmail(msg['From'], msg['To'], msg.as_string())
    mailserver.quit()

def wwget(url):
    try:
        r = requests.get(url, allow_redirects=True)
        return r.content
    except:
        print(tb.format_exc())
        return None

def down(url,targetfile):

    if os.path.exists(targetfile): os.unlink(targetfile)


    try:
        r = requests.get(url, allow_redirects=True)
        open(targetfile, 'w').write(r.content)
        return True
    except:
        print(tb.format_exc())
        return False


def get_header_timestamp(url):
    try:
        r = requests.head(url)
    except:
        import traceback as tb
        print(tb.format_exc())
        return 0

    zdate = r.headers["Date"]
    print("Found date: %s" % zdate)
    dateobj = datetime.strptime(zdate, '%a, %d %b %Y %H:%M:%S GMT')
    timestamp = dateobj.strftime("%s")
    date_text  = dateobj.strftime("%Y-%m-%d %H:%M:%S")
    print("Found date: %s (%s)" % (zdate,date_text))
    return int(timestamp)

def phishing_update():
    key     = "a8kc29rym4459zn2cpccq3sztf"
    sdom    = "www.malwareurl.com"
    zuri    = "http://%s/reg-export-urls.php?export=phishing&key=%s&zip=yes" % (sdom,key)
    tdir    = "/home/malwareurls/tmp/phishing"
    tfile   = "%s/export.7z" % tdir
    tdest   = "%s/export.txt" % tdir

    os.system("mkdir -p %s" % tdir)

    print("Downloading Phishing database (%s)" % diff)
    if not down(zuri,tfile):return False
    if os.path.exists(tdest): os.unlink(tdest)
    os.system("7zr e -o%s '%s'" % (tdir,tfile))
    if not os.path.exists(tdest):
        print("%s, no such file! "% tdest)
        return False


    return True

def timetoupdate():
    mc = redis.Redis(unix_socket_path="/var/run/redis/redis-server.sock")
    val=wwget("Https://www.malwareurl.com/version.php")
    if val is None: return False

    try:
        val=int(val.strip())
    except:
        print(tb.format_exc())
        return False

    MALWAREURL_STAMP=mc.get("MALWAREURL_STAMP")
    if MALWAREURL_STAMP is None: MALWAREURL_STAMP=0
    MALWAREURL_STAMP=int(MALWAREURL_STAMP)

    if val>MALWAREURL_STAMP:
        mc.set("MALWAREURL_STAMP",str(val))
        return True


def phishing_inject():
    tdir    = "/home/malwareurls/tmp/phishing"
    mc      = redis.Redis(unix_socket_path="/var/run/redis/redis-server.sock")
    tdest   = "%s/export.txt" % tdir
    if not os.path.exists(tdest): return False
    count=0

    for k in mc.keys('MALPHISH:*'):
        try:
            mc.delete(k)
        except:
            test_smtp("phishing_inject: Error",tb.format_exc())
            return False



    f = open(tdest)
    line = f.readline()
    while line:
        line = line.strip()
        count += 1
        try:
            mc.set("MALPHISH:%s" % line,"TRUE")
        except:
            test_smtp("phishing_inject: Error", tb.format_exc())
        if count>100000: break
        line = f.readline()
    f.close()

def malware_inject():
    tdir    = "/home/malwareurls/tmp/malware"
    mc      = redis.Redis(unix_socket_path="/var/run/redis/redis-server.sock")
    tdest   = "%s/export.txt" % tdir

    print("Open %s" % tdest)
    if not os.path.exists(tdest):
        print("%s no such file!" % tdest)
        return False

    count=0
    inject=0

    for k in mc.keys('MALWARE:*'):
        inject +=1
        try:
            mc.delete(k)
        except:
            test_smtp("malware_inject: Error", tb.format_exc())

    print("%s deleted key(s)" % inject)

    f = open(tdest)
    line = f.readline()
    while line:
        line = line.strip()
        count += 1
        try:
            mc.set("MALWARE:%s" % line,"TRUE")
        except:
            test_smtp("malware_inject: Error", tb.format_exc())

        if count>100000: break
        line = f.readline()
    f.close()
    print("%s added key(s)" % count)

def malwareurls_update():
    key     = "a8kc29rym4459zn2cpccq3sztf"
    sdom    = "www.malwareurl.com"
    zuri    = "http://%s/reg-export-urls.php?export=malware&key=%s&zip=yes" % (sdom,key)
    tdir    = "/home/malwareurls/tmp/malware"
    tfile   = "%s/export.7z" % tdir
    tdest   = "%s/export.txt" % tdir

    os.system("mkdir -p %s" % tdir)
    diff = newtime - oldtime
    if diff < 3600:
        print("Diff = (%s)" % diff)
        return True
    print("Downloading malware database (%s)" % diff)
    if not down(zuri,tfile):return False
    if os.path.exists(tdest): os.unlink(tdest)
    os.system("7zr e -o%s '%s'" % (tdir,tfile))
    if not os.path.exists(tdest):
        print("%s, no such file! "% tdest)
        return False

    return True

def mkdir(path, chmod):
    if os.path.exists(path):
        return True
        try:
            os.makedirs(path, chmod)
            return True
        except:
            print(tb.format_exc())
            return False

def main(argv):

    if argv[0]=="--update":
        if not timetoupdate():
            print("No Update")
            sys.exit(0)

        if malwareurls_update():
            default = True
            print("Success to update Malware URI...")
            malware_inject()
            print("Success to inject Malware URI...")
        else:
            default = False

        if phishing_update():
            default = True
            print("Success to update Phishing URI...")
            phishing_inject()
            print("Success to inject Phishing URI...")
        else:
            default = False

        if default:
            test_smtp("Success to update malware urls patterns","No content")

    if argv[0] == "--inject-phishing":
        phishing_inject()

    if argv[0] == "--inject-malware":
        malware_inject()

    if argv[0]=="--smtp":
        test_smtp("TEST SMTP From SRN", "This is the text")

        sys.exit(0)

if __name__ == "__main__":
   main(sys.argv[1:])