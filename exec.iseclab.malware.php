<?php
if(!isset($GLOBALS["CLASS_SOCKETS"])){if(!class_exists("sockets")){include_once("/usr/share/artica-postfix/ressources/class.sockets.inc");}$GLOBALS["CLASS_SOCKETS"]=new sockets();}if(function_exists("posix_getuid")){if(posix_getuid()<>0){die("Cannot be used in web server mode\n\n");}}
include_once(dirname(__FILE__).'/ressources/class.templates.inc'); 
include_once(dirname(__FILE__).'/ressources/class.ldap.inc');
include_once(dirname(__FILE__).'/ressources/class.ini.inc');
include_once(dirname(__FILE__).'/ressources/class.mysql.inc');
include_once(dirname(__FILE__).'/ressources/class.ccurl.inc');
include_once(dirname(__FILE__).'/framework/class.unix.inc');if(!isset($GLOBALS["CLASS_SOCKETS"])){if(!class_exists("sockets")){include_once("/usr/share/artica-postfix/ressources/class.sockets.inc");}$GLOBALS["CLASS_SOCKETS"]=new sockets();}
include_once(dirname(__FILE__).'/framework/frame.class.inc');
include_once(dirname(__FILE__).'/ressources/class.squidguard.inc');

//filtra.info netfiltra.

if(!ifMustBeExecuted2()){exit();}

	$t=time();
	$sock=new sockets();
	$BlueCoatKey=$sock->GET_INFO("BlueCoatKey");
	if(trim($BlueCoatKey)==null){exit();}
	$system_is_overloaded=system_is_overloaded();
	if($system_is_overloaded){
		$unix=new unix();
		WriteMyLogs("{OVERLOADED_SYSTEM}, Web malware maintenance databases tasks aborted (general)","MAIN",__FILE__,__LINE__);
		$unix->send_email_events("{OVERLOADED_SYSTEM} [{$GLOBALS["SYSTEM_INTERNAL_LOAD"]}], Web filtering maintenance databases tasks aborted (general)",
		 "Artica will wait a new better time...", "proxy");
		exit();
	}
	

	$pidfile="/etc/artica-postfix/pids/".basename(__FILE__).".".__FUNCTION__.".pid";
	$unix=new unix();
	$myFile=basename(__FILE__);	
	$pid=@file_get_contents($pidfile);
	if($unix->process_exists($pid,$myFile)){WriteMyLogs("Already executed PID:$pid, die()",__FUNCTION__,__FILE__,__LINE__);exit();}

	$q=new mysql_squid_builder();
	
	
	$total1=$q->COUNT_ROWS("category_malware");
	$uri="http://exposure.iseclab.org/malware_domains.txt";
	$targetfile=$unix->FILE_TEMP();
	$curl=new ccurl($uri);
	echo "$uri\n";
	if(!$curl->GetFile($targetfile)){
		echo "Fatal error downloading $uri\n";
		squid_admin_mysql(1, "Fatal: unable to download $uri",__FUNCTION__,__FILE__,__LINE__,"update");
		exit;
	}
	
	$sock=new sockets();
	$uuid=$unix->GetUniqueID();
	if($uuid==null){return;}

	
	$prefix="INSERT IGNORE INTO category_malware (zmd5,zDate,category,pattern,enabled,uuid) VALUES ";
	
	
	$Exposure = file($targetfile);  
	for ($i = 0; $i < count($Exposure); $i++) {  
     	$szLink = trim($Exposure[$i]);  
    	if(empty($szLink)){continue;}  
    	$newmd5=md5("malware$szLink");
  		$ayLines[] ="('$newmd5',NOW(),'malware','$szLink',1,'$uuid')";
  		if(count($ayLines)>5000){
  			$q->QUERY_SQL($prefix.@implode(",", $ayLines));
  			$ayLines=array();
  		}
	}   		
	
	if(count($ayLines)>1){
  			$q->QUERY_SQL($prefix.@implode(",", $ayLines));
  			$ayLines=array();
  		}

$total2=$q->COUNT_ROWS("category_malware");  
$added=$total2-$total1;
if($added>0){
	squid_admin_mysql(1, "Success added $added websites into malware category",__FUNCTION__,__FILE__,__LINE__,"update");
}		
	
//

function WriteMyLogs($text,$function,$file,$line){
	$GLOBALS["MAILLOG"][]=$line.") $text";
	$mem=round(((memory_get_usage()/1024)/1000),2);
	writelogs($text,$function,__FILE__,$line);
	$logFile="/var/log/artica-postfix/".basename(__FILE__).".log";
	if(!is_dir(dirname($logFile))){mkdir(dirname($logFile));}
   	if (is_file($logFile)) { 
   		$size=filesize($logFile);
   		if($size>9000000){unlink($logFile);}
   	}
   	$date=date('m-d H:i:s');
	$logFile=str_replace("//","/",$logFile);
	$f = @fopen($logFile, 'a');
	if($GLOBALS["VERBOSE"]){echo "$date [{$GLOBALS["MYPID"]}][{$mem}MB]: [$function::$line] $text\n";}
	@fwrite($f, "$date [{$GLOBALS["MYPID"]}][{$mem}MB]: [$function::$line] $text\n");
	@fclose($f);
}
	
function ifMustBeExecuted2(){
	$users=new usersMenus();
	$sock=new sockets();
	$update=true;
	$EnableWebProxyStatsAppliance=intval($GLOBALS["CLASS_SOCKETS"]->GET_INFO("EnableWebProxyStatsAppliance"));
	if(!is_numeric($CategoriesRepositoryEnable)){$CategoriesRepositoryEnable=0;}
	if(!is_numeric($EnableWebProxyStatsAppliance)){$EnableWebProxyStatsAppliance=0;}
	if($EnableWebProxyStatsAppliance==1){return true;}	
	$CategoriesRepositoryEnable=$sock->GET_INFO("CategoriesRepositoryEnable");
	if($CategoriesRepositoryEnable==1){return true;}
	if(!$users->SQUID_INSTALLED){$update=false;}
	return $update;
}	

