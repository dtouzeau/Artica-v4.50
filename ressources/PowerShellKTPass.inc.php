<?php


function BuildPowerShellKTPass($KerberosRealm="EXAMPLE.COM",$ServiceHostname="myhost.example.com",$MapUser="svc_account@EXAMPLE.COM"):string{
    $KerberosRealm=strtoupper($KerberosRealm);
    $f[]="  <# ";
    $f[]="  Save as: $ServiceHostname-keytab.ps1";
    $f[]="  Purpose:";
    $f[]="    - Ensure SPN exists correctly (auto-fix conflicts: remove from others, add to target)";
    $f[]="    - Ask which crypto to use (default = RC4-HMAC-NT for compatibility; AES* preferred if supported)";
    $f[]="    - Generate keytab with selected crypto";
    $f[]="    - Save to user's Downloads";
    $f[]="";
    $f[]="  Run in an elevated PowerShell session (required for setspn/ktpass changes).";
    $f[]="#>";
    $f[]="";
    $f[]="# ==== GLOBAL VALUES (edit these) ============================================";
    $f[]="\$KerberosRealm   = \"$KerberosRealm\"";
    $f[]="\$ServiceHostname = \"$ServiceHostname\"   # principal will be HTTP/<hostname>@<realm>";
    $f[]="\$MapUser         = \"$MapUser\"    # UPN or sAMAccountName";
    $f[]="# Optional: fixed output filename (leave empty to auto-generate)";
    $f[]="\$KeytabFileName  = \"\"";
    $f[]="# ============================================================================";
    $f[]="";
    $f[]="# --- Helpers ----------------------------------------------------------------";
    $f[]="function Convert-SecureStringToPlainText {";
    $f[]="    param([System.Security.SecureString]\$SecureString)";
    $f[]="    \$bstr = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR(\$SecureString)";
    $f[]="    try { [System.Runtime.InteropServices.Marshal]::PtrToStringAuto(\$bstr) }";
    $f[]="    finally { [System.Runtime.InteropServices.Marshal]::ZeroFreeBSTR(\$bstr) }";
    $f[]="}";
    $f[]="";
    $f[]="function Assert-Admin {";
    $f[]="    \$id  = [Security.Principal.WindowsIdentity]::GetCurrent()";
    $f[]="    \$pri = [Security.Principal.WindowsPrincipal]\$id";
    $f[]="    if (-not \$pri.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {";
    $f[]="        throw \"This script must be run as Administrator (setspn/ktpass require elevated rights).\"";
    $f[]="    }";
    $f[]="}";
    $f[]="";
    $f[]="function Find-Exe([string]\$name) {";
    $f[]="    \$cmd = Get-Command \$name -ErrorAction SilentlyContinue";
    $f[]="    if (-not \$cmd) { throw \"\$name not found in PATH.\" }";
    $f[]="    \$cmd.Path";
    $f[]="}";
    $f[]="";
    $f[]="function Resolve-AccountForSetspn {";
    $f[]="    param([Parameter(Mandatory)][string]\$MapUserInput) # UPN, sam, or DOMAIN\sam";
    $f[]="    if (\$MapUserInput -match '^[^\\]+\\[^\\]+\$') { return \$MapUserInput } # already DOMAIN\sam";
    $f[]="";
    $f[]="    \$adLoaded = \$false";
    $f[]="    try { Import-Module ActiveDirectory -ErrorAction Stop; \$adLoaded = \$true } catch {}";
    $f[]="";
    $f[]="    if (\$adLoaded) {";
    $f[]="        try {";
    $f[]="            if (\$MapUserInput -like '*@*') {";
    $f[]="                \$u = Get-ADUser -Filter \"UserPrincipalName -eq '\$MapUserInput'\" -Properties SamAccountName,DistinguishedName";
    $f[]="            } else {";
    $f[]="                \$u = Get-ADUser -Identity \$MapUserInput -Properties SamAccountName,DistinguishedName";
    $f[]="            }";
    $f[]="            if (\$u) {";
    $f[]="                try { \$domainObj = Get-ADDomain -Identity (\$u.DistinguishedName) } catch { \$domainObj = Get-ADDomain }";
    $f[]="                \$nb = \$domainObj.NetBIOSName";
    $f[]="                if (\$nb) { return \"\$nb\\$(\$u.SamAccountName)\" }";
    $f[]="            }";
    $f[]="        } catch {}";
    $f[]="    }";
    $f[]="";
    $f[]="    if (\$MapUserInput -like '*@*') { return \$MapUserInput.Split('@')[0] } # fallback to sam";
    $f[]="    return \$MapUserInput";
    $f[]="}";
    $f[]="";
    $f[]="function Resolve-DNToSetspnAccount {";
    $f[]="    <#";
    $f[]="      Converts a DN (or any identifier line emitted by `setspn -Q`) into DOMAIN\sam (preferred),";
    $f[]="      falling back to sAMAccountName if AD module is missing.";
    $f[]="    #>";
    $f[]="    param([Parameter(Mandatory)][string]\$DnOrLine)";
    $f[]="";
    $f[]="    # Extract DN from typical `setspn -Q` output line:";
    $f[]="    # \"Registered ServicePrincipalNames for CN=svc-http,OU=...,DC=articatech,DC=int:\"";
    $f[]="    \$dn = \$null";
    $f[]="    if (\$DnOrLine -match 'Registered ServicePrincipalNames for\s+(.+?):\s*\$') {";
    $f[]="        \$dn = \$Matches[1]";
    $f[]="    } elseif (\$DnOrLine -match 'DN:\s*(.+)\$') {";
    $f[]="        \$dn = \$Matches[1]";
    $f[]="    } else {";
    $f[]="        # If the line already looks like DOMAIN\sam, return it";
    $f[]="        if (\$DnOrLine -match '^[^\\]+\\[^\\]+\$') { return \$DnOrLine }";
    $f[]="        # Otherwise, leave as-is (best effort)";
    $f[]="        \$dn = \$DnOrLine";
    $f[]="    }";
    $f[]="";
    $f[]="    \$adLoaded = \$false";
    $f[]="    try { Import-Module ActiveDirectory -ErrorAction Stop; \$adLoaded = \$true } catch {}";
    $f[]="";
    $f[]="    if (\$adLoaded) {";
    $f[]="        try {";
    $f[]="            \$obj = Get-ADObject -Identity \$dn -Properties objectClass,sAMAccountName";
    $f[]="            if (\$obj -and \$obj.sAMAccountName) {";
    $f[]="                # Get domain NetBIOS name for the DN";
    $f[]="                try { \$dom = Get-ADDomain -Identity \$dn } catch { \$dom = Get-ADDomain }";
    $f[]="                if (\$dom -and \$dom.NetBIOSName) {";
    $f[]="                    return \"\$(\$dom.NetBIOSName)\\$(\$obj.sAMAccountName)\"";
    $f[]="                } else {";
    $f[]="                    return \$obj.sAMAccountName";
    $f[]="                }";
    $f[]="            }";
    $f[]="        } catch {}";
    $f[]="    }";
    $f[]="";
    $f[]="    # Fallbacks: try to peel CN=foo from DN as a rough sAM";
    $f[]="    if (\$dn -match 'CN=([^,]+)') { return \$Matches[1] }";
    $f[]="";
    $f[]="    return \$dn";
    $f[]="}";
    $f[]="";
    $f[]="# --- Validate globals --------------------------------------------------------";
    $f[]="foreach (\$v in @(";
    $f[]="    @{Name=\"KerberosRealm\";   Val=\$KerberosRealm},";
    $f[]="    @{Name=\"ServiceHostname\"; Val=\$ServiceHostname},";
    $f[]="    @{Name=\"MapUser\";         Val=\$MapUser}";
    $f[]=")) {";
    $f[]="    if ([string]::IsNullOrWhiteSpace(\$v.Val)) {";
    $f[]="        throw \"Global `\$\${(\$v.Name)} is empty. Please fill it at the top of the script.\"";
    $f[]="    }";
    $f[]="}";
    $f[]="";
    $f[]="Assert-Admin";
    $f[]="";
    $f[]="# --- Locate tools ------------------------------------------------------------";
    $f[]="\$SetspnPath = Find-Exe \"setspn.exe\"";
    $f[]="\$KtpassPath = Find-Exe \"ktpass.exe\"";
    $f[]="";
    $f[]="# --- Build values ------------------------------------------------------------";
    $f[]="\$spn       = \"HTTP/\$ServiceHostname\"                 # for setspn (no realm)";
    $f[]="\$principal = \"HTTP/\$ServiceHostname@\$KerberosRealm\"  # for ktpass";
    $f[]="";
    $f[]="# Resolve account for setspn (needs DOMAIN\sam or sam)";
    $f[]="\$AccountForSetspn = Resolve-AccountForSetspn -MapUserInput \$MapUser";
    $f[]="if ([string]::IsNullOrWhiteSpace(\$AccountForSetspn)) {";
    $f[]="    throw \"Could not resolve `\$MapUser` to a valid account for setspn (DOMAIN\sam or sam).\"";
    $f[]="}";
    $f[]="";
    $f[]="# --- Show plan & crypto guidance --------------------------------------------";
    $f[]="Write-Host \"SPN to ensure    : \$spn\"";
    $f[]="Write-Host \"Principal        : \$principal\"";
    $f[]="Write-Host \"Account (ktpass) : \$MapUser\"";
    $f[]="Write-Host \"Account (setspn) : \$AccountForSetspn\"";
    $f[]="Write-Host \"setspn           : \$SetspnPath\"";
    $f[]="Write-Host \"ktpass           : \$KtpassPath\"";
    $f[]="Write-Host \"\"";
    $f[]="Write-Host \"Crypto guidance:\"";
    $f[]="Write-Host \"  - Default = RC4-HMAC-NT (maximum compatibility; legacy and weaker).\"";
    $f[]="Write-Host \"  - If RC4 is not acceptable/working, try AES256-SHA1 (preferred) or AES128-SHA1.\"";
    $f[]="Write-Host \"\"";
    $f[]="";
    $f[]="# --- Ensure SPN exists on the correct account --------------------------------";
    $f[]="\$ownList = & \$SetspnPath -L \$AccountForSetspn 2>&1";
    $f[]="if (\$LASTEXITCODE -ne 0) {";
    $f[]="    throw \"Failed to list SPNs for '\$AccountForSetspn'. Output:`n\$ownList`nHint: setspn expects DOMAIN\sam or sam.\"";
    $f[]="}";
    $f[]="\$spnOwnedByMapUser = \$ownList -match \"^\s*\$([regex]::Escape(\$spn))\s*\$\"";
    $f[]="";
    $f[]="if (-not \$spnOwnedByMapUser) {";
    $f[]="    # Is SPN registered on a different account?";
    $f[]="    \$qOut = & \$SetspnPath -Q \$spn 2>&1";
    $f[]="    \$takenElsewhere = \$qOut -notmatch \"No such SPN found\" -and (\$LASTEXITCODE -eq 0)";
    $f[]="";
    $f[]="    if (\$takenElsewhere) {";
    $f[]="        # Parse every \"Registered ServicePrincipalNames for ...\" line (could be multiple)";
    $f[]="        \$owners = @()";
    $f[]="        foreach (\$line in \$qOut) {";
    $f[]="            if (\$line -match 'Registered ServicePrincipalNames for') {";
    $f[]="                \$acc = Resolve-DNToSetspnAccount -DnOrLine \$line";
    $f[]="                if (\$acc -and \$acc -ne \$AccountForSetspn) { \$owners += \$acc }";
    $f[]="            }";
    $f[]="        }";
    $f[]="        \$owners = \$owners | Select-Object -Unique";
    $f[]="";
    $f[]="        if (\$owners.Count -gt 0) {";
    $f[]="            Write-Host \"Detected SPN ownership conflict. Reassigning...\"";
    $f[]="            foreach (\$acc in \$owners) {";
    $f[]="                Write-Host \"  Removing SPN from conflicting account: \$acc\"";
    $f[]="                \$delOut = & \$SetspnPath -D \$spn \$acc 2>&1";
    $f[]="                if (\$LASTEXITCODE -ne 0) {";
    $f[]="                    Write-Host \$delOut";
    $f[]="                    throw \"Failed to delete SPN from '\$acc'. Aborting to avoid inconsistent state.\"";
    $f[]="                }";
    $f[]="            }";
    $f[]="        } else {";
    $f[]="            Write-Warning \"SPN appears registered elsewhere, but no owners could be parsed. Proceeding to add on target.\"";
    $f[]="        }";
    $f[]="    }";
    $f[]="";
    $f[]="    Write-Host \"Adding SPN to target account: setspn -S \$spn \$AccountForSetspn\"";
    $f[]="    \$addOut = & \$SetspnPath -S \$spn \$AccountForSetspn 2>&1";
    $f[]="    if (\$LASTEXITCODE -ne 0) { throw \"Failed to add SPN to '\$AccountForSetspn'. Output:`n\$addOut\" }";
    $f[]="    Write-Host \"SPN ensured on \$AccountForSetspn.\"";
    $f[]="} else {";
    $f[]="    Write-Host \"SPN already present on \$AccountForSetspn. Proceeding.\"";
    $f[]="}";
    $f[]="";
    $f[]="# --- Prompt for desired crypto (default RC4) ---------------------------------";
    $f[]="\$allowedCryptos = @(\"RC4-HMAC-NT\",\"AES256-SHA1\",\"AES128-SHA1\")";
    $f[]="\$cryptoChoice = Read-Host \"Choose crypto (`RC4-HMAC-NT`, `AES256-SHA1`, `AES128-SHA1`) [default: RC4-HMAC-NT]\"";
    $f[]="if ([string]::IsNullOrWhiteSpace(\$cryptoChoice)) {";
    $f[]="    \$cryptoChoice = \"RC4-HMAC-NT\"";
    $f[]="} else {";
    $f[]="    \$cryptoChoice = \$cryptoChoice.Trim().ToUpper()";
    $f[]="    if (-not (\$allowedCryptos -contains \$cryptoChoice)) {";
    $f[]="        Write-Warning \"Unsupported crypto '\$cryptoChoice'. Falling back to default RC4-HMAC-NT.\"";
    $f[]="        \$cryptoChoice = \"RC4-HMAC-NT\"";
    $f[]="    }";
    $f[]="}";
    $f[]="Write-Host \"Using crypto: \$cryptoChoice\"";
    $f[]="";
    $f[]="# --- Prompt for password (only) ----------------------------------------------";
    $f[]="\$securePass = Read-Host \"Enter password for \$MapUser (will be passed to ktpass -pass)\" -AsSecureString";
    $f[]="if (-not \$securePass) { throw \"Password cannot be empty.\" }";
    $f[]="\$plainPass = Convert-SecureStringToPlainText \$securePass";
    $f[]="";
    $f[]="# --- Prepare output path -----------------------------------------------------";
    $f[]="\$downloads = Join-Path \$env:USERPROFILE \"Downloads\"";
    $f[]="if (-not (Test-Path \$downloads)) { New-Item -ItemType Directory -Path \$downloads | Out-Null }";
    $f[]="";
    $f[]="if ([string]::IsNullOrWhiteSpace(\$KeytabFileName)) {";
    $f[]="    \$safeHost = (\$ServiceHostname -replace '[\/:*?\"<>|]', '_')";
    $f[]="    \$KeytabFileName = \"HTTP_{0}.keytab\" -f \$safeHost";
    $f[]="}";
    $f[]="\$outPath = Join-Path \$downloads \$KeytabFileName";
    $f[]="";
    $f[]="Write-Host \"\"";
    $f[]="Write-Host \"Keytab will be saved to: \$outPath\"";
    $f[]="Write-Host \"\"";
    $f[]="";
    $f[]="# --- Run ktpass with the selected crypto -------------------------------------";
    $f[]="Write-Host \"Running ktpass with -crypto \$cryptoChoice ...\"";
    $f[]="\$args = @(";
    $f[]="    \"-princ\", \$principal,";
    $f[]="    \"-mapuser\", \$MapUser,";
    $f[]="    \"-crypto\", \$cryptoChoice,";
    $f[]="    \"-pass\", \$plainPass,";
    $f[]="    \"-ptype\", \"KRB5_NT_PRINCIPAL\",";
    $f[]="    \"-out\", \$outPath";
    $f[]=")";
    $f[]="\$output = & \$KtpassPath @args 2>&1";
    $f[]="\$exit   = \$LASTEXITCODE";
    $f[]="if (\$output) { \$output | ForEach-Object { Write-Host \$_ } }";
    $f[]="";
    $f[]="# Treat success only if exit code == 0 AND file exists (>0 bytes)";
    $f[]="\$ok = (\$exit -eq 0) -and (Test-Path \$outPath) -and ((Get-Item \$outPath).Length -gt 0)";
    $f[]="";
    $f[]="if (\$ok) {";
    $f[]="    if (\$PSStyle) {";
    $f[]="        \$accent = \$PSStyle.Foreground.BrightGreen";
    $f[]="        \$muted  = \$PSStyle.Foreground.BrightBlack";
    $f[]="        \$reset  = \$PSStyle.Reset";
    $f[]="        \$top = \"--------------------------------------\"";
    $f[]="        \$mid = \"|\"";
    $f[]="        \$bot = \"--------------------------------------\"";
    $f[]="        Write-Host \"\$accent\$top\$reset\"";
    $f[]="        Write-Host \"\$accent\$mid\$reset  \${accent}Keytab created successfully\$reset\"";
    $f[]="        Write-Host \"\$accent\$mid\$reset  \${muted}Crypto\$reset    : \${accent}\$cryptoChoice\$reset\"";
    $f[]="        Write-Host \"\$accent\$mid\$reset  \${muted}Saved to\$reset  : \${accent}\$outPath\$reset\"";
    $f[]="        Write-Host \"\$accent\$bot\$reset\"";
    $f[]="    } else {";
    $f[]="        Write-Host \"\"";
    $f[]="        Write-Host \"==================== SUCCESS ====================\" -ForegroundColor Green";
    $f[]="        Write-Host (\"  Keytab created successfully\") -ForegroundColor Green";
    $f[]="        Write-Host (\"  Crypto   : {0}\" -f \$cryptoChoice) -ForegroundColor DarkGray";
    $f[]="        Write-Host (\"  Saved to : {0}\" -f \$outPath) -ForegroundColor DarkGray";
    $f[]="        Write-Host \"=================================================\" -ForegroundColor Green";
    $f[]="        Write-Host \"\"";
    $f[]="    }";
    $f[]="} else {";
    $f[]="    if (\$PSStyle) {";
    $f[]="        \$accent = \$PSStyle.Foreground.BrightRed";
    $f[]="        \$muted  = \$PSStyle.Foreground.BrightBlack";
    $f[]="        \$reset  = \$PSStyle.Reset";
    $f[]="        \$top = \"--------------------------------------\"";
    $f[]="        \$mid = \"|\"";
    $f[]="        \$bot = \"--------------------------------------\"";
    $f[]="        Write-Host \"\$accent\$top\$reset\"";
    $f[]="        Write-Host \"\$accent\$mid\$reset  \${accent}ktpass failed\$reset\"";
    $f[]="        Write-Host \"\$accent\$mid\$reset  \${muted}Crypto\$reset    : \${accent}\$cryptoChoice\$reset\"";
    $f[]="        Write-Host \"\$accent\$mid\$reset  \${muted}Exit code\$reset : \${accent}\$exit\$reset\"";
    $f[]="        Write-Host \"\$accent\$mid\$reset  \${muted}Output\$reset    :\"";
    $f[]="        (\$output | ForEach-Object { \"    \$_\" }) | Write-Host";
    $f[]="        Write-Host \"\$accent\$bot\$reset\"";
    $f[]="    } else {";
    $f[]="        Write-Host \"\"";
    $f[]="        Write-Host \"==================== ERROR =====================\" -ForegroundColor Red";
    $f[]="        Write-Host (\"  ktpass failed\") -ForegroundColor Red";
    $f[]="        Write-Host (\"  Crypto    : {0}\" -f \$cryptoChoice) -ForegroundColor DarkGray";
    $f[]="        Write-Host (\"  Exit code : {0}\" -f \$exit) -ForegroundColor DarkGray";
    $f[]="        Write-Host \"  Output:\"";
    $f[]="        \$output | ForEach-Object { \"    \$_\" } | Write-Host";
    $f[]="        Write-Host \"================================================\" -ForegroundColor Red";
    $f[]="        Write-Host \"\"";
    $f[]="    }";
    $f[]="    throw \"ktpass failed with exit code \$exit using \$cryptoChoice. See output above.\"";
    $f[]="}";
    $f[]="";
    $f[]="# --- Scrub plaintext password ASAP -------------------------------------------";
    $f[]="\$plainPass = \$null";
    $f[]="[GC]::Collect()";
    $f[]="[GC]::WaitForPendingFinalizers()";
    $f[]="";
    $f[]="";
    return implode("\n",$f);

}
