#!/usr/bin/env python
import sys
sys.path.append('/usr/share/artica-postfix/ressources')
sys.path.append('/usr/share/artica-postfix/bin')
import base64
import dns.resolver
import ipaddress
import syslog
from unix import *
from goldlic import *
from classartmem import *
from inspect import currentframe
from netaddr import IPNetwork, IPAddress
from Crypto.Cipher import AES
from Crypto import Random
import cPickle as pickle
from urllib2 import urlopen
from urlparse import urlparse
from datetime import datetime
import publicsuffix
import anydbm
import time

import syslog

class categorize:

    def __init__(self):
        self.out=False
        self.version="2.54"
        self.debug=False
        self.debug_cache=False
        self.loggerWhite = None
        self.logger = None
        self.trackers_dst       = set()
        self.whitelist_dst      = set()
        self.whitelist_dstrx    = set()
        self.whitelist_src      = set()
        self.whitelist_arp      = set()
        self.blacklist_dst      = set()
        self.srnwhite           = set()
        self.advertbase         = set()
        self.local_categories   = {}
        self.local_white = {}
        self.local_black = {}
        self.mac=""
        self.not_calculated={}
        self.mem=art_memcache()
        self.category_id=0
        self.categoryname=""
        self.stripaddr=""
        self.KsrnDisableGoogleAdServices=0
        self.nameservers=[]
        self.nameservers_list=[]
        self.read_resolv_conf()
        self.INTERNAL_LOGS = []
        self.local_cache={}
        self.cache_time=GET_INFO_INT("TheShieldCacheTime")
        self.KSRNIpaddrDebug = GET_INFO_INT("KSRNIpaddrDebug")
        self.dnstimeout=4
        self.dnslifetime=4
        self.useCGuardCategories=GET_INFO_INT("useCGuardCategories")
        self.SquidDNSUseSystem=GET_INFO_INT("SquidDNSUseSystem")
        self.logqueries = GET_INFO_INT("CategorizeLogqueries")
        self.SQUIDEnable=GET_INFO_INT("SQUIDEnable")
        self.KSRNCategoryWhite=GET_INFO_INT("KSRNCategoryWhite")
        self.TheShieldLogDNSQ = GET_INFO_INT("TheShieldLogDNSQ")
        self.UseCloudArticaCategories=GET_INFO_INT("UseCloudArticaCategories")
        self.TheShieldDebug=GET_INFO_INT('TheShieldDebug')
        self.nameservers_checked=False
        self.KSRNDns1 = GET_INFO_STR("KSRNDns1")
        self.KSRNDns2 = GET_INFO_STR("KSRNDns2")
        self.tld = self.dump_tlds()
        self.local_database_path = "/home/artica/SQLITE/theshield.categories.db"
        self.local_database_path_time=0
        self.CountOfQueriesCache=0
        self.TheShieldLogsWhitelist = GET_INFO_INT("TheShieldLogsWhitelist")
        self.TheShieldMaxItemsInMemory= GET_INFO_INT("TheShieldMaxItemsInMemory")
        self.ExternalAclFirstDebug = GET_INFO_INT("ExternalAclFirstDebug")
        self.EnableCategoriesCache = GET_INFO_INT("EnableCategoriesCache")
        self.TheShieldsLogTimes=0
        if  self.cache_time==0: self.cache_time=86400
        SET_INFO("CATEGORIZE_CLASS_VERSION",self.version)
        if self.TheShieldDebug==1: self.logqueries=1



        if  self.ExternalAclFirstDebug==1:
            self.TheShieldDebug=1
            self.logqueries=1

            
        self.TheShieldsUseLocalCats = GET_INFO_INT("TheShieldsUseLocalCats")

        if self.TheShieldDebug==1: self.xsyslog("v%s Initialize" % self.version)
        self.exts="(com|fr|de|es|pl|pt|ru|co\.uk|it|ro)"
       
        try:
            if self.TheShieldDebug==1: self.xsyslog("Loading database version %s L.83" % self.version)
            self.reload_dbs()
        except:
            self.xsyslog("ERROR, Loading databases -> %s" % ( tb.format_exc()))


        self.loading_local_databases()


        liclass = isGoldkey()
        ILic = liclass.is_corp_license()
        if not ILic: self.UseCloudArticaCategories=0

        DNSEngineTimeouts=GET_INFO_INT("DNSEngineTimeouts")
        if DNSEngineTimeouts>0:
            self.dnstimeout = DNSEngineTimeouts
            self.dnslifetime = DNSEngineTimeouts

        if self.TheShieldDebug==1: self.xsyslog("INIT: Max items %s, cache time %s" % (self.TheShieldMaxItemsInMemory,self.cache_time))

        self.check_nameservers()

    def __del__(self):
        try:
            self.save_cache()
        except:
            self.xsyslog("ERROR, save_cache -> %s" % (tb.format_exc()))


    def set_output(self):
        self.out=True
        print("Turn debug...")
        self.ExternalAclFirstDebug=1

    def loading_local_databases(self):
        compile_root    = "/home/artica/theshieldsdb"
        if not os.path.exists(compile_root): return False
        self.local_db_files = os.listdir(compile_root)
        return True

    def xsyslog(self,text):
        if self.out: print(text)
        syslog.openlog("ksrn", syslog.LOG_PID)
        syslog.syslog(syslog.LOG_INFO,"[CATEGORIZE]: %s" % text)


    def get_cache(self,domain):
        stime = time.time()
        if len(domain)<3: return None

        try:
            sdomain=str(domain)
        except:
            self.xsyslog("ERROR, get_cache %s -> %s" % (domain, tb.format_exc()))
            return None

        if domain in self.local_cache:
            if self.out: print("self.local_cache[%s]=%s L.163" % (domain,self.local_cache[domain]))
            if self.TheShieldDebug == 1:
                duration_total = self.mem.TimeExec(stime)
                self.xsyslog("%s [GET_CACHE]: HIT inside array (duration %s seconds)" % (domain,duration_total))
            return self.local_cache[domain]

        if domain.find('isWhite:') >-1: return None

        if self.EnableCategoriesCache ==1:
            domain_md5 = str(hashlib.md5(domain).hexdigest())
            categoryid=self.mem.redis_get(domain_md5)
            if self.TheShieldDebug==1: self.xsyslog("%s get_cache %s -> %s" % (domain, domain_md5,categoryid))
            if categoryid is not None:
                    try:
                        if int(categoryid)>0:
                            if self.TheShieldDebug == 1: self.xsyslog("%s get_cache [REDIS] HIT %s -> %s" % (domain, domain_md5, categoryid))
                            return int(categoryid)
                    except:
                        self.xsyslog("%s [ERROR] [REDIS]: get_cache %s == %s [%s]" % (domain, domain_md5,categoryid,tb.format_exc()))

            maindomain = publicsuffix.get_sld(domain)

            if maindomain != domain:
                domain_md5 = str(hashlib.md5(maindomain).hexdigest())
                categoryid = self.mem.redis_get(domain_md5)
                if self.TheShieldDebug == 1: self.xsyslog("%s get_cache %s -> %s" % (maindomain, domain_md5, categoryid))
                if categoryid is not None:
                    try:
                        if int(categoryid)>0:
                            if self.TheShieldDebug == 1: self.xsyslog("%s get_cache [REDIS] HIT %s -> %s" % (domain, domain_md5, categoryid))
                            return int(categoryid)
                    except:
                        self.xsyslog("%s [ERROR] [REDIS]: get_cache %s == %s [%s]" % (domain, domain_md5,categoryid,tb.format_exc()))

        value = None
        dbm_cache="/var/log/squid/categories.dbm"
        if os.path.exists(dbm_cache):
            try:
                db = anydbm.open(dbm_cache, flag='c')
                if self.out: print("%s %s = %s" % (domain,dbm_cache,value))
                value = db.get(domain)
                db.close()
            except:
                if self.TheShieldDebug == 1: self.xsyslog("ERROR, anydbm %s -> %s" % (domain, tb.format_exc()))

        if value is not None:
            self.local_cache[domain]=value
            if self.TheShieldDebug == 1:
                duration_total = self.mem.TimeExec(stime)
                self.xsyslog("%s [GET_CACHE]: HIT[%s] inside %s (duration %s seconds)" % (domain,value,dbm_cache,duration_total))
            return value

        try:
            smd5 = str("SHIELD.cat.%s" % hashlib.md5(sdomain.encode("utf-8")).hexdigest())
            result=self.mem.ksrncache_get(smd5)
            if self.out: print("self.mem.ksrncache_get(%s) == %s" % (smd5,result))
            if self.TheShieldDebug == 1:
                duration_total = self.mem.TimeExec(stime)
                self.xsyslog("%s [GET_CACHE]: [result=<%s>] %s (duration %s seconds)" % (domain,"memcache_get",result,duration_total))
            return result
        except:
            self.xsyslog("ERROR, get_cache %s -> %s" % (domain, tb.format_exc()))
            return None

    def categorize_ip(self,ipaddr):
        defs_internal=["169.254.0.0/16"]

        defs_ovh=["147.135.0.0/16","103.5.12.0/22","107.189.64.0/18","135.148.0.0/17","137.74.0.0/16","139.99.0.0/17",
                  "139.99.128.0/17","142.4.192.0/19","142.44.128.0/17","144.2.32.0/19","144.217.0.0/16","145.239.0.0/16",
                  "146.59.0.0/16","146.59.0.0/17","147.135.0.0/17","147.135.128.0/17","149.202.0.0/16","149.56.0.0/16",
                  "151.80.0.0/16","158.69.0.0/16","164.132.0.0/16","79.137.56.0/24","91.121.0.0/16","91.134.0.0/16",
                  "92.222.0.0/16","94.23.0.0/16","109.190.0.0/16","137.74.0.0/16","144.217.0.0/16","145.239.0.0/16",
                  "147.135.0.0/17","147.135.128.0/17","149.56.0.0/16","149.202.0.0/16","176.31.0.0/16","178.32.0.0/16",
                  "178.33.0.0/16","151.80.0.0/16","158.69.0.0/16","164.132.0.0/16","167.114.0.0/17","167.114.128.0/18",
                  "167.114.192.0/19","167.114.192.0/19","167.114.224.0/19","217.182.0.0/16","5.135.0.0/16","54.36.0.0/16",
                  "54.37.0.0/16","54.38.0.0/16","54.39.0.0/16","54.75.0.0/16","51.68.0.0/16","51.77.0.0/16","51.83.0.0/16",
                  "51.89.0.0/16","51.91.0.0/16","51.178.0.0/16","51.210.0.0/16","51.254.0.0/16","51.255.0.0/16",
                  "76.223.0.0/16",
                  "213.32.0.0/16","213.251.155.0/24","188.165.0.0/16","46.105.0.0/16","193.70.85.0/24","198.50.0.0/16","103.5.12.0/22","107.189.64.0/18",
                  "135.125.0.0/17","135.125.128.0/17","135.148.0.0/17","135.148.128.0/17","137.74.0.0/16","139.99.0.0/17","139.99.128.0/17",
                  "141.94.0.0/16","141.95.0.0/17","141.95.128.0/17","142.4.192.0/19","142.44.128.0/17","144.217.0.0/16","145.239.0.0/16",
                  "146.59.0.0/16","146.59.0.0/17","147.135.0.0/17","213.186.33.0/24",
                  "5.135.0.0/16","51.195.0.0/16"
                  ]

        defs_microsoft=["40.64.0.0/16","40.65.0.0/16","40.66.0.0/16","40.67.0.0/16","40.68.0.0/16","40.69.0.0/16",
                        "40.70.0.0/16","40.71.0.0/16","40.72.0.0/16","40.73.0.0/16","40.74.0.0/16","40.75.0.0/16",
                        "40.76.0.0/16","40.77.0.0/16","40.78.0.0/16","40.79.0.0/16","40.80.0.0/16","40.81.0.0/16",
                        "40.82.0.0/16","40.83.0.0/16","40.84.0.0/16","40.85.0.0/16","40.86.0.0/16","40.87.0.0/16",
                        "40.88.0.0/16","40.89.0.0/16","40.90.0.0/16","40.91.0.0/16","40.92.0.0/16","40.93.0.0/16",
                        "40.94.0.0/16","40.95.0.0/16","40.96.0.0/16","40.97.0.0/16","40.98.0.0/16","40.99.0.0/16",
                        "40.100.0.0/16","40.101.0.0/16","40.102.0.0/16","40.103.0.0/16","40.104.0.0/16","40.105.0.0/16",
                        "40.106.0.0/16","40.107.0.0/16","40.108.0.0/16","40.109.0.0/16","40.110.0.0/16","40.111.0.0/16",
                        "40.112.0.0/16","40.113.0.0/16","40.114.0.0/16","40.115.0.0/16","40.116.0.0/16","40.117.0.0/16",
                        "40.118.0.0/16","40.119.0.0/16","40.120.0.0/16","40.121.0.0/16","40.122.0.0/16","40.123.0.0/16",
                        "40.124.0.0/16","51.4.0.0/16","51.5.0.0/16","51.6.0.0/16","51.7.0.0/16","51.8.0.0/16",
                        "51.9.0.0/16","51.10.0.0/16","51.11.0.0/16","51.12.0.0/16","51.13.0.0/16","51.104.0.0/16",
                        "51.105.0.0/16","51.122.0.0/16","51.123.0.0/16","51.124.0.0/16","51.125.0.0/16","51.126.0.0/16",
                        "51.127.0.0/16","51.128.0.0/16","51.129.0.0/16","51.130.0.0/16","51.131.0.0/16","51.132.0.0/16",
                        "51.133.0.0/16","51.134.0.0/16","51.135.0.0/16","51.136.0.0/16","51.137.0.0/16","51.138.0.0/16",
                        "51.139.0.0/16","51.140.0.0/16","51.141.0.0/16","51.142.0.0/16","51.143.0.0/16","51.144.0.0/16",
                        "51.145.0.0/16","52.126.0.0/15","65.52.0.0/16","65.53.0.0/16","65.54.0.0/16","65.55.0.0/16",
                        "66.119.144.0/24","104.40.0.0/16","104.41.0.0/16","104.42.0.0/16","104.43.0.0/16","104.44.0.0/16",
                        "104.45.0.0/16","104.46.0.0/16","104.47.0.0/16","104.210.0.0/16","104.211.0.0/16","104.212.0.0/16",
                        "104.213.0.0/16","104.214.0.0/16","104.215.0.0/16","167.220.0.0/16","168.62.0.0/16","191.232.0.0/16",
                        "191.233.0.0/16","191.234.0.0/16","191.235.0.0/16","191.236.0.0/16","191.237.0.0/16","191.238.0.0/16",
                        "191.239.0.0/16","204.79.197.0/24","207.46.0.0/16","13.64.0.0/16","13.65.0.0/16","13.66.0.0/17",
                        "13.66.128.0/17","13.67.0.0/17","13.67.128.0/20","13.67.144.0/21","13.67.152.0/24","13.67.153.0/28",
                        "13.67.153.32/27","13.67.153.64/26","13.67.153.128/25","13.67.155.0/24","13.67.156.0/22","13.67.160.0/19",
                        "13.67.192.0/18","13.68.0.0/17","13.68.128.0/17","13.69.0.0/17","13.69.128.0/17","13.70.0.0/18",
                        "13.70.64.0/18","13.70.128.0/18","13.70.192.0/18","13.71.0.0/18","13.71.64.0/18","13.71.128.0/19",
                        "13.71.160.0/19","13.71.192.0/18","13.72.64.0/18","13.72.192.0/19","13.72.224.0/19","13.73.0.0/19",
                        "13.73.32.0/19","13.73.96.0/19","13.73.128.0/18","13.73.192.0/20","13.73.224.0/21","13.73.232.0/21",
                        "13.73.240.0/20","13.74.0.0/16","13.75.0.0/17","13.75.128.0/17","13.76.0.0/16","13.77.0.0/18",
                        "13.77.64.0/18","13.77.128.0/18","13.77.192.0/19","13.78.0.0/17","13.78.128.0/17","13.79.0.0/16",
                        "13.80.0.0/15","13.82.0.0/16","13.83.0.0/16","13.84.0.0/15","13.86.0.0/17","13.86.128.0/17",
                        "13.87.36.128/32","13.87.128.0/17","13.88.0.0/17","13.88.128.0/18","13.88.192.0/23","13.88.200.0/21",
                        "13.88.208.0/20","13.88.224.0/19","13.89.0.0/16","13.90.0.0/16","13.91.0.0/16","13.92.0.0/16",
                        "13.93.0.0/17","13.93.128.0/17","13.95.0.0/16","13.106.4.128/25","13.106.56.0/25",
                        "20.36.0.0/19","20.36.96.0/21","20.36.128.0/17","20.37.96.0/19","20.37.128.0/18","20.37.192.0/19",
                        "20.38.64.0/19","20.39.32.0/19","20.39.128.0/20","20.39.160.0/21","20.39.168.0/21","20.39.176.0/21",
                        "20.39.184.0/21","20.39.192.0/20","20.39.208.0/20","20.39.224.0/21","20.40.0.0/21","20.40.8.0/21",
                        "20.40.16.0/20","20.40.32.0/21","20.40.40.0/21","20.40.48.0/20","20.40.64.0/20","20.40.80.0/21",
                        "20.40.88.0/21","20.40.96.0/21","20.40.104.0/21","20.40.112.0/21","20.40.120.0/21","20.40.160.0/20",
                        "20.40.176.0/20","20.50.0.0/16",
                        "20.184.0.0/18","20.184.64.0/18","20.184.128.0/17","20.185.0.0/16","20.186.0.0/17",
                        "20.186.128.0/18","20.186.192.0/18","20.187.0.0/18","20.187.64.0/18","20.187.128.0/17","20.188.0.0/19",
                        "20.188.64.0/19","20.188.96.0/19","20.188.128.0/17","20.189.0.0/18","20.189.64.0/18","20.189.128.0/18",
                        "20.189.192.0/18","20.190.0.0/18","20.190.64.0/19","20.190.96.0/19","20.190.128.0/18","20.190.192.0/18",
                        "20.191.0.0/18","20.191.64.0/18","20.191.128.0/19","20.191.160.0/19","20.191.192.0/18",
                        "23.96.0.0/17",
                        "40.64.0.0/16","40.65.0.0/18","40.65.64.0/18","40.65.128.0/18","40.65.192.0/18","40.67.128.0/19","40.67.160.0/19",
                        "40.67.192.0/19","40.67.224.0/19","40.68.0.0/16","40.69.0.0/18","40.69.64.0/19","40.69.96.0/19","40.69.128.0/18",
                        "40.69.192.0/19","40.70.0.0/18","40.70.64.0/20","40.70.80.0/21","40.70.128.0/17","40.71.0.0/16","40.72.0.0/18",
                        "40.72.64.0/22","40.72.127.0/24","40.72.128.0/18","40.72.192.0/22","40.72.196.0/23","40.72.208.0/20",
                        "40.72.224.0/19","40.73.226.0/24","40.73.227.0/24","40.73.232.0/23","40.73.236.0/23","40.73.240.0/24",
                        "40.73.242.0/24","40.73.248.0/22","40.73.252.0/22","40.75.0.0/19","40.75.64.0/18","40.75.128.0/17",
                        "40.76.0.0/16","40.80.0.0/22","40.80.32.0/22","40.80.36.0/22","40.80.40.0/22","40.80.44.0/22","40.80.144.0/21",
                        "40.80.152.0/21","40.80.160.0/24","40.80.192.0/19","40.80.224.0/20","40.80.240.0/20","40.81.0.0/20","40.81.16.0/20","40.81.32.0/20","40.81.48.0/20","40.81.64.0/20","40.81.80.0/20","40.81.112.0/20","40.81.128.0/19","40.81.176.0/20","40.81.192.0/19","40.81.224.0/19","40.82.4.0/22","40.82.16.0/22","40.82.24.0/22","40.82.28.0/22","40.82.32.0/22","40.82.36.0/22","40.82.128.0/19","40.82.160.0/19","40.82.192.0/19","40.83.0.0/20","40.83.16.0/21","40.83.24.0/26","40.83.24.64/27","40.83.24.128/25","40.83.25.0/24","40.83.26.0/23","40.83.28.0/22","40.83.32.0/19","40.83.64.0/18","40.83.128.0/17","40.85.0.0/17","40.85.128.0/20","40.85.144.0/20","40.85.160.0/19","40.85.192.0/18","40.86.0.0/17","40.86.128.0/19","40.86.160.0/19","40.86.192.0/18","40.87.0.0/17","40.87.128.0/19","40.87.160.0/22","40.87.164.0/22","40.87.168.0/22","40.87.172.0/22","40.87.176.0/22","40.87.180.0/22","40.87.184.0/22","40.87.188.0/22","40.87.192.0/22","40.87.196.0/22","40.87.200.0/22","40.87.204.0/22","40.87.208.0/22","40.87.212.0/22","40.87.216.0/22","40.87.220.0/22","40.87.224.0/22","40.87.228.0/22","40.87.232.0/21","40.88.0.0/16","40.89.0.0/19","40.89.192.0/19","40.89.224.0/19","40.90.16.0/27","40.90.128.0/28","40.90.128.16/28","40.90.129.192/27","40.90.129.224/27","40.90.130.0/27","40.90.130.64/28","40.90.130.80/28","40.90.130.96/28","40.90.130.160/27","40.90.130.192/28","40.90.130.208/28","40.90.130.224/28","40.90.131.0/27","40.90.131.32/27","40.90.131.64/27","40.90.131.96/27","40.90.131.128/27","40.90.131.160/27","40.90.131.192/27","40.90.131.224/27","40.90.132.48/28","40.90.132.64/28","40.90.132.96/27","40.90.132.128/26","40.90.132.192/26","40.90.133.0/27","40.90.133.32/27","40.90.133.64/27","40.90.133.96/27","40.90.133.128/27","40.90.136.0/28","40.90.136.16/28","40.90.136.32/27","40.90.136.160/28","40.90.136.176/28","40.90.136.224/27","40.90.137.0/27","40.90.137.64/27","40.90.137.96/27","40.90.137.128/27","40.90.137.160/27","40.90.137.192/27","40.90.137.224/27","40.90.138.0/27","40.90.138.32/27","40.90.138.64/27","40.90.138.96/27","40.90.138.128/27","40.90.138.160/27","40.90.138.192/28","40.90.138.208/28","40.90.138.224/27","40.90.139.0/27","40.90.139.32/27","40.90.139.64/27","40.90.139.96/27","40.90.139.128/27","40.90.139.160/27","40.90.139.192/27","40.90.139.224/27","40.90.140.0/27","40.90.140.32/27","40.90.140.64/27","40.90.140.96/27","40.90.140.128/27","40.90.140.160/27","40.90.140.192/27","40.90.140.224/27","40.90.141.0/27","40.90.141.32/27","40.90.141.64/27","40.90.141.96/27","40.90.141.128/27","40.90.141.160/27","40.90.141.192/27","40.90.141.224/27","40.90.142.0/27","40.90.142.128/27","40.90.142.160/27","40.90.142.192/28","40.90.142.208/28","40.90.142.224/28","40.90.142.240/28","40.90.143.0/27","40.90.143.96/27","40.90.143.160/27","40.90.143.192/26","40.90.144.0/27","40.90.144.32/27","40.90.144.64/26","40.90.144.128/26","40.90.144.192/27","40.90.144.224/27","40.90.145.0/27","40.90.145.32/27","40.90.145.64/27","40.90.145.96/27","40.90.145.128/27","40.90.145.160/27","40.90.145.192/27","40.90.145.224/27","40.90.146.0/28","40.90.146.16/28","40.90.146.32/27","40.90.146.64/26","40.90.146.128/27","40.90.146.160/27","40.90.146.224/27","40.90.147.0/27","40.90.147.32/27","40.90.147.64/27","40.90.147.96/27","40.90.148.0/26","40.90.148.64/27","40.90.148.96/27","40.90.148.128/27","40.90.148.160/28","40.90.148.176/28","40.90.148.192/27","40.90.148.224/27","40.90.149.96/27","40.90.149.128/25","40.90.150.0/27","40.90.150.32/27","40.90.150.128/25","40.90.151.0/26","40.90.151.96/27","40.90.151.128/28","40.90.151.160/27","40.90.160.0/19","40.90.192.0/19","40.90.224.0/19","40.91.0.0/22","40.91.4.0/22","40.91.12.16/28","40.91.12.48/28","40.91.12.64/26","40.91.12.128/28","40.91.12.160/27","40.91.12.208/28","40.91.12.240/28","40.91.13.64/27","40.91.13.96/28","40.91.13.128/27","40.91.13.240/28","40.91.14.0/24","40.91.16.0/22","40.91.20.0/22","40.91.24.0/22","40.91.28.0/22","40.91.64.0/18","40.91.128.0/18","40.91.192.0/18","40.92.0.0/14","40.96.0.0/13","40.104.0.0/15","40.107.0.0/17","40.108.0.0/19","40.108.128.0/17","40.116.0.0/16","40.119.0.0/18","40.119.128.0/19","40.119.192.0/18","40.121.0.0/16","40.124.0.0/16","40.125.64.0/18","40.125.128.0/17","40.127.64.0/19","40.127.96.0/20","40.127.128.0/17","42.159.0.0/27","42.159.0.144/28","42.159.4.0/22","42.159.8.0/21","42.159.16.0/26","42.159.17.0/24","42.159.18.0/23","42.159.20.0/22","42.159.24.0/21","42.159.35.128/26","42.159.48.0/25","42.159.63.240/28","42.159.64.0/18","42.159.130.0/27","42.159.130.32/28","42.159.130.144/28","42.159.132.0/22","42.159.136.0/22","42.159.140.0/26","42.159.141.0/24","42.159.142.0/23","42.159.144.0/20","42.159.176.0/25","42.159.191.240/28","42.159.192.0/18","51.4.32.0/19","51.4.84.0/24","51.4.128.0/17","51.5.84.0/24","51.5.128.0/17","51.8.0.0/19","51.8.32.0/19","51.8.64.0/18","51.8.128.0/20","51.8.144.0/27","51.8.144.64/26","51.8.144.128/25","51.8.145.0/24","51.8.146.0/24","51.8.147.0/25","51.8.148.0/24","51.8.149.0/24","51.8.160.0/19","51.8.192.0/19","51.8.224.0/21","51.8.232.0/21","51.8.240.0/20","51.104.0.0/19","51.104.64.0/18","51.136.0.0/16","51.137.0.0/17","51.137.128.0/18","51.137.192.0/18","51.140.0.0/17","51.140.128.0/18","51.140.192.0/18","51.141.0.0/17","51.141.128.0/27","51.141.128.32/27","51.141.128.64/26","51.141.128.128/25","51.141.129.64/26","51.141.129.128/26","51.141.130.0/25","51.141.134.0/24","51.141.135.0/24","51.141.136.0/23","51.141.144.0/22","51.141.148.0/22","51.141.160.0/19","51.141.192.0/18","51.142.213.184/32","51.143.0.0/17","51.143.128.0/18","51.144.0.0/16","51.145.0.0/17","51.145.128.0/17","52.96.0.0/14","52.100.0.0/14","52.104.0.0/14","52.108.0.0/14","52.112.0.0/14","52.125.128.0/22","52.125.132.0/22","52.125.136.0/24","52.125.137.0/24","52.125.138.0/23","52.125.140.0/23","52.136.0.0/22","52.136.4.0/22","52.136.16.0/24","52.136.17.0/24","52.136.20.0/24","52.136.21.0/24","52.136.22.0/24","52.136.23.0/24","52.136.24.0/24","52.136.25.0/24","52.136.26.0/24","52.136.29.0/24","52.136.30.0/24","52.136.32.0/19","52.136.64.0/18","52.136.192.0/18","52.137.0.0/18","52.137.64.0/18","52.137.128.0/17","52.138.0.0/18","52.138.80.0/21","52.138.96.0/19","52.138.128.0/17","52.139.0.0/18","52.139.64.0/18","52.139.128.0/18","52.139.192.0/18","52.140.0.0/18","52.140.64.0/18","52.140.128.0/18","52.140.192.0/18","52.141.0.0/18","52.141.64.0/18","52.141.128.0/18","52.141.192.0/19","52.141.240.0/20","52.142.0.0/18","52.142.64.0/18","52.142.128.0/18","52.142.192.0/18","52.143.0.0/18","52.143.64.0/18","52.143.192.0/24","52.143.193.0/24","52.143.194.0/24","52.143.195.0/24","52.143.196.0/24","52.143.197.0/24","52.143.208.0/24","52.143.209.0/24","52.143.210.0/24","52.143.211.0/24","52.143.214.0/24","52.143.224.0/19","52.146.0.0/17","52.146.128.0/17","52.147.0.0/19","52.147.32.0/19","52.147.64.0/19","52.147.96.0/19","52.147.160.0/19","52.147.192.0/18","52.148.0.0/18","52.148.64.0/18","52.148.128.0/18","52.148.192.0/18","52.149.0.0/18","52.149.64.0/18","52.149.128.0/17","52.150.0.0/17","52.150.128.0/17","52.151.0.0/18","52.151.64.0/18","52.151.128.0/17","52.152.0.0/17","52.152.128.0/17","52.153.0.0/18","52.153.64.0/18","52.153.128.0/18","52.153.192.0/18","52.154.0.0/18","52.154.64.0/18","52.154.128.0/17","52.155.0.0/19","52.155.32.0/19","52.155.64.0/19","52.155.96.0/19","52.155.128.0/17","52.156.0.0/19","52.156.32.0/19","52.156.64.0/18","52.156.128.0/19","52.156.160.0/19","52.156.192.0/18","52.157.0.0/18","52.157.64.0/18","52.157.128.0/17","52.158.0.0/17","52.158.128.0/19","52.158.160.0/20","52.158.192.0/19","52.158.224.0/19","52.159.0.0/18","52.159.64.0/19","52.159.96.0/19","52.159.128.0/17","52.160.0.0/16","52.161.0.0/16","52.162.0.0/16","52.163.0.0/16","52.164.0.0/16","52.165.0.0/19","52.165.32.0/20","52.165.48.0/28","52.165.49.0/24","52.165.56.0/21","52.165.64.0/19","52.165.96.0/21","52.165.104.0/25","52.165.128.0/17","52.166.0.0/16","52.167.0.0/16","52.168.0.0/16","52.169.0.0/16","52.170.0.0/16","52.171.0.0/16","52.172.0.0/17","52.172.128.0/17","52.173.0.0/16","52.174.0.0/16","52.175.0.0/17","52.175.128.0/18","52.175.192.0/18","52.176.0.0/17","52.176.128.0/19","52.176.160.0/21","52.176.176.0/20",
                        "52.176.192.0/19","52.176.224.0/26","52.176.224.64/27","52.176.224.96/28","52.177.0.0/16","52.178.0.0/17","52.178.128.0/17","52.179.0.0/17","52.179.128.0/17","52.180.0.0/17","52.180.128.0/19","52.180.184.0/27","52.180.184.32/28","52.180.185.0/24","52.182.128.0/17","52.183.0.0/17","52.183.128.0/18","52.183.192.0/18","52.184.0.0/17","52.184.128.0/19","52.184.160.0/21","52.184.168.0/28","52.184.168.80/28","52.184.168.96/27","52.184.168.128/28","52.184.169.0/24","52.184.170.0/24","52.184.176.0/20","52.184.192.0/18","52.185.0.0/19","52.185.32.0/20","52.185.48.0/21","52.185.56.0/26","52.185.56.64/27","52.185.56.96/28","52.185.56.128/27","52.185.56.160/28","52.185.64.0/20","52.185.80.0/26","52.185.81.0/24","52.185.88.0/21","52.185.96.0/20","52.185.112.0/26","52.185.112.96/27","52.185.120.0/21","52.185.128.0/18","52.185.192.0/18","52.186.0.0/16","52.187.0.0/17","52.187.128.0/18","52.187.192.0/18","52.188.0.0/16","52.189.0.0/17","52.189.128.0/18","52.189.192.0/18","52.190.0.0/17","52.190.128.0/17","52.191.0.0/18","52.191.64.0/19","52.191.96.0/21","52.191.104.0/27","52.191.105.0/24","52.191.106.0/24","52.191.112.0/20","52.191.128.0/18","52.191.192.0/18","52.224.0.0/16","52.225.0.0/17","52.225.128.0/21","52.225.136.0/27","52.225.136.32/28","52.225.136.64/28","52.225.137.0/24","52.225.192.0/18","52.226.0.0/16","52.228.0.0/17","52.228.128.0/17","52.229.0.0/18","52.229.64.0/18","52.229.128.0/17","52.230.0.0/17","52.230.128.0/17","52.231.0.0/17","52.231.128.0/17","52.232.0.0/17","52.232.128.0/21","52.232.136.0/21","52.232.144.0/24","52.232.145.0/24","52.232.146.0/24","52.232.147.0/24","52.232.148.0/24","52.232.149.0/24","52.232.151.0/24","52.232.152.0/24","52.232.153.0/24","52.232.154.0/24","52.232.155.0/24","52.232.156.0/24","52.232.157.0/24","52.232.158.0/24","52.232.159.0/24","52.232.160.0/19","52.232.192.0/18","52.233.0.0/18","52.233.64.0/18","52.233.128.0/17","52.234.0.0/17","52.234.128.0/17","52.235.0.0/18","52.235.64.0/18","52.236.0.0/17","52.236.128.0/17","52.237.0.0/18","52.237.64.0/18","52.237.128.0/18","52.237.192.0/18","52.238.0.0/18","52.238.78.88/32","52.238.106.116/32","52.238.119.141/32","52.238.192.0/18","52.239.0.0/17","52.239.128.0/24","52.239.129.0/24","52.239.130.0/23","52.239.132.0/23","52.239.135.64/26","52.239.135.128/26","52.239.135.192/26","52.239.136.0/22","52.239.140.0/22","52.239.144.0/23","52.239.146.0/23","52.239.148.0/27","52.239.148.64/26","52.239.148.128/25","52.239.149.0/24","52.239.150.0/23","52.239.152.0/22","52.239.156.0/24","52.239.157.0/25","52.239.157.128/26","52.239.157.192/27","52.239.158.0/23","52.239.160.0/22","52.239.164.0/25","52.239.164.128/26","52.239.164.192/26","52.239.165.0/26","52.239.165.160/27","52.239.167.0/24","52.239.168.0/22","52.239.172.0/22","52.239.176.128/25","52.239.177.32/27","52.239.177.64/26","52.239.177.128/25","52.239.178.0/23","52.239.180.0/22","52.239.184.0/25","52.239.184.160/28","52.239.184.192/27","52.239.185.32/27","52.239.185.64/27","52.239.186.0/24","52.239.187.0/25","52.239.187.128/25","52.239.188.0/24","52.239.189.0/24","52.239.190.0/25","52.239.190.128/26","52.239.190.192/26","52.239.192.0/25","52.239.192.160/27","52.239.192.192/26","52.239.193.0/24","52.239.195.0/24","52.239.197.0/24","52.239.198.0/25","52.239.198.160/27","52.239.198.192/26","52.239.199.0/24","52.239.200.0/23","52.239.202.0/24","52.239.203.0/24","52.239.204.0/24","52.239.205.0/24","52.239.206.0/24","52.239.207.0/27","52.239.207.32/28","52.239.207.64/26","52.239.207.128/26","52.239.207.192/26","52.239.208.0/23","52.239.210.0/23","52.239.212.0/23","52.239.214.0/23","52.239.220.0/23","52.239.222.0/23","52.239.224.0/24","52.239.225.0/24","52.239.226.0/24","52.239.227.0/24","52.239.228.0/23","52.239.231.0/24","52.239.234.0/23","52.239.236.0/23","52.239.240.0/24","52.239.242.0/23","52.239.244.0/23","52.239.246.0/23","52.239.248.0/24","52.239.249.0/24","52.239.252.0/24","52.239.254.0/23","52.240.0.0/17","52.240.128.0/17","52.241.0.0/16","52.242.0.0/18","52.242.64.0/18","52.242.128.0/17","52.243.32.0/19","52.243.64.0/18","52.244.160.207/32","52.245.8.0/22","52.245.12.0/22","52.245.16.0/22","52.245.20.0/22","52.245.24.0/22","52.245.28.0/22","52.245.32.0/22","52.245.36.0/22","52.245.40.0/22","52.245.44.0/24","52.245.45.0/25","52.245.45.128/28","52.245.45.160/27","52.245.45.192/26","52.245.46.0/27","52.245.46.48/28","52.245.46.64/28","52.245.46.112/28","52.245.46.128/28","52.245.46.160/27","52.245.46.192/27","52.245.46.224/28","52.245.48.0/22","52.245.52.0/22","52.245.56.0/22","52.245.60.0/22","52.245.64.0/22","52.245.68.0/24","52.245.69.32/27","52.245.69.64/27","52.245.69.96/28","52.245.69.144/28","52.245.69.160/27","52.245.69.192/26","52.245.70.0/23","52.245.72.0/22","52.245.76.0/22","52.245.80.0/22","52.245.84.0/22","52.245.88.0/22","52.245.92.0/22","52.245.96.0/22","52.245.100.0/22","52.245.104.0/22","52.245.108.0/22","52.245.112.0/22","52.245.124.0/22","52.246.0.0/17","52.246.128.0/20","52.246.160.0/19","52.246.192.0/18","52.247.0.0/17","52.247.150.191/32","52.247.192.0/18","52.248.0.0/17","52.248.128.0/17","52.249.0.0/18","52.249.64.0/19","52.249.128.0/17","52.250.0.0/17","52.250.128.0/18","52.250.192.0/18","52.251.0.0/17","52.251.128.0/17","52.252.0.0/17","52.252.128.0/17","52.253.0.0/18","52.253.64.0/20","52.253.80.0/20","52.253.96.0/19","52.253.128.0/20","52.253.148.0/23","52.253.154.0/23","52.254.0.0/18","52.254.64.0/19","52.254.96.0/20","52.254.112.0/21","52.254.128.0/17","52.255.0.0/19","52.255.32.0/19","52.255.64.0/18","52.255.128.0/17","64.4.8.0/24","64.4.22.128/25","64.4.50.128/25","64.4.54.0/24","65.52.0.0/19","65.52.32.0/21","65.52.48.0/20","65.52.64.0/20","65.52.104.0/24","65.52.106.16/28","65.52.106.32/27","65.52.106.64/26","65.52.106.128/27","65.52.108.0/23","65.52.110.0/24","65.52.111.0/24","65.52.112.0/20","65.52.128.0/19","65.52.160.0/19","65.52.192.0/19","65.52.224.0/21","65.52.232.0/21","65.52.240.0/21","65.54.19.128/27","65.54.55.160/27","65.54.55.224/27","65.54.170.128/25","65.54.247.128/25","70.37.0.0/21","70.37.8.0/22","70.37.16.0/20","70.37.32.0/20","70.37.48.0/20","70.37.64.0/18","70.37.154.128/25","70.37.160.0/21","94.245.88.0/21","94.245.104.0/21","94.245.114.1/32","94.245.114.2/31","94.245.114.4/32","94.245.114.33/32","94.245.114.34/31","94.245.114.36/32","94.245.117.53/32","94.245.117.96/27","94.245.118.0/27","94.245.118.65/32","94.245.118.66/31","94.245.118.68/32","94.245.118.97/32","94.245.118.98/31","94.245.118.100/32","94.245.118.129/32","94.245.118.130/31","94.245.118.132/32","94.245.120.64/26","94.245.120.128/28","94.245.122.0/24","94.245.123.144/28","94.245.123.176/28","104.40.0.0/17","104.40.128.0/17","104.41.0.0/18","104.41.64.0/18","104.41.128.0/19","104.41.160.0/19","104.41.192.0/18","104.42.0.0/16","104.43.0.0/17","104.43.128.0/17","104.44.88.0/27","104.44.88.32/27","104.44.88.64/27","104.44.88.96/27","104.44.88.128/27","104.44.88.160/27","104.44.88.192/27","104.44.88.224/27","104.44.89.0/27","104.44.89.32/27","104.44.89.64/27","104.44.89.96/27","104.44.89.128/27","104.44.89.160/27","104.44.89.192/27","104.44.89.224/27","104.44.90.0/27","104.44.90.32/27","104.44.90.64/26","104.44.90.128/27","104.44.90.160/27","104.44.90.192/27","104.44.90.224/27","104.44.91.0/27","104.44.91.32/27","104.44.91.64/27","104.44.91.96/27","104.44.91.128/27","104.44.91.160/27","104.44.91.192/27","104.44.91.224/27","104.44.92.0/27","104.44.92.32/27","104.44.92.64/27","104.44.92.96/27","104.44.92.128/27","104.44.92.160/27","104.44.92.192/27","104.44.92.224/27","104.44.93.0/27","104.44.93.32/27","104.44.93.64/27","104.44.93.96/27","104.44.93.128/27","104.44.93.160/27","104.44.93.192/27","104.44.93.224/27","104.44.94.0/28","104.44.94.16/28","104.44.94.32/28","104.44.94.48/28","104.44.94.64/28","104.44.94.80/28","104.44.94.96/28","104.44.94.112/28","104.44.94.128/28","104.44.94.144/28","104.44.94.160/27","104.44.94.192/28","104.44.94.208/28","104.44.94.224/27","104.44.95.0/28","104.44.95.16/28","104.44.95.32/28","104.44.95.48/28","104.44.95.64/28","104.44.95.80/28","104.44.95.96/28","104.44.95.112/28","104.44.95.128/27","104.44.95.160/27","104.44.95.192/28","104.44.95.224/28","104.44.95.240/28","104.44.128.0/18","104.44.218.128/25","104.44.254.128/25","104.44.255.0/25","104.45.0.0/18","104.45.64.0/20","104.45.80.0/20","104.45.96.0/19","104.45.128.0/18","104.45.192.0/20","104.45.208.0/20","104.45.224.0/19","104.46.0.0/21","104.46.8.0/21","104.46.16.0/21","104.46.24.0/22","104.46.28.0/24","104.46.29.0/24","104.46.30.0/23","104.46.32.0/19","104.46.64.0/19","104.46.96.0/19","104.46.128.0/19","104.46.160.0/19","104.46.192.0/20","104.46.208.0/20","104.46.224.0/20","104.46.240.0/20","104.47.0.0/17","104.47.128.0/18","104.47.200.0/21","104.47.208.0/23","104.47.210.0/23","104.47.212.0/23","104.47.214.0/23","104.47.216.64/26","104.47.218.0/23","104.47.220.0/22","104.47.224.0/20","104.146.0.0/19","104.146.128.0/17","104.208.0.0/19","104.208.32.0/20","104.208.64.0/18","104.208.128.0/17","104.209.0.0/18","104.209.64.0/20","104.209.80.0/20","104.209.128.0/17","104.210.0.0/20","104.210.32.0/19","104.210.64.0/18","104.210.128.0/19","104.210.176.0/20","104.210.192.0/19","104.211.0.0/18","104.211.64.0/18","104.211.128.0/18","104.211.192.0/18","104.214.0.0/17","104.214.128.0/19","104.214.160.0/19","104.214.192.0/18","104.215.0.0/18","104.215.64.0/18","104.215.128.0/17","111.221.29.0/24","111.221.30.0/23","111.221.78.0/23","111.221.80.0/20","111.221.96.0/20","111.221.112.0/21","131.253.12.8/29","131.253.12.16/28","131.253.12.36/30","131.253.12.40/29","131.253.12.48/29","131.253.12.56/29","131.253.12.64/29","131.253.12.72/29","131.253.12.96/27","131.253.12.128/27","131.253.12.160/28","131.253.12.176/28","131.253.12.192/28","131.253.12.208/28","131.253.12.224/30","131.253.12.228/30","131.253.12.248/29","131.253.13.0/28","131.253.13.16/29","131.253.13.24/29","131.253.13.32/28","131.253.13.48/28","131.253.13.64/29","131.253.13.72/29","131.253.13.80/29","131.253.13.88/30","131.253.13.96/30","131.253.13.100/30","131.253.13.104/30","131.253.13.108/30","131.253.13.112/28","131.253.13.128/27","131.253.13.160/28","131.253.13.176/28","131.253.13.192/26","131.253.14.4/30","131.253.14.8/31","131.253.14.16/28","131.253.14.32/27","131.253.14.64/28","131.253.14.80/28","131.253.14.96/27","131.253.14.128/27","131.253.14.160/27","131.253.14.192/29","131.253.14.208/28","131.253.14.224/28","131.253.14.248/29","131.253.15.8/29","131.253.15.16/28","131.253.15.32/27","131.253.15.64/26","131.253.15.128/28","131.253.15.144/28","131.253.15.160/27","131.253.15.192/28","131.253.15.208/28","131.253.15.224/27","131.253.24.0/28","131.253.24.16/28","131.253.24.32/27","131.253.24.64/26","131.253.24.128/27","131.253.24.160/27","131.253.24.192/26","131.253.25.0/24","131.253.26.0/25","131.253.26.128/25","131.253.27.0/24","131.253.34.0/25","131.253.34.128/26","131.253.34.224/27","131.253.35.0/25","131.253.35.128/26","131.253.35.192/26","131.253.36.128/26","131.253.36.192/27","131.253.36.224/27","131.253.37.0/24","131.253.38.0/27","131.253.38.32/27","131.253.38.64/27","131.253.38.96/29","131.253.38.104/29","131.253.38.112/29","131.253.38.128/26","131.253.38.192/26","131.253.40.0/24","131.253.41.0/24","137.117.0.0/19","137.117.32.0/19","137.117.64.0/18","137.117.128.0/17","137.135.0.0/18","137.135.64.0/18","137.135.128.0/17","138.91.0.0/20","138.91.16.0/20","138.91.32.0/20","138.91.48.0/20","138.91.64.0/19","138.91.96.0/19","138.91.128.0/17","139.217.0.0/19","139.217.32.0/24","139.217.40.0/21","139.217.48.0/21","139.217.128.0/19","139.217.160.0/26","139.217.160.64/27","139.217.160.128/28","139.217.161.0/24","139.217.162.0/24","139.217.168.0/21","139.217.192.0/20","139.219.0.0/20","139.219.18.0/23","139.219.20.0/28","139.219.32.0/19","139.219.64.0/18","139.219.128.0/20","139.219.144.0/24","139.219.147.0/26","139.219.148.0/28","139.219.150.0/23","139.219.155.0/24","139.219.160.0/19","139.219.192.0/18","150.171.32.0/22","150.171.40.0/22","168.61.0.0/19","168.61.32.0/20","168.61.48.0/21","168.61.56.0/21","168.61.64.0/20","168.61.80.0/20","168.61.96.0/19","168.61.128.0/24","168.61.129.0/25","168.61.129.128/26","168.61.129.208/28","168.61.129.224/27","168.61.130.64/26","168.61.130.128/25","168.61.131.0/26","168.61.131.128/25","168.61.132.0/26","168.61.144.0/20","168.61.160.0/19","168.61.208.0/20","168.62.0.0/19","168.62.32.0/19","168.62.64.0/19","168.62.96.0/19","168.62.128.0/19","168.62.160.0/19","168.62.192.0/19","168.62.224.0/19","168.63.0.0/19","168.63.32.0/19","168.63.64.0/20","168.63.80.0/21","168.63.88.0/23","168.63.90.0/24","168.63.91.0/26","168.63.92.0/22","168.63.96.0/19","168.63.128.0/24","168.63.129.0/28","168.63.129.32/27","168.63.129.64/26","168.63.129.128/25","168.63.130.0/23","168.63.132.0/22","168.63.136.0/21","168.63.144.0/20","168.63.160.0/19","168.63.192.0/19","168.63.224.0/19","191.232.0.0/23","191.232.2.128/25","191.232.32.0/19","191.232.96.0/19","191.232.137.0/24","191.232.138.0/23","191.232.140.0/24","191.232.160.0/19","191.232.192.0/18","191.234.2.0/23","191.234.16.0/20","191.234.32.0/19","191.234.138.0/23","191.234.140.0/22","191.234.160.0/19","191.235.0.0/20","191.235.32.0/19","191.235.64.0/18","191.235.128.0/18","191.235.192.0/22","191.235.196.0/22","191.235.200.0/21","191.235.208.0/20","191.235.224.0/20","191.235.240.0/21","191.235.248.0/24","191.235.255.0/24","191.236.0.0/18","191.236.64.0/18","191.236.128.0/18","191.236.192.0/18","191.237.0.0/17","191.237.128.0/18","191.237.192.0/23","191.237.194.0/24","191.237.195.0/24","191.237.196.0/24","191.237.200.0/21","191.237.208.0/20","191.237.224.0/21","191.237.232.0/22","191.237.236.0/24","191.237.238.0/24","191.237.240.0/23","191.237.244.0/22","191.237.248.0/21","191.238.0.0/18","191.238.64.0/23","191.238.66.0/23","191.238.68.0/24","191.238.70.0/23","191.238.80.0/21","191.238.88.0/22","191.238.92.0/23","191.238.96.0/19","191.238.128.0/21","191.238.136.0/21","191.238.144.0/20","191.238.160.0/19","191.238.192.0/19","191.238.224.0/19","191.239.0.0/18","191.239.64.0/19","191.239.96.0/20","191.239.112.0/20","191.239.128.0/19","191.239.160.0/19","191.239.192.0/22","191.239.196.0/24","191.239.197.0/28","191.239.200.0/22","191.239.204.0/22","191.239.208.0/20","191.239.224.0/20","191.239.240.0/20","193.149.64.0/21","193.149.72.0/21","193.149.80.0/21","193.149.88.0/21","199.30.16.0/24","199.30.17.0/24","199.30.18.0/23","199.30.20.0/24","199.30.21.0/24","199.30.22.0/24","199.30.23.0/24","199.30.24.0/23","199.30.26.0/24","199.30.27.0/25","199.30.27.144/28","199.30.27.160/27","199.30.27.192/26","199.30.28.0/26","199.30.28.64/26","199.30.28.128/25","199.30.29.0/24","199.30.30.0/23","204.79.197.215/32","204.231.197.0/24","206.191.224.0/19","207.46.13.0/24","207.46.50.128/28","207.46.59.64/27","207.46.63.64/27","207.46.63.128/25","207.46.67.160/27","207.46.67.192/27","207.46.72.0/27","207.46.73.250/32","207.46.77.224/28","207.46.87.0/24","207.46.89.16/28","207.46.95.32/27","207.46.100.0/24","207.46.126.0/24","207.46.128.0/19","207.46.163.0/24","207.46.193.192/28","207.46.193.224/27","207.46.194.0/24","207.46.198.128/25","207.46.200.96/27","207.46.200.176/28","207.46.202.128/28","207.46.205.0/24","207.46.216.54/32","207.46.224.0/20","207.68.174.0/29","207.68.174.24/29","207.68.174.32/29","207.68.174.40/29","207.68.174.48/29","207.68.174.56/29","207.68.174.64/29","207.68.174.80/28","207.68.174.96/28","207.68.174.112/28","207.68.174.128/29","207.68.174.136/29","207.68.174.144/29","207.68.174.152/29","207.68.174.160/29","207.68.174.168/29","207.68.174.176/29","207.68.174.184/29","207.68.174.192/27","207.68.174.248/29","209.240.212.0/23","213.199.128.0/20","213.199.154.0/24","213.199.168.0/23","213.199.180.32/28","213.199.180.96/27",
                        "13.94.0.0/16","13.107.0.0/16",
                        "131.253.0.0/16",
                        "213.199.180.128/26","213.199.180.192/27","213.199.183.0/24","216.32.180.0/23",
                        "51.116.0.0/16","52.254.0.0/16","52.253.0.0/16",
                        "91.225.248.0/24",
                        "20.0.0.0/8","23.102.0.0/16",
                        "40.126.0.0/16"
                        ]


        defs_google = ["168.149.132.0/24","34.72.0.0/16","34.80.0.0/16","34.95.0.0/16","34.96.0.0/16","34.97.0.0/16",
                       "34.98.0.0/16", "34.101.0.0/16","34.102.0.0/16","34.103.0.0/16","34.104.0.0/16","34.105.0.0/16","34.106.0.0/16",
                       "34.107.0.0/16","34.108.0.0/16","34.109.0.0/16","34.110.0/16","34.111.0.0/16","34.112.0.0/16",
                       "34.113.0.0/16","34.114.0.0/16","34.115.0.0/16","34.116.0.0/16","34.117.0.0/16","34.118.0.0/16",
                       "34.119.0.0/16","34.120.0.0/16","34.141.0.0/16",
                       "35.184.0.0/16",
                       "104.132.0.0/23","104.132.34.0/24","104.154.0.0/15","104.154.0.0/19","104.154.128.0/19",
                       "104.154.160.0/19","104.154.192.0/19","104.154.224.0/19","104.154.32.0/19","104.154.64.0/19",
                       "104.154.96.0/19","104.155.0.0/19","104.155.128.0/19","104.155.160.0/19","104.155.192.0/19",
                       "104.155.224.0/19","104.155.32.0/19","104.155.64.0/19","104.155.96.0/19","104.196.0.0/14",
                       "104.196.0.0/19","104.196.128.0/19","104.196.160.0/19","104.196.192.0/19","104.196.224.0/19",
                       "104.196.32.0/19","104.196.64.0/19","104.196.96.0/19","104.197.0.0/19","104.197.128.0/19","104.197.160.0/19",
                       "104.197.192.0/19","104.197.224.0/19","104.197.32.0/19","104.197.64.0/19","104.197.96.0/19","104.198.0.0/19",
                       "104.198.128.0/19","104.198.160.0/19","104.198.192.0/19","104.198.224.0/19","104.198.32.0/19","104.198.64.0/19",
                       "104.198.96.0/19","104.199.0.0/19","104.199.128.0/19","104.199.160.0/19","104.199.192.0/19",
                       "104.199.224.0/19",
                       "104.199.32.0/19","104.199.64.0/19","104.199.65.0/24","104.199.96.0/19","107.167.160.0/19",
                       "107.178.192.0/18","108.170.192.0/18",
                       "108.177.0.0/17","108.177.10.0/24","108.177.103.0/24","108.177.104.0/24","108.177.11.0/24","108.177.111.0/24",
                       "108.177.112.0/24","108.177.119.0/24","108.177.120.0/24","108.177.12.0/24","108.177.121.0/24","108.177.122.0/24",
                       "108.177.125.0/24","108.177.126.0/24","108.177.127.0/24","108.177.13.0/24","108.177.14.0/24","108.177.15.0/24",
                       "108.177.8.0/24","108.177.9.0/24","108.177.96.0/24","108.177.97.0/24","108.177.98.0/24","108.59.80.0/20",
                       "130.211.0.0/16","136.112.0.0/12",
                       "142.250.0.0/16","142.251.0.0/16",
                       "146.148.0.0/17","162.216.148.0/22","162.222.176.0/21",
                       "172.102.10.0/24","172.102.11.0/24","172.102.12.0/23","172.102.14.0/23","172.102.8.0/21","172.102.8.0/24",
                       "172.110.32.0/21","172.217.0.0/16","172.217.0.0/24","172.217.10.0/24","172.217.1.0/24","172.217.11.0/24",
                       "172.217.12.0/24","172.217.128.0/19","172.217.13.0/24","172.217.14.0/24","172.217.15.0/24","172.217.16.0/24",
                       "172.217.17.0/24","172.217.18.0/24","172.217.19.0/24","172.217.192.0/24","172.217.193.0/24","172.217.194.0/24",
                       "172.217.195.0/24","172.217.197.0/24","172.217.20.0/24","172.217.2.0/24","172.217.21.0/24","172.217.22.0/24",
                       "172.217.23.0/24","172.217.24.0/24","172.217.25.0/24","172.217.26.0/24","172.217.27.0/24","172.217.28.0/24",
                       "172.217.29.0/24","172.217.30.0/24","172.217.3.0/24","172.217.31.0/24","172.217.4.0/24","172.217.5.0/24",
                       "172.217.6.0/24","172.217.7.0/24","172.217.8.0/24","172.217.9.0/24","172.253.0.0/16","173.194.0.0/16",
                       "173.194.0.0/19","173.194.112.0/24","173.194.113.0/24","173.194.117.0/24","173.194.118.0/24","173.194.119.0/24",
                       "173.194.120.0/24","173.194.121.0/24","173.194.124.0/24","173.194.128.0/20","173.194.132.0/24","173.194.136.0/24",
                       "173.194.140.0/24","173.194.141.0/24","173.194.142.0/24","173.194.144.0/20","173.194.160.0/21","173.194.175.0/24",
                       "173.194.176.0/20","173.194.192.0/24","173.194.193.0/24","173.194.194.0/24","173.194.195.0/24","173.194.196.0/24","173.194.197.0/24","173.194.198.0/24","173.194.199.0/24","173.194.200.0/24","173.194.201.0/24","173.194.202.0/24","173.194.203.0/24","173.194.204.0/24","173.194.205.0/24","173.194.206.0/24","173.194.207.0/24","173.194.208.0/24","173.194.209.0/24","173.194.210.0/24","173.194.211.0/24","173.194.212.0/24","173.194.213.0/24","173.194.214.0/24","173.194.215.0/24","173.194.216.0/24","173.194.217.0/24","173.194.218.0/24","173.194.219.0/24","173.194.220.0/24","173.194.221.0/24","173.194.222.0/24","173.194.223.0/24","173.194.32.0/24","173.194.34.0/24","173.194.35.0/24","173.194.36.0/24","173.194.37.0/24","173.194.38.0/24","173.194.39.0/24","173.194.40.0/24","173.194.41.0/24","173.194.42.0/24","173.194.44.0/24","173.194.46.0/24","173.194.48.0/20","173.194.53.0/24","173.194.63.0/24","173.194.66.0/24","173.194.67.0/24","173.194.68.0/24","173.194.69.0/24","173.194.70.0/24","173.194.7.0/24","173.194.73.0/24","173.194.74.0/24","173.194.76.0/24","173.194.78.0/24","173.194.79.0/24","173.194.96.0/21","173.255.112.0/20","185.150.148.0/22","185.25.28.0/23","192.104.160.0/23","192.158.28.0/22","192.178.0.0/15","199.192.112.0/22","199.223.232.0/21","207.223.160.0/20","208.68.108.0/22","208.81.188.0/22","209.107.176.0/20","209.107.176.0/23","209.107.182.0/23","209.107.184.0/23","209.107.185.0/24","209.85.128.0/17","209.85.137.0/24","209.85.144.0/24","209.85.145.0/24","209.85.147.0/24","209.85.164.0/23","209.85.200.0/24","209.85.201.0/24","209.85.202.0/24","209.85.203.0/24","209.85.232.0/24","209.85.233.0/24","209.85.234.0/24","209.85.235.0/24","216.239.32.0/19","216.239.32.0/24","216.239.33.0/24","216.239.34.0/24","216.239.35.0/24","216.239.36.0/24","216.239.38.0/24","216.239.39.0/24","216.252.220.0/22","216.252.220.0/24","216.252.222.0/24",
                       "216.58.192.0/19","216.58.192.0/22","216.58.196.0/23","216.58.198.0/24","216.58.199.0/24","216.58.200.0/24","216.58.201.0/24",
                       "216.58.202.0/24","216.58.203.0/24","216.58.204.0/23","216.58.206.0/23","216.58.208.0/24","216.58.209.0/24","216.58.210.0/24","216.58.211.0/24","216.58.212.0/24","216.58.213.0/24","216.58.214.0/24","216.58.215.0/24","216.58.216.0/24","216.58.217.0/24","216.58.218.0/24","216.58.219.0/24","216.58.220.0/24","216.58.221.0/24","216.58.222.0/24","216.58.223.0/24","216.73.80.0/20","23.236.48.0/20","23.251.128.0/19","34.102.0.0/16","35.184.0.0/13","35.184.0.0/19","35.184.128.0/19","35.184.160.0/19","35.184.192.0/19","35.184.224.0/19","35.184.32.0/19","35.184.64.0/19","35.184.96.0/19","35.185.0.0/19","35.185.128.0/19","35.185.160.0/19","35.185.192.0/19","35.185.224.0/19","35.185.32.0/19","35.185.64.0/19","35.185.96.0/19","35.186.0.0/16","35.186.0.0/19","35.186.128.0/19","35.186.160.0/19","35.186.32.0/19","35.186.64.0/19","35.186.96.0/19","35.187.0.0/19","35.187.128.0/19","35.187.160.0/19","35.187.192.0/19","35.187.224.0/19","35.187.32.0/19","35.187.64.0/19","35.187.96.0/19","35.188.0.0/19","35.188.128.0/19","35.188.160.0/19","35.188.192.0/19","35.188.224.0/19","35.188.32.0/19","35.188.64.0/19","35.188.96.0/19","35.189.0.0/19","35.189.128.0/19","35.189.160.0/19","35.189.192.0/19","35.189.224.0/19","35.189.32.0/19","35.189.64.0/19","35.189.96.0/19","35.190.0.0/16","35.190.128.0/19","35.190.160.0/19","35.190.192.0/19","35.190.224.0/19","35.192.0.0/13","35.200.0.0/14","35.204.0.0/15","35.220.0.0/14","35.224.0.0/14","35.228.0.0/14","35.232.0.0/14","35.236.0.0/14","35.240.0.0/14","35.244.0.0/14","64.233.160.0/19","64.233.160.0/24","64.233.161.0/24","64.233.162.0/24","64.233.163.0/24","64.233.164.0/24","64.233.165.0/24","64.233.166.0/24","64.233.167.0/24","64.233.168.0/24","64.233.169.0/24","64.233.170.0/24","64.233.171.0/24","64.233.172.0/23","64.233.176.0/24","64.233.177.0/24","64.233.178.0/24","64.233.179.0/24","64.233.180.0/24","64.233.181.0/24","64.233.182.0/24","64.233.183.0/24","64.233.184.0/24","64.233.185.0/24","64.233.186.0/24","64.233.187.0/24","64.233.188.0/24","64.233.189.0/24","64.233.190.0/24","64.233.191.0/24","66.102.0.0/20","66.102.1.0/24","66.102.12.0/24","66.102.2.0/24","66.102.3.0/24","66.102.4.0/24","66.102.8.0/23","66.249.64.0/19","66.249.64.0/20","66.249.80.0/22","66.249.84.0/23","66.249.88.0/24","70.32.128.0/19","70.32.129.0/24","70.32.131.0/24","70.32.133.0/24","70.32.145.0/24","70.32.146.0/23","70.32.151.0/24","72.14.192.0/18","74.114.24.0/21","74.125.0.0/16","74.125.0.0/20","74.125.124.0/24","74.125.126.0/24","74.125.127.0/24","74.125.128.0/24","74.125.129.0/24","74.125.130.0/24","74.125.131.0/24","74.125.132.0/24","74.125.133.0/24","74.125.134.0/24","74.125.135.0/24","74.125.136.0/24","74.125.138.0/24","74.125.139.0/24","74.125.140.0/24","74.125.141.0/24","74.125.142.0/24","74.125.143.0/24","74.125.152.0/21","74.125.176.0/20","74.125.192.0/24","74.125.193.0/24","74.125.195.0/24","74.125.196.0/24","74.125.197.0/24","74.125.198.0/24","74.125.199.0/24","74.125.200.0/24","74.125.20.0/24","74.125.201.0/24","74.125.202.0/24","74.125.203.0/24","74.125.204.0/24","74.125.205.0/24","74.125.206.0/24","74.125.21.0/24","74.125.225.0/24","74.125.226.0/24","74.125.227.0/24","74.125.228.0/24","74.125.230.0/24","74.125.23.0/24","74.125.232.0/24","74.125.234.0/24","74.125.235.0/24","74.125.236.0/24","74.125.238.0/24","74.125.24.0/24","74.125.27.0/24","74.125.28.0/24","74.125.30.0/24","74.125.31.0/24","74.125.39.0/24","74.125.44.0/22","74.125.6.0/24","74.125.68.0/24","74.125.69.0/24","74.125.70.0/24","74.125.71.0/24","74.125.72.0/22","8.34.208.0/21","8.34.216.0/21","8.35.192.0/21","8.35.200.0/21","8.8.4.0/24","8.8.8.0/24","89.207.231.0/24","173.255.112.0/24","173.255.113.0/24","173.255.114.0/24","173.255.115.0/24","173.255.116.0/24","173.255.117.0/24","173.255.118.0/24","173.255.119.0/24","173.255.120.0/24","173.255.121.0/24","173.255.122.0/24","173.255.123.0/24","173.255.124.0/24","173.255.125.0/24","173.255.126.0/24","173.255.127.0/24","162.222.179.0/24","35.227.0.0/16","35.185.0.0/16","35.186.0.0/16","35.187.0.0/16","35.188.0.0/16","35.189.0.0/16","35.190.0.0/16","35.190.0.0/16","35.191.0.0/16","35.192.0.0/16","35.193.0.0/16","35.194.0.0/16","35.195.0.0/16","35.196.0.0/16","35.197.0.0/16","35.198.0.0/16","35.199.0.0/16","35.200.0.0/16","35.201.0.0/16","35.202.0.0/16","35.203.0.0/16","35.204.0.0/16","35.205.0.0/16","35.206.0.0/16","35.207.0.0/16","35.208.0.0/16","35.209.0.0/16","35.210.0.0/16","35.211.0.0/16","35.212.0.0/16","35.213.0.0/16","35.214.0.0/16","35.215.0.0/16","35.216.0.0/16","35.217.0.0/16","35.218.0.0/16","35.219.0.0/16","35.220.0.0/16","35.221.0.0/16","35.222.0.0/16","35.223.0.0/16","35.224.0.0/16","35.225.0.0/16","35.226.0.0/16","35.227.0.0/16","35.228.0.0/16","35.229.0.0/16","35.230.0.0/16","35.231.0.0/16","35.232.0.0/16","35.233.0.0/16","35.234.0.0/16","35.235.0.0/16","35.236.0.0/16","35.237.0.0/16","35.238.0.0/16","35.239.0.0/16","35.240.0.0/16","35.241.0.0/16","35.242.0.0/16","35.243.0.0/16","35.244.0.0/16","35.245.0.0/16","35.246.0.0/16","35.247.0.0/16","104.155.0.0/16","104.196.0.0/16","104.197.0.0/16","104.198.0.0/16","104.199.0.0/16","64.15.112.0/24","64.15.113.0/24","64.15.114.0/24","64.15.115.0/24","64.15.116.0/24","64.15.117.0/24","64.15.118.0/24","64.15.119.0/24","64.15.120.0/24","64.15.121.0/24","64.15.122.0/24","64.15.123.0/24","64.15.124.0/24","64.15.125.0/24","64.15.126.0/24","64.15.127.0/24",
                       "216.58.209.0/24"]

        defs_amazon =["3.0.0.0/8","63.33.0.0/16",
                      "13.32.0.0/16","13.33.0.0/16","13.34.0.0/16","13.35.0.0/16","13.36.0.0/16","13.37.0.0/16","13.38.0.0/16","13.39.0.0/16",
                      "13.40.0.0/16","13.41.0.0/16","13.42.0.0/16","13.43.0.0/16","13.44.0.0/16","13.45.0.0/16","13.46.0.0/16",
                      "13.47.0.0/16","13.48.0.0/16","13.49.0.0/16","13.50.0.0/16","13.51.0.0/16","13.52.0.0/16","13.53.0.0/16",
                      "13.54.0.0/16","13.55.0.0/16","13.56.0.0/16","13.57.0.0/16","13.58.0.0/16","13.112.0.0/16","13.113.0.0/16",
                      "13.124.0.0/16","13.125.0.0/16","13.126.0.0/16",
                      "13.208.0.0/16","13.209.0.0/16","13.210.0.0/16","13.224.0.0/16","13.225.0.0/16","13.226.0.0/16","13.227.0.0/16",
                      "13.230.0.0/16","13.232.0.0/16","13.249.0.0/16","13.250.0.0/16",
                      "15.160.0.0/16","15.188.0.0/16","15.197.0.0/16","15.236.0.0/16","15.237.0.0/16",
                      "18.66.0.0/16",
                      "18.117.0.0/16","18.118.0.0/16","18.119.0.0/16","18.120.0.0/16","18.121.0.0/16","18.122.0.0/16",
                      "18.123.0.0/16","18.124.0.0/16","18.125.0.0/16","18.126.0.0/16","18.127.0.0/16","18.128.0.0/16",
                      "18.129.0.0/16","18.130.0.0/16","18.131.0.0/16","18.132.0.0/16","18.133.0.0/16","18.134.0.0/16",
                      "18.153.0.0/16","18.154.0.0/16","18.155.0.0/16","18.156.0.0/16","18.157.0.0/16","18.158.0.0/16",
                      "18.159.0.0/16","18.160.0.0/16","18.161.0.0/16","18.162.0.0/16","18.163.0.0/16","18.164.0.0/16","18.165.0.0/16",
                      "18.166.0.0/16","18.167.0.0/16","18.168.0.0/16","18.169.0.0/16","18.170.0.0/16","18.171.0.0/16","18.172.0.0/16",
                      "18.173.0.0/16","18.174.0.0/16","18.175.0.0/16","18.176.0.0/16","18.177.0.0/16","18.178.0.0/16","18.179.0.0/16",
                      "18.180.0.0/16","18.181.0.0/16","18.182.0.0/16","18.184.0.0/16","18.185.0.0/16","18.186.0.0/16","18.187.0.0/16",
                      "18.188.0.0/16","18.189.0.0/16","18.190.0.0/16","18.191.0.0/16","18.192.0.0/16","18.193.0.0/16","18.194.0.0/16",
                      "18.195.0.0/16","18.196.0.0/16","18.197.0.0/16","18.198.0.0/16","18.199.0.0/16","18.200.0.0/16","18.201.0.0/16",
                      "18.202.0.0/16","18.203.0.0/16","18.204.0.0/16","18.205.0.0/16","18.206.0.0/16","18.206.0.0/16","18.207.0.0/16",
                      "18.208.0.0/16","18.229.0.0/16","18.232.0.0/16", "18.233.0.0/16","18.234.0.0/16","18.235.0.0/16",
                      "23.20.0.0/16","23.21.0.0/16","23.22.0.0/16","50.18.0.0/16","50.112.0.0/16","54.65.0.0/16","52.84.0.0/16",
                      "52.85.0.0/16","52.86.0.0/16","52.87.0.0/16","52.88.0.0/16","52.89.0.0/16","52.90.0.0/16","52.91.0.0/16",
                      "52.92.0.0/16","52.93.0.0/16","52.94.0.0/16","52.95.0.0/16","52.200.0.0/16",
                      "63.32.0.0/16","63.34.0.0/16",
                      "18.211.0.0/16","18.212.0.0/16","18.213.0.0/16","18.214.0.0/16",
                      "34.192.0.0/16","34.193.0.0/16","34.194.0.0/16","34.195.0.0/16","34.196.0.0/16","34.197.0.0/16",
                      "34.198.0.0/16","34.199.0.0/16","34.200.0.0/16","34.201.0.0/16","34.202.0.0/16","34.203.0.0/16",
                      "34.204.0.0/16","34.205.0.0/16","34.206.0.0/16","34.207.0.0/16","34.208.0.0/16","34.209.0.0/16",
                      "34.210.0.0/16","34.211.0.0/16","34.212.0.0/16","34.213.0.0/16","34.214.0.0/16","34.215.0.0/16",
                      "34.216.0.0/16","34.217.0.0/16","34.225.0.0/16","34.226.0.0/16","34.227.0.0/16","34.228.0.0/16",
                      "34.229.0.0/16","34.230.0.0/16","34.231.0.0/16","34.232.0.0/16","34.233.0.0/16","34.234.0.0/16",
                      "34.235.0.0/16","34.236.0.0/16","34.237.0.0/16","34.238.0.0/16","34.239.0.0/16","34.240.0.0/16",
                      "34.241.0.0/16","34.242.0.0/16","34.243.0.0/16","34.244.0.0/16","34.245.0.0/16","34.246.0.0/16",
                      "34.247.0.0/16","34.248.0.0/16","34.249.0.0/16","34.250.0.0/16","34.251.0.0/16","34.252.0.0/16",
                      "34.253.0.0/16","34.254.0.0/16","34.255.0.0/16",
                      "35.71.0.0/16","35.72.0.0/16","35.73.0.0/16","35.74.0.0/16","35.75.0.0/16","35.76.0.0/16","35.77.0.0/16",
                      "35.78.0.0/16","35.79.0.0/16","35.80.0.0/16","35.81.0.0/16","35.82.0.0/16",
                      "35.152.0.0/16","35.153.0.0/16","35.154.0.0/16",
                      "35.155.0.0/16","35.156.0.0/16","35.157.0.0/16","35.158.0.0/16","35.159.0.0/16","35.160.0.0/16",
                      "35.161.0.0/16","35.162.0.0/16","35.163.0.0/16","35.164.0.0/16","35.165.0.0/16","35.166.0.0/16",
                      "35.167.0.0/16","35.168.0.0/16","35.169.0.0/16","35.170.0.0/16","35.171.0.0/16","35.172.0.0/16",
                      "35.173.0.0/16","35.174.0.0/16","35.175.0.0/16","35.176.0.0/16","35.177.0.0/16","35.178.0.0/16",
                      "35.179.0.0/16","35.180.0.0/16","35.181.0.0/16","35.182.0.0/16","35.183.0.0/16","44.192.0.0/16",
                      "44.193.0.0/16", "44.194.0.0/16","44.195.0.0/16","44.196.0.0/16","44.197.0.0/16","44.198.0.0/16",
                      "44.199.0.0/16",
                      "44.200.0.0/16","44.201.0.0/16","44.202.0.0/16","44.203.0.0/16","44.204.0.0/16","44.205.0.0/16",
                      "44.206.0.0/16","44.207.0.0/16","44.208.0.0/16","44.209.0.0/16","44.210.0.0/16","44.211.0.0/16",
                      "44.212.0.0/16","44.213.0.0/16","44.214.0.0/16","44.215.0.0/16","44.216.0.0/16","44.217.0.0/16",
                      "44.218.0.0/16","44.219.0.0/16","44.220.0.0/16","44.221.0.0/16","44.222.0.0/16","44.223.0.0/16",
                      "44.224.0.0/16","44.225.0.0/16","44.226.0.0/16","44.236.0.0/16","44.237.0.0/16","44.238.0.0/16",
                      "44.239.0.0/16",
                      "52.1.0.0/16","52.2.0.0/16","52.3.0.0/16","52.4.0.0/16","52.5.0.0/16","52.6.0.0/16",
                      "52.10.0.0/16","52.16.0.0/16","52.17.0.0/16","52.18.0.0/16","52.19.0.0/16",
                      "52.20.0.0/16","52.21.0.0/16","52.22.0.0/16","52.23.0.0/16","52.24.0.0/16","52.25.0.0/16",
                      "52.26.0.0/16","52.27.0.0/16","52.28.0.0/16","52.29.0.0/16","52.30.0.0/16","52.31.0.0/16",
                      "52.32.0.0/16","52.33.0.0/16","52.34.0.0/16","52.35.0.0/16","52.36.0.0/16","52.37.0.0/16",
                      "52.38.0.0/16","52.39.0.0/16","52.40.0.0/16","52.41.0.0/16","52.42.0.0/16","52.43.0.0/16",
                      "52.44.0.0/16","52.45.0.0/16","52.46.0.0/16","52.47.0.0/16","52.48.0.0/16","52.49.0.0/16",
                      "52.50.0.0/16","52.51.0.0/16","52.52.0.0/16","52.53.0.0/16","52.54.0.0/16","52.55.0.0/16",
                      "52.56.0.0/16","52.57.0.0/16","52.58.0.0/16","52.59.0.0/16","52.60.0.0/16","52.70.0.0/16",
                      "52.72.0.0/16","52.73.0.0/16","52.74.0.0/16","52.119.0.0/16",
                      "52.192.0.0/16","52.193.0.0/16","52.194.0.0/16","52.195.0.0/16","52.196.0.0/16","52.197.0.0/16",
                      "52.198.0.0/16","52.199.0.0/16","52.200.0.0/16","52.201.0.0/16","52.202.0.0/16",
                      "52.203.0.0/16","52.204.0.0/16","52.205.0.0/16","52.206.0.0/16","52.207.0.0/16","52.208.0.0/16",
                      "52.209.0.0/16","52.210.0.0/16","52.211.0.0/16","52.212.0.0/16", "52.213.0.0/16","52.214.0.0/16",
                      "52.215.0.0/16","52.216.0.0/16","52.217.0.0/16","52.218.0.0/16","52.219.0.0/16","52.220.0.0/16",
                      "52.221.0.0/16","52.222.0.0/16",
                      "54.64.0.0/16","54.65.0.0/16","54.69.0.0/16","54.70.0.0/16","54.71.0.0/16","54.72.0.0/16","54.73.0.0/16",
                      "54.74.0.0/16","54.75.0.0/16","54.76.0.0/16","54.77.0.0/16","54.78.0.0/16","54.79.0.0/16","54.80.0.0/16",
                      "54.81.0.0/16","54.82.0.0/16","54.83.0.0/16","54.84.0.0/16","54.85.0.0/16","54.86.0.0/16",
                      "54.91.0.0/16","54.95.0.0/16",
                      "54.145.0.0/16","54.165.0.0/16","54.195.0.0/16","54.220.0.0/16",
                      "54.65.0.0/16","54.151.0.0/16","54.152.0.0/16","54.153.0.0/16","54.154.0.0/16",
                      "54.155.0.0/16","54.156.0.0/16","54.157.0.0/16","54.158.0.0/16","54.159.0.0/16","54.160.0.0/16",
                      "54.161.0.0/16","54.162.0.0/16","54.163.0.0/16","54.164.0.0/16","54.165.0.0/16","54.166.0.0/16",
                      "54.167.0.0/16","54.168.0.0/16","54.169.0.0/16","54.170.0.0/16","54.171.0.0/16","54.172.0.0/16",
                      "54.173.0.0/16","54.174.0.0/16","54.175.0.0/16","54.176.0.0/16","54.177.0.0/16",
                      "54.191.0.0/16","54.192.0.0/16","54.193.0.0/16","54.194.0.0/16","54.195.0.0/16","54.196.0.0/16",
                      "54.200.0.0/16","54.201.0.0/16","54.202.0.0/16","54.203.0.0/16","54.204.0.0/16","54.205.0.0/16",
                      "54.206.0.0/16","54.207.0.0/16","54.208.0.0/16","54.209.0.0/16",
                      "54.210.0.0/16","54.211.0.0/16","54.212.0.0/16","54.213.0.0/16","54.214.0.0/16","54.215.0.0/16",
                      "54.216.0.0/16","54.217.0.0/16","54.218.0.0/16","54.219.0.0/16","54.220.0.0/16","54.221.0.0/16",
                      "54.222.0.0/16", "54.223.0.0/16", "54.224.0.0/16", "54.225.0.0/16",
                      "54.226.0.0/16","54.227.0.0/16","54.228.0.0/16","54.229.0.0/16","54.235.0.0/16","54.237.0.0/16","54.238.0.0/16",
                      "54.239.0.0/16","54.240.0.0/16","54.241.0.0/16","54.242.0.0/16","54.243.0.0/16","54.244.0.0/16",
                      "54.245.0.0/16","54.246.0.0/16","54.252.0.0/16",
                      "63.35.0.0/16",
                      "72.21.195.0/24","72.44.45.0/24","52.48.0.0/16","52.222.0.0/16","54.91.0.0/16","52.3.0.0/16",
                      "79.125.21.0/24","79.125.22.0/24","79.125.23.0/24",
                      "205.251.0.0/16",
                      "209.54.177.0/24","209.54.178.0/24","209.54.179.0/24","209.54.180.0/24","209.54.181.0/24","209.54.182.0/24",
                      "209.54.183.0/24","209.54.184.0/24","209.54.185.0/24","209.54.186.0/24","209.54.187.0/24","209.54.188.0/24",
                      "209.54.189.0/24","209.54.190.0/24",
                      "184.73.0.0/16","107.22.0.0/16",
                      "99.79.0.0/16","99.80.0.0/16", "99.81.0.0/16", "99.82.0.0/16", "99.83.0.0/16", "99.84.0.0/16", "99.86.0.0/16",
                      "100.20.0.0/14","100.24.0.0/16","100.25.0.0/16",
                      "103.4.9.0/24","103.124.134.0/24","103.124.135.0/24","103.127.75.0/24","103.136.10.0/24","103.143.45.0/24",
                      "103.145.182.0/24","103.145.192.0/24","103.147.71.0/24","103.149.112.0/24","103.150.161.0/24","103.151.192.0/24",
                      "103.151.193.0/24","103.152.248.0/24","103.153.47.0/24","103.16.101.0/24","103.16.59.0/24","103.161.77.0/24",
                      "103.165.160.0/24","103.124.134.0/24","103.124.135.0/24","103.127.75.0/24","103.136.10.0/24",
                      "103.138.231.0/24","103.143.45.0/24","103.145.192.0/24","103.147.71.0/24","103.149.112.0/24",
                      "103.150.161.0/24","103.150.47.0/24","103.151.192.0/24","103.151.193.0/24","103.151.24.0/24","103.152.248.0/24",
                      "103.153.47.0/24", "103.16.101.0/24",
                      "108.128.0.0/16", "108.129.0.0/16","108.138.0.0/16",
                      "143.204.0.0/16",
                      "176.32.98.0/24", "176.32.101.0/24", "176.34.0.0/16"

                      ]

        defs_digitalocean=["103.253.144.0/22","104.72.73.0/24","104.131.0.0/18","104.131.128.0/20","104.131.144.0/20",
                           "104.131.160.0/20",
                           "104.131.176.0/20","104.131.192.0/19","104.131.224.0/19","104.131.64.0/18","104.236.0.0/18",
                           "104.236.128.0/18","104.236.192.0/18","104.236.64.0/18","104.248.0.0/20","104.248.100.0/22",
                           "104.248.104.0/22","104.248.108.0/22","104.248.112.0/20","104.248.128.0/20","104.248.144.0/20",
                           "138.68.0.0/16","138.197.0.0/16","139.59.0.0/16","68.183.0.0/16","107.170.0.0/16","142.93.0.0/16",
                           "146.185.167.0/24","159.89.0.0/16" ,"159.65.0.0/16","159.203.0.0/16","167.172.0.0/16","188.226.144.0/24",
                           "198.199.67.0/24","198.199.74.0/24","198.211.116.0/24","206.189.0.0/16","104.248.0.0/16","174.138.29.0/24",
                           "162.243.0.0/16","165.227.0.0/16","167.99.0.0/16","45.55.0.0/16","46.101.0.0/16","104.131.0.0/16",
                           "104.236.0.0/16","178.128.0.0/16",
                           "192.241.128.0/24","192.241.129.0/24","192.241.130.0/24","192.241.131.0/24","192.241.132.0/24",
                           "192.241.133.0/24","192.241.134.0/24","192.241.135.0/24","192.241.136.0/24","192.241.137.0/24",
                           "192.241.138.0/24","192.241.139.0/24","192.241.140.0/24","192.241.141.0/24","192.241.142.0/24",
                           "192.241.143.0/24","192.241.144.0/24","192.241.145.0/24","192.241.146.0/24","192.241.147.0/24",
                           "192.241.148.0/24","192.241.149.0/24","192.241.150.0/24","192.241.151.0/24","192.241.152.0/24",
                           "192.241.153.0/24","192.241.154.0/24","192.241.155.0/24","192.241.156.0/24","192.241.157.0/24",
                           "192.241.158.0/24","192.241.159.0/24","192.241.160.0/24","192.241.161.0/24","192.241.162.0/24",
                           "192.241.163.0/24","192.241.164.0/24","192.241.165.0/24","192.241.166.0/24","192.241.167.0/24",
                           "192.241.168.0/24","192.241.169.0/24","192.241.170.0/24","192.241.171.0/24","192.241.172.0/24",
                           "192.241.173.0/24","192.241.174.0/24","192.241.175.0/24","192.241.176.0/24","192.241.177.0/24",
                           "192.241.178.0/24","192.241.179.0/24","192.241.180.0/24","192.241.181.0/24","192.241.182.0/24",
                           "192.241.183.0/24","192.241.184.0/24","192.241.185.0/24","192.241.186.0/24","192.241.187.0/24",
                           "192.241.188.0/24","192.241.189.0/24","192.241.190.0/24","192.241.191.0/24","192.241.192.0/24",
                           "192.241.193.0/24","192.241.194.0/24","192.241.195.0/24","192.241.196.0/24","192.241.197.0/24",
                           "192.241.198.0/24","192.241.199.0/24","192.241.200.0/24","192.241.201.0/24","192.241.202.0/24",
                           "192.241.203.0/24","192.241.204.0/24","192.241.205.0/24","192.241.206.0/24","192.241.207.0/24",
                           "192.241.208.0/24","192.241.209.0/24","192.241.210.0/24","192.241.211.0/24","192.241.212.0/24",
                           "192.241.213.0/24","192.241.214.0/24","192.241.215.0/24","192.241.216.0/24","192.241.217.0/24",
                           "192.241.218.0/24","192.241.219.0/24","192.241.220.0/24","192.241.221.0/24","192.241.222.0/24",
                           "192.241.223.0/24","192.241.224.0/24","192.241.225.0/24","192.241.226.0/24","192.241.227.0/24",
                           "192.241.228.0/24","192.241.229.0/24","192.241.230.0/24","192.241.231.0/24","192.241.232.0/24","192.241.233.0/24","192.241.234.0/24","192.241.235.0/24","192.241.236.0/24","192.241.237.0/24","192.241.238.0/24","192.241.239.0/24","192.241.240.0/24","192.241.241.0/24","192.241.242.0/24","192.241.243.0/24","192.241.244.0/24","192.241.245.0/24","192.241.246.0/24","192.241.247.0/24","192.241.248.0/24","192.241.249.0/24","192.241.250.0/24","192.241.251.0/24","192.241.252.0/24","192.241.253.0/24","192.241.254.0/24","192.241.255.0/24",
                           "174.138.29.0/24"
                           ]

        defs_smartadservers=["199.187.192.0/22"]

        defs_adjust =["185.151.204.0/24","185.151.205.0/24","185.151.206.0/24","185.151.207.0/24","185.230.39.0/24","185.255.24.0/22"]

        defs_adify_corporation=["74.117.196.0/24","74.117.197.0/24","74.117.198.0/24","74.117.199.0/24"]

        defs_indexExchange=["185.80.36.0/24","185.80.37.0/24","185.80.38.0/24","185.80.39.0/24"]

        defs_kaspersky=[ "81.19.104.0/24","195.122.177.128/25","62.67.238.128/25","77.74.176.0/24",
                         "77.74.177.0/24","77.74.178.0/24","77.74.179.0/24","77.74.180.0/24",
                         "77.74.181.0/24","77.74.182.0/24","77.74.183.0/24","82.202.184.0/24",
                         "82.202.185.0/24","82.202.186.0/24","82.202.187.0/24","82.202.188.0/24",
                         "82.202.189.0/24","82.202.190.0/24","82.202.191.0/24","93.159.230.0/24"
                         ]

        defs_internet_archive=["207.241.224.0/20","208.70.24.0/21"]

        defs_conviva=["199.127.193.0/24","199.127.192.0/24","199.127.193.0/24","199.127.194.0/24","199.127.195.0/24","8.15.246.0/24","8.5.250.0/24"]

        defs_avast=["77.234.43.0/24"]
        defs_eulerian=["109.232.192.0/21"]

        defs_trendmicro=["150.70.183.0/24"]

        defs_automattic=["192.0.77.0/24","192.0.73.0/24"]
        defs_inmotion=["192.249.118.0/24","104.152.108.0/22","104.244.120.0/21","104.244.120.0/23","104.244.122.0/24","104.244.123.0/24","104.244.124.0/22","104.247.72.0/23","104.247.74.0/23","144.208.64.0/22","144.208.68.0/22","173.231.192.0/20","173.231.224.0/20","173.231.232.0/21","173.231.232.0/22","173.231.236.0/22","173.247.240.0/22","173.247.244.0/23","173.247.246.0/23","173.247.248.0/21","192.145.232.0/21"]

        defs_limelight_networks=["95.140.239.0/24","111.119.0.0/22","111.119.11.0/24","111.119.16.0/23","111.119.20.0/23","111.119.22.0/23","111.119.24.0/21","111.119.4.0/22","117.121.248.0/21","117.121.248.0/22","117.121.248.0/23","117.121.250.0/23","117.121.254.0/23","172.105.130.0/23","172.105.132.0/23","172.105.140.0/23","172.105.142.0/23","178.249.104.0/21","178.249.105.0/24","178.79.192.0/18","178.79.196.0/23"]

        defs_sdv_plurimedia=["212.95.74.0/24","213.225.160.0/19","212.95.64.0/19","88.151.14.0/24"]

        defs_linkdein=["185.63.144.0/24","185.63.145.0/24","185.63.146.0/24","185.63.147.0/24"]
        defs_appnexus=["185.33.221.0/24","103.43.88.0/24","103.43.89.0/24","103.43.90.0/23","104.254.148.0/22","172.83.92.0/24","185.33.220.0/22","185.83.140.0/22","185.89.208.0/22","192.190.7.0/24","204.13.192.0/21","204.13.193.0/24","207.237.150.0/24","216.252.164.0/23","216.252.166.0/24","37.252.160.0/21","37.252.168.0/21","43.250.0.0/22","64.208.136.0/22","64.208.140.0/24","64.208.141.0/24"]

        defs_telegram_messgenger=["149.154.160.0/24","149.154.161.0/24","149.154.162.0/24","149.154.163.0/24","149.154.164.0/24","149.154.165.0/24","149.154.166.0/24","149.154.167.0/24","149.154.168.0/24","149.154.169.0/24","149.154.170.0/24","149.154.171.0/24","149.154.172.0/24","149.154.173.0/24","149.154.174.0/24","149.154.175.0/24","149.154.160.0/22","149.154.164.0/22","91.108.4.0/22","91.108.56.0/22","91.108.8.0/22","95.161.64.0/20"]

        defs_remote_control=["64.68.120.0/24","162.253.7.0/24","162.253.2.0/24","185.188.32.0/24","185.188.33.0/24","185.188.34.0/24","185.188.35.0/24","185.188.36.0/24"]

        defs_monaco_telecom=["80.94.98.0/24","91.199.109.0/24","91.198.207.0/24","88.209.64.0/18","87.254.224.0/19","82.113.0.0/19","185.162.120.0/22","185.250.4.0/22","193.105.1.0/24","195.20.192.0/23","80.94.96.0/20"]

        defs_controld=['76.76.2.0/24']
        defs_convia_inc=["199.127.192.0/24","199.127.193.0/24","199.127.194.0/24","199.127.195.0/24","8.15.246.0/24","8.5.250.0/24"]

        defs_internap_holding=['63.251.0.0/16','107.150.146.0/23','107.6.104.0/22','107.6.64.0/21','107.6.72.0/21',
                               '107.6.80.0/21','107.6.88.0/21','107.6.88.0/22','107.6.92.0/23','107.6.92.0/24',
                               '107.6.93.0/24','107.6.96.0/21','107.6.96.0/24','162.217.100.0/22',
                               '162.217.96.0/22','162.217.96.0/24','162.217.98.0/24','162.217.99.0/24',
                               '173.231.128.0/18','173.231.176.0/22','173.231.180.0/23','72.251.241.0/24']

        #151
        defs_salesforce=["136.146.0.0/16","96.43.144.0/24","96.43.145.0/24","96.43.146.0/24","96.43.147.0/24","96.43.148.0/24","96.43.149.0/24","96.43.150.0/24","96.43.151.0/24","96.43.152.0/24","96.43.153.0/24","96.43.154.0/24","96.43.155.0/24","96.43.156.0/24","96.43.157.0/24","96.43.158.0/24","96.43.159.0/24","85.222.128.0/24","85.222.129.0/24","85.222.130.0/24","85.222.131.0/24","85.222.132.0/24","85.222.133.0/24","85.222.134.0/24","85.222.135.0/24","85.222.136.0/24","85.222.137.0/24","85.222.138.0/24","85.222.139.0/24","85.222.140.0/24","85.222.141.0/24","85.222.142.0/24","85.222.143.0/24","85.222.144.0/24","85.222.145.0/24","85.222.146.0/24","85.222.147.0/24","85.222.148.0/24","85.222.149.0/24","85.222.150.0/24","85.222.151.0/24","85.222.152.0/24","85.222.153.0/24","85.222.154.0/24","85.222.155.0/24","85.222.156.0/24","85.222.157.0/24","85.222.158.0/24","85.222.159.0/24"]

        defs_adobe=["66.235.149.0/24","63.140.33.0/24","63.140.34.0/24","63.140.41.0/24","63.140.60.0/24","63.140.61.0/24","172.82.225.0/24","172.82.229.0/24","172.82.228.0/24","172.82.230.0/24","172.82.231.0/24","172.82.232.0/24","172.82.233.0/24","172.82.233.0/24","172.82.234.0/24","172.82.235.0/24","172.82.236.0/24","172.82.237.0/24","172.82.238.0/24","172.82.239.0/24","172.82.240.0/24","172.82.241.0/24","172.82.242.0/24","172.82.243.0/24","172.82.244.0/24","172.82.245.0/24","172.82.246.0/24","172.82.247.0/24","172.82.248.0/24","172.82.249.0/24","172.82.250.0/24","192.147.130.0/24","192.243.246.0/24"]

        def_unversity=["45.90.132.0/22","129.69.0.0/24","129.69.0.0/16","129.143.0.0/24","129.143.0.0/16","129.143.87.80/28","129.206.0.0/24","129.206.0.0/16","132.230.0.0/24","132.230.0.0/16","134.2.0.0/24","134.2.0.0/16","134.34.0.0/24","134.34.0.0/16","134.60.0.0/24","134.60.0.0/16","134.103.0.0/24","134.103.0.0/16","134.108.0.0/24","134.108.0.0/16","134.155.0.0/24","134.155.0.0/16","141.7.0.0/24","141.7.0.0/16","141.10.0.0/24","141.10.0.0/16","141.18.0.0/24","141.18.0.0/16","141.18.0.0/15","141.19.0.0/24","141.19.0.0/16","141.28.0.0/24","141.28.0.0/16","141.31.0.0/24","141.31.0.0/16","141.37.0.0/24","141.37.0.0/16","141.47.0.0/24","141.47.0.0/16","141.58.0.0/24","141.58.0.0/16","141.58.0.0/15","141.59.0.0/24","141.59.0.0/16","141.62.0.0/24","141.62.0.0/17","141.62.0.0/16","141.68.0.0/24","141.68.0.0/16","141.68.0.0/15","141.69.0.0/24","141.69.0.0/16","141.70.0.0/24","141.70.0.0/16","141.70.128.0/17","141.72.0.0/24","141.72.0.0/17","141.72.0.0/16","141.72.128.0/18","141.79.0.0/24","141.79.0.0/16","141.87.0.0/24","141.87.0.0/16","144.41.0.0/24","144.41.0.0/16","147.142.0.0/24","147.142.0.0/16","153.96.83.0/24","161.42.0.0/24","161.42.0.0/16","185.134.84.0/22","192.42.143.0/24","192.52.0.0/19","192.52.32.0/20","192.52.48.0/23","192.52.50.0/24","192.67.189.0/24","192.67.208.0/24","192.108.35.0/24","192.108.36.0/22","192.108.40.0/22","192.108.44.0/24","192.109.76.0/24","193.196.0.0/21","193.196.0.0/15","193.196.9.0/24","193.196.13.0/24","193.196.16.0/20","193.196.64.0/18","193.196.129.0/24","193.196.132.0/22","193.196.136.0/21","193.196.144.0/21","193.196.152.0/24","193.196.154.0/23","193.196.156.0/22","193.196.160.0/22","193.196.165.0/24","193.196.166.0/23","193.196.168.0/21","193.196.176.0/20","193.196.192.0/18","193.197.0.0/24","193.197.4.0/23","193.197.8.0/22","193.197.20.0/23","193.197.28.0/22","193.197.32.0/19","193.197.64.0/22","193.197.68.0/23","193.197.70.0/24","193.197.80.0/22","193.197.85.0/24","193.197.86.0/23","193.197.94.0/24","193.197.120.0/21","193.197.130.0/24","193.197.132.0/22","193.197.136.0/21","193.197.149.0/24","193.197.152.0/22","193.197.157.0/24","193.197.160.0/23","193.197.168.0/21","193.197.180.0/22","193.197.200.0/21","193.197.212.0/24","193.197.224.0/19","132.203.0.0/16","132.219.137.0/24"]

        def_vodaphone=["195.27.0.0/16","195.59.0.0/16","196.55.215.0/24","176.95.132.0/24","5.28.194.0/24","5.28.195.0/24",
                       "5.28.255.0/24"]

        def_bytedance=["130.44.212.0/24","130.44.212.0/24","130.44.213.0/24","130.44.214.0/24","130.44.215.0/24","139.177.224.0/24",
                       "139.177.225.0/24","139.177.226.0/24","139.177.227.0/24","139.177.228.0/24","139.177.229.0/24","139.177.230.0/24",
                       "139.177.232.0/24","139.177.233.0/24","139.177.235.0/24","139.177.236.0/24","139.177.237.0/24","139.177.238.0/24",
                       "139.177.239.0/24","139.177.240.0/24","139.177.241.0/24"
        ]

        def_pubmatic=["185.64.190.0/24","103.231.98.0/24","103.231.99.0/24","104.36.112.0/23","104.36.114.0/24","104.36.115.0/24",
                      "162.248.16.0/23","162.248.18.0/24","162.248.19.0/24","185.64.188.0/24","185.64.189.0/24","185.64.190.0/23",
                      "192.82.242.0/24","198.47.127.0/24","204.237.133.0/24","67.199.150.0/24","8.28.7.0/24","8.46.112.0/24"
                      ]

        def_apple=["17.0.0.0/8"]

        def_ionos=['104.192.4.0/22','104.219.40.0/22','104.254.244.0/22','108.175.0.0/20','162.255.84.0/22',
                   '185.132.36.0/22','185.132.40.0/22','192.195.77.0/24','195.20.224.0/19','198.251.64.0/20',
                   '198.71.48.0/20','212.227.0.0/16','212.227.148.0/23','212.227.168.0/23','212.227.226.0/23',
                   '212.227.228.0/23','217.160.86.0/24']

        def_fly_io=["213.188.196.0/24"]

        def_mach_dilemma=["103.196.38.0/24","103.196.36.0/24","103.196.37.0/24","103.196.38.0/24","103.196.39.0/24","198.72.6.0/24","45.127.114.0/24","45.127.115.0/24"]

        def_facebook=["31.13.65.0/24","31.13.83.0/24","179.60.192.0/24","157.240.0.0/16","102.132.100.0/24",
                      "102.132.101.0/24","102.132.96.0/20",
                      "102.132.96.0/24","102.132.99.0/24","103.4.96.0/22","129.134.0.0/17","129.134.25.0/24",
                      "129.134.26.0/24","129.134.27.0/24","129.134.28.0/24","129.134.29.0/24","129.134.30.0/23","129.134.30.0/24","129.134.31.0/24","129.134.64.0/24","129.134.65.0/24","129.134.66.0/24","129.134.67.0/24","129.134.68.0/24"]

        def_fastly=["185.199.108.0/24","185.199.109.0/24","185.199.110.0/24","185.199.111.0/24","199.232.0.0/16","151.101.0.0/16"]

        def_bouygues_telecom=["213.44.0.0/16"]
        def_rubicon_project=["69.173.144.0/24","192.203.231.0/24","195.122.175.0/24","208.185.50.0/24","213.19.162.0/24","69.173.144.0/24","69.173.145.0/24","69.173.148.0/22","69.173.154.0/23","69.173.158.0/24","8.43.72.0/22"]

        def_roblox=["128.116.121.0/24","103.140.28.0/23","128.116.0.0/17","128.116.0.0/24","128.116.1.0/24",
                    "128.116.100.0/24","128.116.101.0/24","128.116.102.0/24","128.116.105.0/24","128.116.11.0/24",
                    "128.116.112.0/24","128.116.113.0/24","128.116.114.0/24","128.116.115.0/24","128.116.116.0/24",
                    "128.116.117.0/24","128.116.118.0/24","128.116.119.0/24","128.116.120.0/24","128.116.121.0/24",
                    "128.116.122.0/24"]

        def_highwinds_network_group =["151.139.128.0/24","151.139.130.0/24","151.139.254.0/24","151.139.255.0/24",
                                       "205.185.208.0/24","205.185.216.0/24","209.197.2.0/24","209.197.3.0/24",
                                       "64.145.64.0/24","69.16.174.0/24","69.16.175.0/24"
                                       ]

        def_m247 =["102.128.164.0/24","102.128.165.0/24","102.129.156.0/24","102.165.22.0/24",
                   "102.38.232.0/24","103.105.164.0/24","103.110.105.0/24","103.111.32.0/24","103.115.185.0/24",
                   "103.129.116.0/24","103.129.117.0/24","103.129.118.0/24","103.129.119.0/24",
                   "103.130.178.0/24","103.131.235.0/24","193.19.108.0/24","194.242.2.0/24"]

        def_canalplus=["185.86.252.0/23","185.86.253.0/24","185.86.254.0/24","185.86.255.0/24"]

        def_network_of_data_centers=["81.163.16.0/24"]

        def_akamai=["2.16.0.0/16","2.17.0.0/16","2.18.85.0/24","2.18.107.0/24","2.18.134.0/24",
                    "2.18.133.0/24","2.18.131.0/24","2.18.132.0/24","2.18.231.0/24","2.18.247.0/24",
                    "2.19.88.0/24","2.19.227.0/24","2.20.0.0/16","2.21.0.0/16","2.22.0.0/16", "2.23.92.0/24",
                    "23.1.0.0/16","23.33.0.0/16","23.37.0.0/16","23.38.0.0/16","23.39.0.0/16","23.40.0.0/16",
                    "23.41.0.0/16","23.42.0.0/16","23.43.0.0/16","23.44.0.0/16","23.45.0.0/16","23.46.0.0/16",
                    "23.47.0.0/16","23.48.0.0/16","23.48.0.0/16","23.49.0.0/16","23.50.0.0/16","23.51.0.0/16",
                    "23.52.0.0/16","23.53.0.0/16","23.54.0.0/16","23.55.0.0/16","23.56.0.0/16","23.57.0.0/16",
                    "23.58.0.0/16","23.59.0.0/16","23.60.0.0/16","23.61.91.0/24","23.72.0.0/16","23.77.0.0/16",
                    "23.200.0.0/16", "23.205.0.0/16","23.207.0.0/16","23.212.0.0/16","23.220.0.0/16","23.221.0.0/16",
                    "23.222.0.0/16","23.223.0.0/16", "23.224.0.0/16",
                    "104.87.0.0/16","104.67.0.0/16","23.17.0.0/16","88.221.0.0/16",
                    "103.225.242.0/24","103.238.150.0/23","103.51.152.0/24","103.95.84.0/22",
                    "104.80.0.0/16","104.100.112.0/20","104.100.128.0/19","104.100.16.0/20","104.100.160.0/22",
                    "104.100.172.0/22",
                    "104.100.176.0/20","104.100.192.0/19",
                    "104.100.224.0/19","104.100.32.0/20","104.100.48.0/20","104.100.64.0/20","104.100.80.0/22",
                    "104.100.84.0/23","104.100.86.0/23","104.100.88.0/22","104.100.96.0/20","104.101.0.0/20",
                    "104.82.0.0/16","104.100.170.0/24","104.100.93.0/24","104.101.104.0/22",
                    "104.101.108.0/22","104.101.192.0/22","104.101.196.0/22","104.101.204.0/22","104.108.55.0/24",
                    "104.101.208.0/24","104.101.210.0/24","104.101.211.0/24","104.101.212.0/22","104.101.216.0/22",
                    "104.101.224.0/22","104.101.228.0/24","104.101.229.0/24","104.101.232.0/22","104.101.98.0/23",
                    "104.102.24.0/24","104.102.241.0/24","104.103.0.0/16","104.106.88.0/23","104.107.166.0/23",
                    "104.110.180.0/22",
                    "104.74.25.0/24","104.74.64.0/24","104.77.210.0/23","104.80.26.0/23","104.82.188.0/23","104.86.0.0/16",
                    "104.90.206.0/23","104.91.56.0/23","104.93.90.0/23","104.108.0.0/16",
                    "184.25.0.0/16","184.50.30.0/23","184.51.140.0/24","184.51.254.0/23","184.51.255.0/24","184.85.251.0/24",
                    "193.108.152.0/22", "193.108.152.0/24","193.108.88.0/21","195.245.124.0/23","195.245.126.0/23",
                    "84.53.148.0/24","84.53.168.0/24",
                    "92.122.0.0/16","92.123.0.0/16","95.100.0.0/16","95.101.0.0/16","96.6.0.0/16","96.16.0.0/16",
                    "69.192.0.0/16",
                    "104.108.0.0/16",
                    "104.120.0.0/16","104.123.0.0/16","104.126.0.0/16","184.31.0.0/16", "172.227.0.0/16",
                    "72.246.0.0/16", "84.53.170.0/24","84.53.169.0/24",
                    "173.222.0.0/16","184.26.148.0/24"]

        def_yahoo=["87.248.100.0/24","217.12.13.0/24","188.125.66.0/24","188.125.64.0/21","188.125.66.0/23","188.125.68.0/23","188.125.72.0/22","188.125.72.0/24","188.125.73.0/24","188.125.76.0/22","188.125.80.0/21","188.125.80.0/24","188.125.82.0/24","212.82.100.0/22","212.82.100.0/24","212.82.101.0/24","212.82.104.0/21","212.82.106.0/24","212.82.108.0/24","212.82.109.0/24","212.82.96.0/22","217.12.12.0/22","217.12.15.0/24","77.238.180.0/24","77.238.181.0/24","77.238.182.0/24","188.125.64.0/21","188.125.66.0/23","188.125.68.0/23","188.125.72.0/22","188.125.72.0/24","188.125.73.0/24","188.125.76.0/22","188.125.80.0/21","188.125.80.0/24","188.125.82.0/24","212.82.100.0/22","212.82.100.0/24","212.82.101.0/24","212.82.104.0/21","212.82.106.0/24","212.82.108.0/24","212.82.109.0/24","212.82.96.0/22","217.12.12.0/22","217.12.15.0/24","87.248.112.0/24","87.248.114.0/24","87.248.115.0/24","87.248.113.0/24","87.248.116.0/24","87.248.117.0/24"]

        def_liquid_web=["159.135.0.0/19","159.135.32.0/20","207.246.240.0/21","50.28.96.0/19","50.56.148.0/22","98.129.229.0/24","67.227.186.0/24","159.135.48.0/20","162.212.134.0/24","162.252.104.0/22","162.255.68.0/23","172.255.59.0/24","173.199.128.0/18","174.34.225.0/24","184.106.55.0/24","192.126.88.0/22","192.138.16.0/21","192.190.220.0/22","192.251.32.0/24","199.189.224.0/22","199.195.118.0/24","205.174.24.0/22","207.246.248.0/21","208.75.148.0/22","208.79.232.0/21","208.86.152.0/21","209.124.89.0/24"]

        def_twitter=["199.59.149.0/24","69.195.177.0/24","104.244.40.0/24","104.244.41.0/24","104.244.42.0/24"]

        def_quantserve=["95.172.94.0/24"]

        def_netflix=["23.246.2.0/24","23.246.3.0/24","23.246.4.0/24","23.246.5.0/24","23.246.6.0/24","23.246.7.0/24","23.246.8.0/24","23.246.9.0/24","23.246.10.0/24","23.246.11.0/24","23.246.12.0/24","23.246.13.0/24","23.246.14.0/24","23.246.15.0/24","23.246.16.0/24","23.246.17.0/24","23.246.18.0/24","23.246.19.0/24","23.246.20.0/24","23.246.21.0/24","23.246.22.0/24","23.246.23.0/24","23.246.24.0/24","23.246.25.0/24","23.246.26.0/24","23.246.27.0/24","23.246.28.0/24","23.246.29.0/24","23.246.30.0/24","23.246.31.0/24","23.246.32.0/24","23.246.33.0/24","23.246.34.0/24","23.246.35.0/24","23.246.36.0/24","23.246.37.0/24","23.246.38.0/24","23.246.39.0/24","23.246.40.0/24","23.246.41.0/24","23.246.42.0/24","23.246.43.0/24","23.246.44.0/24","23.246.45.0/24","23.246.46.0/24","23.246.47.0/24","23.246.48.0/24","23.246.49.0/24","23.246.50.0/24","23.246.51.0/24","23.246.52.0/24","23.246.53.0/24","23.246.54.0/24","23.246.55.0/24","23.246.56.0/24","23.246.57.0/24","23.246.58.0/24","23.246.59.0/24","23.246.60.0/24","23.246.61.0/24","23.246.62.0/24","23.246.63.0/24",
                     "45.57.90.0/24","45.57.40.0/24","45.57.41.0/24","45.57.40.0/23","45.57.40.0/24","45.57.41.0/24","45.57.76.0/23","45.57.76.0/24","45.57.8.0/23","45.57.8.0/24","45.57.86.0/23","45.57.86.0/24","45.57.87.0/24","45.57.9.0/24","45.57.90.0/23","45.57.90.0/24","45.57.91.0/24"]

        def_llhost=['46.148.125.0/24','185.36.143.0/24','45.155.120.0/24','45.155.121.0/24','45.85.117.0/24','46.148.123.0/24','46.148.124.0/24','46.148.125.0/24','46.148.126.0/24','46.148.127.0/24','5.101.44.0/24','5.181.202.0/24','5.181.203.0/24','5.188.179.0/24','5.188.201.0/24','5.188.202.0/24','5.189.216.0/24','5.189.253.0/24','5.189.255.0/24','91.243.40.0/24']

        def_marktplaats=["5.255.156.0/24","91.211.72.0/24","91.195.49.0/24","195.78.85.0/24"]

        def_videoplazza=["185.28.136.0/24","185.28.137.0/24","185.28.138.0/24","185.28.139.0/24"]

        def_banking=["91.135.176.0/24","91.135.177.0/24","91.135.178.0/24","91.135.179.0/24","91.135.180.0/24","91.135.181.0/24","91.135.182.0/24","91.135.183.0/24","91.135.184.0/24","91.135.185.0/24","91.135.186.0/24","91.135.187.0/24","91.135.188.0/24","91.135.189.0/24","91.135.190.0/24",
                     "91.135.190.0/24","91.135.191.0/24","173.0.84.0/24","185.60.56.0/22","195.93.244.0/24","195.93.245.0/24","211.249.49.0/24","103.6.174.0/24","103.6.175.0/24","80.70.210.0/24","80.70.211.0/24","80.70.212.0/24","80.70.213.0/24","80.70.214.0/24","80.70.215.0/24","80.70.216.0/24","169.36.0.0/16",
                     "169.37.0.0/16","31.210.0.0/24","185.148.122.0/24","145.226.0.0/18","145.226.128.0/18","145.226.192.0/18","145.226.64.0/18","193.56.246.0/24","193.57.116.0/22","193.57.122.0/23","193.57.124.0/23","193.57.225.0/24"]

        def_cloudflare=["103.21.244.0/24","103.22.200.0/23","103.22.203.0/24","103.81.228.0/24","104.16.0.0/12","104.16.0.0/20",
                        "104.16.112.0/20","104.16.128.0/20","104.16.144.0/20","104.16.16.0/20","104.16.160.0/20","104.16.176.0/20",
                        "104.16.192.0/20","104.16.208.0/20","104.16.224.0/20","104.16.240.0/20","104.16.32.0/20","104.16.48.0/20",
                        "104.17.0.0/16","104.18.0.0/16","104.27.0.0/16","104.31.0.0/16","104.23.0.0/16","104.24.0.0/16","188.114.96.0/24",
                        "162.159.0.0/16","162.247.243.0/24","172.65.0.0/16","172.67.0.0/16","198.41.215.0/24","1.0.0.0/24",
                        '188.114.97.0/24'
                        ]

        def_verizon=["68.232.35.0/24","72.21.81.0/24","194.98.0.0/16","152.199.0.0/16","192.229.133.0/24","192.229.220.0/24","192.229.221.0/24","192.229.222.0/24","192.229.223.0/24","192.229.233.0/24","192.229.182.0/24","193.155.127.0/24",
                     "152.195.0.0/16"]

        def_leaseweb=["37.48.82.0/24","37.48.99.0/24","46.17.0.0/24","46.17.3.0/24","62.212.64.0/24",
                      "81.171.0.0/24","81.171.1.0/24","81.171.2.0/24","81.171.3.0/24","81.171.4.0/24",
                      "81.171.5.0/24","81.171.21.0/24","5.79.91.0/24","85.17.0.0/16","95.211.0.0/16",
                      "94.75.236.0/24","178.162.219.0/24","178.162.220.0/24","178.162.221.0/24",
                      "178.162.222.0/24","178.162.223.0/24","185.44.23.0/24",'84.16.253.0/24'
                      ]

        defs_hostach=["185.213.26.0/24","103.167.150.0/24","103.173.178.0/24","103.73.64.0/23","103.73.66.0/24","103.73.67.0/24","134.195.88.0/23","134.195.90.0/24","134.195.91.0/24","153.92.126.0/24","153.92.127.0/24","176.126.70.0/24","176.126.84.0/24","176.126.85.0/24","176.126.86.0/24","185.175.56.0/24","185.175.57.0/24","185.175.58.0/24","185.175.59.0/24","185.197.30.0/24"]
        defs_netcup_gmbh=["185.233.107.0/24","152.89.104.0/22","185.158.212.0/22","185.16.60.0/22","185.162.248.0/22","185.163.116.0/22","185.170.112.0/22","185.183.156.0/22","185.194.140.0/22","185.207.104.0/22","185.211.220.0/23","185.211.222.0/23","185.211.223.0/24","185.216.176.0/22","185.228.136.0/22","185.232.68.0/22","185.233.104.0/22","185.243.8.0/22","185.244.192.0/22","185.48.228.0/22"]
        def_ab_stract=["95.215.19.0/24","185.193.126.0/23","195.14.20.0/24","197.231.220.0/22","198.167.192.0/19","45.142.140.0/22","45.158.116.0/22","80.78.16.0/20","95.215.16.0/22"]
        def_nessus_gmbh=["146.255.56.0/24","146.255.56.0/21","185.176.152.0/24","185.176.153.0/24","185.176.154.0/24","185.176.155.0/24","185.188.75.0/24","185.190.49.0/24","185.190.50.0/24","185.205.80.0/24","185.205.81.0/24","185.205.82.0/24","185.205.83.0/24","185.245.228.0/24","185.245.229.0/24","185.245.230.0/24","185.245.231.0/24"]
        freie_netze_muenchen=["5.1.66.0/24","141.98.138.0/24","185.150.99.0/24","46.226.127.0/24"]
        def_smile_gie=["185.194.92.0/22"]

        def_Incapsula=["45.60.13.0/24","103.173.34.0/24","103.173.35.0/24","103.225.240.0/24","103.225.241.0/24","103.28.248.0/24",
                       "103.28.249.0/24","103.28.250.0/24","103.28.251.0/24","103.77.142.0/24","107.154.1.0/24","107.154.10.0/24",
                       "107.154.100.0/24","107.154.101.0/24","107.154.102.0/24","107.154.103.0/24","107.154.104.0/24","107.154.105.0/24",
                       "107.154.106.0/24","107.154.107.0/24","107.154.108.0/24"
        ]

        def_netactuate=["45.54.49.0/24","185.40.232.0/24","104.225.32.0/24","104.225.34.0/24","104.225.35.0/24","104.225.36.0/24",
                        "104.225.37.0/24","104.225.38.0/24","104.225.39.0/24","104.225.40.0/24","104.225.41.0/24","104.225.42.0/24",
                        "104.225.43.0/24","104.225.45.0/24","104.225.46.0/24","104.225.47.0/24","148.163.192.0/24","148.163.193.0/24",
                        "148.163.194.0/24","148.163.195.0/24","148.163.196.0/24","148.163.197.0/24","104.225.98.0/24"]

        def_hetzner_online=["5.9.0.0/16","46.4.0.0/16","136.243.0.0/16","138.201.0.0/16","176.9.0.0/16",
                            "178.63.0.0/16","85.10.192.0/18","88.99.0.0/16","88.198.0.0/16","91.107.128.0/17",
                            "94.130.0.0/16","95.216.0.0/16","95.217.0.0/16","116.202.0.0/16","116.203.0.0/16",
                            "128.140.0.0/17","136.243.0.0/24","136.243.0.0/16","138.201.0.0/24","138.201.0.0/16",
                            "144.76.0.0/16","144.76.0.0/16","148.251.0.0/24","148.251.0.0/16","159.69.0.0/24",
                            "159.69.0.0/16","162.55.0.0/16","167.233.0.0/24","167.233.0.0/16","176.9.0.0/24",
                            "176.9.0.0/16","178.63.0.0/24","178.63.0.0/16","185.12.64.0/22","185.36.144.0/22",
                            "185.50.120.0/23","195.201.0.0/16","78.46.0.0/16","78.47.0.0/16",
                            "88.99.0.0/16","88.198.0.0/16","94.130.0.0/16","213.239.192.0/24"]

        def_yandex=["77.88.0.0/24","77.88.1.0/24","77.88.2.0/24","77.88.3.0/24","77.88.4.0/24","77.88.5.0/24",
                    "77.88.6.0/24","77.88.7.0/24","77.88.8.0/24","77.88.9.0/24","77.88.10.0/24","77.88.11.0/24",
                    "77.88.12.0/24","77.88.13.0/24","77.88.14.0/24","77.88.15.0/24","77.88.16.0/24","77.88.17.0/24",
                    "77.88.18.0/24","77.88.19.0/24","77.88.20.0/24","77.88.21.0/24","77.88.22.0/24","77.88.23.0/24",
                    "77.88.24.0/24","77.88.25.0/24","77.88.26.0/24","77.88.27.0/24","77.88.28.0/24","77.88.29.0/24",
                    "77.88.30.0/24","77.88.31.0/24","77.88.32.0/24","77.88.33.0/24","77.88.34.0/24","77.88.35.0/24",
                    "77.88.36.0/24","77.88.37.0/24","77.88.38.0/24","77.88.39.0/24","77.88.40.0/24","77.88.41.0/24",
                    "77.88.42.0/24","77.88.43.0/24","77.88.44.0/24","77.88.45.0/24","77.88.46.0/24","77.88.47.0/24",
                    "77.88.48.0/24","77.88.49.0/24","77.88.50.0/24","77.88.51.0/24","77.88.52.0/24","77.88.53.0/24",
                    "77.88.54.0/24","77.88.55.0/24","77.88.56.0/24","77.88.57.0/24","77.88.58.0/24","77.88.59.0/24",
                    "77.88.60.0/24","77.88.61.0/24","77.88.62.0/24",
                    "178.154.131.0/24","93.158.134.0/24","213.180.193.0/24","100.43.64.0/19","141.8.128.0/18","178.154.128.0/19","178.154.131.0/24",
                    "178.154.160.0/19","185.32.187.0/24","199.21.96.0/22","199.36.240.0/22","213.180.192.0/19",
                    "213.180.199.0/24","37.140.128.0/18","37.9.112.0/24","37.9.64.0/18","37.9.64.0/24","37.9.95.0/24",
                    "45.87.132.0/22","5.255.192.0/18","5.255.197.0/24","5.255.255.0/24","5.45.192.0/18"
                    ]
        def_citic_telecom=["62.128.100.0/24"]
        def_cogent_communication=["130.117.0.0/16","102.129.145.0/24"]
        def_nvidia=["185.136.68.0/24"]
        def_vmware=["208.91.0.0/24"]
        #Nutanix and Soprado gmbh too:
        def_nutannix=["192.146.155.0/24","103.51.164.0/24","103.51.165.0/24","103.51.166.0/24","103.51.167.0/24","91.236.122.0/24"]
        def_xtom=["185.222.222.0/24"]
        def_constant_company=["45.63.110.0/24","207.148.120.0/24",
                              "104.156.236.0/23","104.156.234.0/23","104.156.232.0/23","104.156.228.0/22","103.113.40.0/22",
                              "144.202.69.0/24","144.202.69.0/24","45.76.0.0/16","136.244.65.0/24","136.244.97.0/24",
                              "104.156.240.0/21","104.156.228.0/22"]


        def_nextdns=["45.90.28.0/24","9.9.9.0/24","149.112.112.0/24","149.112.149.0/24","199.249.255.0/24"]
        def_node4=["109.203.101.0/24","109.203.102.0/24","109.203.107.0/24","109.203.118.0/24","109.203.120.0/24","109.203.123.0/24","109.203.124.0/23","109.203.96.0/24","109.234.192.0/21","109.234.200.0/21","109.75.172.0/24","148.253.128.0/19","148.253.139.0/24"]
        def_nitronet_sp=["79.98.145.0/24"]
        def_cloud_nextgen=["185.253.154.0/24"]
        def_datacamp=["138.199.36.0/24"]
        def_kaspersky=['185.85.12.0/24','185.85.14.0/24','185.85.15.0/24','77.74.176.0/24','77.74.177.0/24','77.74.178.0/23','77.74.180.0/24','77.74.181.0/24','77.74.183.0/24','82.202.184.0/24','82.202.185.0/24','93.159.226.0/24','93.159.228.0/23','93.159.230.0/23']
        def_eset=['185.94.156.0/24','185.94.157.0/24','185.94.158.0/24','185.94.159.0/24',
                  '38.90.226.0/24','38.90.227.0/24','91.228.164.0/24','91.228.165.0/24','91.228.166.0/24','91.228.167.0/24']


        def_dell=["143.166.28.0/24",'132.237.128.0/23','132.237.130.0/23','132.237.16.0/22','132.237.16.0/23','132.237.170.0/24','132.237.171.0/24','132.237.18.0/23','132.237.180.0/24','132.237.181.0/24','132.237.184.0/24','143.166.0.0/16','143.166.200.0/21','143.166.208.0/21','148.9.20.0/23','163.244.0.0/16','163.244.185.0/24','163.244.60.0/24','168.159.218.0/24','168.159.224.0/24']
        def_quantil_network=["101.79.165.0/24","101.79.166.0/24","101.79.167.0/24","103.75.147.0/24",
                             "110.164.35.0/24","118.107.170.0/24","118.107.171.0/24","118.107.172.0/24","118.107.173.0/24",
                             "119.31.251.0/24","163.171.158.0/24","163.171.129.0/24"]
        def_blizzard=["24.105.29.024","117.52.6.0/24","121.254.137.0/24","121.254.206.0/23","121.254.218.0/24","137.221.100.0/22","137.221.104.0/22","137.221.108.0/24","137.221.109.0/24","137.221.110.0/24","137.221.64.0/19","137.221.64.0/24","137.221.68.0/24","103.198.32.0/24","103.198.33.0/24","110.45.208.0/24","117.52.26.0/23"]
        def_linode_lcc=["172.104.0.0/16","172.105.0.0/16",
                        "45.79.0.0/16","104.237.152.0/24","104.237.153.0/24","104.237.154.0/24","104.237.155.0/24",
                        "104.237.156.0/24","104.237.157.0/24","104.237.158.0/24","104.237.159.0/24","104.200.24.0/24",
                        "104.200.25.0/24","104.200.26.0/24","104.200.27.0/24",
                        "45.33.0.0/24","45.33.1.0/24",
                        "45.56.116.0/24","45.79.0.0/16",
                        "139.162.0.0/16",
                        "69.164.192.0/24","96.126.109.0/24","178.79.180.0/24",
                        "192.46.236.0/24","192.155.88.0/24","192.53.175.0/24","212.71.236.0/24","213.52.128.0/24","45.33.2.0/24",
                        "45.33.3.0/24","45.33.4.0/24","45.33.5.0/24","45.33.6.0/24","45.33.7.0/24","45.33.8.0/24","45.33.9.0/24",
                        "45.33.10.0/24","45.33.11.0/24","45.33.12.0/24","45.33.13.0/24","45.33.14.0/24","45.33.15.0/24","45.33.16.0/24",
                        "45.33.17.0/24","45.33.18.0/24","45.33.19.0/24","45.33.20.0/24","45.33.21.0/24","45.33.22.0/24","45.33.23.0/24",
                        "45.33.24.0/24","45.33.25.0/24","45.33.26.0/24","45.33.27.0/24","45.33.28.0/24","45.33.29.0/24","45.33.30.0/24",
                        "45.33.31.0/24","45.33.32.0/24","45.33.33.0/24","45.33.34.0/24","45.33.35.0/24","45.33.36.0/24","45.33.37.0/24",
                        "45.33.38.0/24","45.33.39.0/24","45.33.40.0/24","45.33.41.0/24","45.33.42.0/24","45.33.43.0/24","45.33.44.0/24",
                        "45.33.45.0/24","45.33.46.0/24","45.33.47.0/24","45.33.48.0/24","45.33.49.0/24","45.33.50.0/24","45.33.51.0/24",
                        "45.33.52.0/24","45.33.53.0/24","45.33.54.0/24","45.33.55.0/24","45.33.56.0/24","45.33.57.0/24","45.33.58.0/24",
                        "45.33.59.0/24","45.33.60.0/24","45.33.61.0/24","45.33.62.0/24","45.33.63.0/24","45.33.64.0/24","45.33.65.0/24",
                        "45.33.66.0/24","45.33.67.0/24","45.33.68.0/24","45.33.69.0/24","45.33.70.0/24","45.33.71.0/24","45.33.72.0/24",
                        "45.33.73.0/24","45.33.74.0/24","45.33.75.0/24","45.33.76.0/24","45.33.77.0/24","45.33.78.0/24","45.33.79.0/24",
                        "45.33.80.0/24","45.33.81.0/24","45.33.82.0/24","45.33.83.0/24","45.33.84.0/24","45.33.85.0/24","45.33.86.0/24",
                        "45.33.87.0/24","45.33.88.0/24","45.33.89.0/24","45.33.90.0/24","45.33.91.0/24","45.33.92.0/24","45.33.93.0/24",
                        "45.33.94.0/24","45.33.95.0/24","45.33.96.0/24","45.33.97.0/24","45.33.98.0/24","45.33.99.0/24","45.33.100.0/24",
                        "45.33.101.0/24","45.33.102.0/24","45.33.103.0/24","45.33.104.0/24","45.33.105.0/24","45.33.106.0/24",
                        "45.33.107.0/24","45.33.108.0/24","45.33.109.0/24","45.33.110.0/24","45.33.111.0/24","45.33.112.0/24",
                        "45.33.113.0/24","45.33.114.0/24","45.33.115.0/24","45.33.116.0/24","45.33.117.0/24","45.33.118.0/24",
                        "45.33.119.0/24","45.33.120.0/24","45.33.121.0/24","45.33.122.0/24","45.33.123.0/24","45.33.124.0/24",
                        "45.33.125.0/24","45.33.126.0/24","45.33.127.0/24",
                        "66.228.61.0/24"]

        def_daniel_cid=["185.228.168.0/24","185.228.169.0/24","185.228.170.0/24"]
        def_hurricane_electric=['103.100.138.0/24','103.150.253.0/24','103.176.58.0/24','103.176.59.0/24','103.253.24.0/24','103.253.25.0/24',
                                '103.253.26.0/24','103.253.27.0/24','103.6.216.0/22','103.96.214.0/24',
                                '184.105.148.0/24','104.194.4.0/24','104.255.240.0/21',
                                '104.36.120.0/22','134.195.36.0/24','134.195.37.0/24','134.195.38.0/24']

        def_exion_network=['31.3.128.0/23','31.3.129.0/24','31.3.130.0/23','31.3.131.0/24','31.3.132.0/23','31.3.134.0/23',
                           '31.3.134.0/24','31.3.135.0/24'
                           ]

        def_cachenetworks=['205.234.175.0/24','103.211.254.0/24','204.93.142.0/24','204.93.143.0/24','204.93.146.0/24','204.93.150.0/24',
                        '204.93.230.0/24','204.93.231.0/24','205.234.175.0/24','205.234.216.0/24','216.246.100.0/24','216.246.104.0/24',
                        '216.246.118.0/24','216.246.119.0/24'
                           ]

        def_alibaba=["47.253.0.0/16"]
        def_new_relic=["162.240.241.0/24","162.247.241.0/24","162.247.242.0/24"]
        def_mci_communication=["68.232.34.0/24"]
        def_wanagain=["62.244.106.0/24","62.244.103.0/24"]
        def_haproxy_technologies=["209.126.36.0/24"]
        def_alphalink_sasu=["217.147.199.0/24"]
        def_aptum_technologies=["66.155.71.0/24"]
        def_shenzhen_tencent=["129.226.0.0/16"]
        def_communityrack_org=["185.104.19.0/24","185.95.216.0/23","185.95.218.0/24","91.199.218.0/24"]
        def_webnx=["100.42.208.0/20","100.42.220.0/22","104.224.14.0/24","104.237.48.0/20","104.237.48.0/23","104.237.55.0/24","107.182.160.0/20","107.182.160.0/24","107.182.162.0/23","108.171.192.0/19","108.171.198.0/23","108.171.202.0/24","108.171.206.0/24","108.171.210.0/23","108.171.210.0/24","108.171.213.0/24","108.171.214.0/23","108.171.216.0/23","114.31.209.0/24","136.144.33.0/24"]
        def_index_education=["185.173.124.0/22","195.191.172.0/23","195.191.172.0/24","212.114.0.0/20","212.114.0.0/21","212.114.7.0/24","212.114.8.0/21","46.33.160.0/19","46.33.160.0/24","46.33.161.0/24","46.33.162.0/24","46.33.163.0/24","46.33.164.0/24","46.33.165.0/24","46.33.166.0/24","46.33.167.0/24","46.33.168.0/24","46.33.169.0/24","46.33.170.0/24","46.33.171.0/24"]

        def_outscale_sasu=["148.253.97.0/24","148.253.64.0/18","148.253.96.0/24","148.253.97.0/24","171.33.64.0/18","185.21.192.0/22","185.21.194.0/25","185.21.194.128/25","185.23.188.0/24","217.75.160.0/20",
"46.231.144.0/21","5.104.96.0/21","80.247.0.0/20"]
        def_serveroid=["185.22.60.0/22","176.112.192.0/19","176.103.133.0/24","176.103.132.0/24","176.103.128.0/19","176.103.130.0/24"]
        def_andrews_arnold=["217.169.20.0/24","178.238.144.0/20","188.191.132.0/22","194.4.172.0/22","194.60.203.0/24","194.70.3.0/24"]

        def_cz_nic_zspo=["185.43.135.0/24"]
        def_mpvs_ltd=["45.153.187.0/24"]
        def_taiwan_network_information=["101.102.103.0/24","101.102.101.0/24"]
        def_switch=["138.131.0.0/16","134.21.0.0/16","131.152.0.0/16","130.92.0.0/16","130.82.0.0/16","130.59.0.0/16","128.178.0.0/15","129.129.0.0/16","129.194.0.0/15","130.125.0.0/16","130.223.0.0/16"]
        def_infrastructure_Group_bv=["5.2.75.0/24","103.251.164.0/22","150.129.8.0/22","185.255.114.0/24","185.31.172.0/22","185.31.173.107/32","185.31.173.229/32","185.31.173.23/32","185.31.173.230/32","185.31.173.231/32","185.31.173.233/32","185.31.173.236/32","185.31.173.25/32","185.31.173.253/32","185.31.173.27/32","185.31.173.70/32","185.31.173.93/32","192.76.150.0/24","192.76.153.0/24","192.76.160.0/24","192.76.163.0/24"]

        def_planethoster=["146.19.134.0/24","146.88.232.0/21","185.22.108.0/22","185.22.111.0/24","185.221.180.0/22","199.16.128.0/24","199.16.129.0/24","199.16.130.0/24","199.16.131.0/24","199.188.220.0/24","199.188.221.0/24","199.188.222.0/24","199.188.223.0/24","199.59.244.0/24","199.59.245.0/24","199.59.246.0/24","199.59.247.0/24","209.16.158.0/24","85.236.152.0/21","85.236.159.0/24"]
        def_amobee_emeea=["46.228.164.0/24","192.208.200.0/22","46.228.160.0/20"]
        def_mediamath=["103.229.204.0/24","103.229.205.0/24","103.229.206.0/24","103.229.207.0/24","185.29.132.0/24","185.29.133.0/24","185.29.134.0/23","216.200.232.0/24","216.200.233.0/24","64.125.96.0/24","74.121.136.0/24","74.121.137.0/24","74.121.139.0/24","74.121.140.0/24","74.121.141.0/24","74.121.142.0/24","74.121.143.0/24"]
        def_tata_communications=["80.231.0.0/16","195.219.0.0/16","80.231.0.0/16","103.16.252.0/22","103.21.80.0/24","104.105.224.0/20","104.105.240.0/20","104.106.0.0/22","115.108.48.0/20","115.112.168.0/23","116.0.64.0/19","116.0.70.0/24","116.0.76.0/24","116.0.82.0/24","116.0.93.0/24","120.29.219.0/24","121.244.82.0/24","138.104.226.0/24","138.104.227.0/24","138.104.233.0/24","138.104.236.0/24","157.189.0.0/16","116.0.82.0/24","116.0.93.0/24"]

        def_hosthatch=["45.91.92.0/24",'103.167.150.0/24','103.167.151.0/24','103.173.178.0/24','103.73.64.0/23','103.73.66.0/24',
        '103.73.67.0/24','134.195.88.0/23','134.195.90.0/24','134.195.91.0/24','153.92.126.0/24','153.92.127.0/24','176.126.70.0/24',
        '176.126.84.0/24','176.126.85.0/24','176.126.86.0/24','185.175.56.0/24','185.175.57.0/24','185.175.58.0/24','185.175.59.0/24',
        '185.197.30.0/24'
        ]

        def_github=['140.82.112.0/20','140.82.112.0/24','140.82.113.0/24','140.82.114.0/24','140.82.115.0/24','140.82.116.0/24',
'140.82.117.0/24','140.82.120.0/23','140.82.120.0/24','140.82.121.0/24','140.82.122.0/24','140.82.123.0/24','140.82.124.0/24',
'140.82.125.0/24','140.82.126.0/24','143.55.64.0/20','143.55.64.0/24','143.55.65.0/24','192.30.252.0/22','192.30.252.0/23'
]

        def_freewheel=["154.54.250.0/24"]
        def_online_sas=["51.158.0.0/16","51.15.0.0/16",'51.159.0.0/16']
        def_criteo_sa=["178.250.2.0/24","178.250.3.0/24","178.250.2.0/24","178.250.4.0/24","178.250.5.0/24","178.250.6.0/24","178.250.7.0/24","178.250.8.0/24"]
        def_canonical_group=["91.189.92.0/24"]
        def_iweb_technologies=["64.15.159.0/24","107.161.64.0/20","108.163.128.0/18","174.141.228.0/22","174.141.232.0/23","174.142.0.0/16","184.107.0.0/16","192.175.96.0/19","192.196.223.0/24","198.50.96.0/19","198.72.96.0/19","203.167.7.0/24","204.19.134.0/24"]
        def_level3_communication=["195.122.177.0/24","62.67.0.0/16","8.250.157.0/24", "8.253.93.0/24",
                                  "8.241.0.0/16","8.242.0.0/16","8.243.0.0/16","8.244.0.0/16","8.245.0.0/16","8.246.0.0/16",
                                  "8.247.0.0/16","8.248.0.0/16","8.249.0.0/16","8.250.0.0/16","8.251.0.0/16","8.252.0.0/16",
                                  "8.253.93.0/24","8.254.93.0/24","8.255.93.0/24",
                                  "212.162.49.0/24", "212.73.221.0/24",
                                  "176.116.117.0/24","195.122.177.0/24","195.122.169.0/24"]

        def_telia_company=[ "89.233.43.0/24","193.45.0.0/16","62.115.0.0/16","80.239.197.0/24","80.239.169.0/24","80.239.170.0/24","80.239.174.0/24","213.155.156.0/24"]

        def_orange=["197.29.0.0/16","217.108.0.0/16","193.251.0.0/16","193.252.0.0/16","194.2.0.0/16","194.250.0.0/16","195.25.0.0/16","94.124.132.0/24","94.124.134.0/24","80.10.186.0/24","145.242.11.0/24","185.63.192.0/24","212.234.0.0/16","217.109.0.0/16","62.161.0.0/16","81.252.0.0/16","81.255.44.0/24", "81.52.0.0/16",
                    "90.82.0.0/16","90.83.0.0/16","90.84.0.0/16","90.85.0.0/16","90.86.0.0/16","90.87.0.0/16","90.88.0.0/16","90.89.0.0/16","90.90.0.0/16","90.91.0.0/16","90.92.0.0/16","90.93.0.0/16","90.94.0.0/16","90.95.0.0/16","90.96.0.0/16","90.97.0.0/16","90.98.0.0/16","90.99.0.0/16","90.100.0.0/16","90.101.0.0/16","90.102.0.0/16","90.103.0.0/16","90.104.0.0/16","90.105.0.0/16","90.106.0.0/16","90.107.0.0/16","90.108.0.0/16","90.109.0.0/16","90.110.0.0/16","90.111.0.0/16","90.112.0.0/16","90.113.0.0/16","90.114.0.0/16","90.115.0.0/16","90.116.0.0/16","90.117.0.0/16","90.118.0.0/16","90.119.0.0/16","90.120.0.0/16","90.121.0.0/16","90.122.0.0/16",
                    "102.219.164.0/22", "160.156.0.0/14", "160.156.0.0/15", "160.156.0.0/16", "160.156.0.0/17","160.156.128.0/17", "160.157.0.0/16", "160.157.0.0/17", "160.157.128.0/17", "160.158.0.0/15","160.158.0.0/16", "160.158.0.0/17", "160.158.128.0/17", "160.159.0.0/16", "160.159.0.0/17","160.159.128.0/17", "165.50.0.0/15", "165.50.0.0/16", "165.50.0.0/17", "165.50.0.0/18"
                ]

        def_thomas_steen_rasmussen=["91.239.100.0/24"]
        def_ntt=["81.19.104.0/24"]
        def_box_com=["185.235.236.0/24","103.116.4.0/24","107.152.16.0/20","107.152.18.0/24","107.152.24.0/23","107.152.24.0/24","107.152.25.0/24","107.152.26.0/23","107.152.26.0/24","107.152.27.0/24","107.152.29.0/24","185.235.236.0/22","185.235.236.0/24","209.249.140.0/24","67.218.117.0/24","74.112.187.0/24"]

        def_renater=["195.83.0.0/16",'193.54.136.0/24','194.199.12.0/24','194.199.74.0/24','194.199.95.0/24','194.199.97.0/24','194.199.98.0/24','194.254.97.0/24','194.57.170.0/24','195.83.190.0/24','195.83.214.0/24','195.83.254.0/24','195.83.255.0/24']

        def_etf1=["193.169.66.0/24","185.22.116.0/22","193.169.66.0/23"]
        def_g_core_labs=['103.22.194.0/24','103.22.195.0/24','146.185.220.0/23','146.185.220.0/24','146.185.248.0/24','150.107.125.0/24',
        '150.107.126.0/24','162.213.60.0/24','162.213.61.0/24','162.213.62.0/24','162.213.63.0/24','162.216.228.0/22','162.216.228.0/24',
        '162.216.229.0/24','162.216.230.0/24','162.216.231.0/24','92.38.169.0/24'
        ]
        def_total_uptime=["208.95.112.0/24","104.153.196.0/24","104.153.197.0/24","104.153.198.0/24","104.153.199.0/24",
                          "162.252.212.0/24","162.252.213.0/24","162.252.214.0/24","162.252.214.70/32","162.252.215.0/24",
                          "172.98.36.0/24","172.98.37.0/24","172.98.38.0/24","172.98.39.0/24","199.38.148.0/24","199.38.148.160/28",
                          "199.38.148.32/27","199.38.148.64/27","199.38.148.96/27","206.166.193.0/24","208.95.112.0/24"
                          ]

        def_taobao = ['146.19.236.0/24','156.240.64.0/24','163.181.0.0/24','163.181.1.0/24','163.181.10.0/24','163.181.11.0/24',
                      '163.181.12.0/24','163.181.15.0/24','163.181.16.0/24','163.181.17.0/24','163.181.18.0/24','163.181.19.0/24',
                      '163.181.2.0/24','163.181.20.0/24','163.181.22.0/24','163.181.23.0/24','163.181.57.0/24'
                ]

        def_alibaba_advertising=['116.251.120.0/22','116.251.120.0/23','116.251.122.0/23','116.251.64.0/18','116.251.96.0/22',
                                 '116.251.96.0/23','116.251.98.0/23'
            ]

        def_china_unicom=["36.248.43.0/24","1.188.0.0/14","1.24.0.0/13","1.56.0.0/13","101.125.0.0/23","101.125.2.0/23","101.125.250.0/23",
                          "101.125.4.0/23","101.125.6.0/24","101.16.0.0/12","101.198.196.0/22","101.199.196.0/22","101.199.48.0/20",
                          "101.204.0.0/14","101.251.144.0/20","101.251.144.0/21","101.251.160.0/21","101.64.0.0/13","101.72.0.0/14",
                          "103.107.188.0/22","103.110.156.0/22"
            ]

        if self.categorize_ip_checks(ipaddr, defs_google): return 17
        if self.out: print("categorize_ip(%s) Google -> NONE L.705" % ipaddr)
        if self.categorize_ip_checks(ipaddr, defs_amazon): return 19
        if self.categorize_ip_checks(ipaddr, def_facebook): return 1
        if self.categorize_ip_checks(ipaddr, defs_internal): return 82
        if self.categorize_ip_checks(ipaddr, defs_ovh): return 229
        if self.categorize_ip_checks(ipaddr, defs_microsoft): return 2
        if self.categorize_ip_checks(ipaddr, def_apple): return 18
        if self.categorize_ip_checks(ipaddr, def_akamai): return 20
        if self.categorize_ip_checks(ipaddr, def_freewheel): return 156
        if self.categorize_ip_checks(ipaddr, def_yandex): return 129
        if self.categorize_ip_checks(ipaddr, defs_smartadservers): return 5
        if self.categorize_ip_checks(ipaddr, defs_adjust): return 5
        if self.categorize_ip_checks(ipaddr, defs_adify_corporation): return 5
        if self.categorize_ip_checks(ipaddr, defs_indexExchange): return 5
        if self.categorize_ip_checks(ipaddr, def_marktplaats): return 5
        if self.categorize_ip_checks(ipaddr, def_videoplazza): return 5
        if self.categorize_ip_checks(ipaddr, def_amobee_emeea): return 5
        if self.categorize_ip_checks(ipaddr, def_mediamath): return 5
        if self.categorize_ip_checks(ipaddr, defs_appnexus): return 5
        if self.categorize_ip_checks(ipaddr, def_rubicon_project): return 5
        if self.categorize_ip_checks(ipaddr, defs_eulerian): return 5
        if self.categorize_ip_checks(ipaddr, def_alibaba_advertising): return 5
        if self.categorize_ip_checks(ipaddr, def_pubmatic): return 5

        if self.categorize_ip_checks(ipaddr, defs_internet_archive): return 31


        if self.categorize_ip_checks(ipaddr, def_banking): return 50
        if self.categorize_ip_checks(ipaddr, def_roblox): return 58
        if self.categorize_ip_checks(ipaddr, def_blizzard): return 58
        
        if self.categorize_ip_checks(ipaddr, defs_digitalocean): return 230
        if self.categorize_ip_checks(ipaddr, def_orange): return 231
        if self.categorize_ip_checks(ipaddr, def_linode_lcc): return 233
        if self.categorize_ip_checks(ipaddr, def_cloudflare): return 234
        if self.categorize_ip_checks(ipaddr,defs_controld): return 237
        if self.categorize_ip_checks(ipaddr, def_yahoo): return 21

        if self.categorize_ip_checks(ipaddr, defs_kaspersky): return 36
        if self.categorize_ip_checks(ipaddr, defs_avast): return 36
        if self.categorize_ip_checks(ipaddr, defs_trendmicro): return 36
        if self.categorize_ip_checks(ipaddr, def_daniel_cid): return 36

        if self.categorize_ip_checks(ipaddr, def_box_com): return 49


        if self.categorize_ip_checks(ipaddr, defs_linkdein): return 134
        if self.categorize_ip_checks(ipaddr, defs_telegram_messgenger): return 153
        if self.categorize_ip_checks(ipaddr, def_etf1): return 156
        if self.categorize_ip_checks(ipaddr, def_canalplus): return 156



        if self.categorize_ip_checks(ipaddr, defs_remote_control): return 123

        if self.categorize_ip_checks(ipaddr, def_taobao): return 8

        if self.categorize_ip_checks(ipaddr, def_Incapsula):    return 83
        if self.categorize_ip_checks(ipaddr, def_china_unicom): return 83
        if self.categorize_ip_checks(ipaddr, def_total_uptime): return 83
        if self.categorize_ip_checks(ipaddr, def_cachenetworks):return 83
        if self.categorize_ip_checks(ipaddr, def_exion_network):return 83
        if self.categorize_ip_checks(ipaddr, def_g_core_labs):return 83
        if self.categorize_ip_checks(ipaddr, def_hurricane_electric):return 83
        if self.categorize_ip_checks(ipaddr, def_netactuate): return 83
        if self.categorize_ip_checks(ipaddr, freie_netze_muenchen): return 83
        if self.categorize_ip_checks(ipaddr, def_nessus_gmbh): return 83
        if self.categorize_ip_checks(ipaddr, def_ab_stract): return 83
        if self.categorize_ip_checks(ipaddr, defs_netcup_gmbh): return 83
        if self.categorize_ip_checks(ipaddr, defs_hostach): return 83
        if self.categorize_ip_checks(ipaddr, defs_inmotion): return 83
        if self.categorize_ip_checks(ipaddr, def_node4): return 83
        if self.categorize_ip_checks(ipaddr, defs_limelight_networks): return 83
        if self.categorize_ip_checks(ipaddr, def_vodaphone): return 83
        if self.categorize_ip_checks(ipaddr, def_webnx): return 83
        if self.categorize_ip_checks(ipaddr, def_fastly): return 83
        if self.categorize_ip_checks(ipaddr, def_liquid_web): return 83
        if self.categorize_ip_checks(ipaddr, def_bouygues_telecom): return 83
        if self.categorize_ip_checks(ipaddr, def_verizon): return 83
        if self.categorize_ip_checks(ipaddr, def_citic_telecom): return 83
        if self.categorize_ip_checks(ipaddr, def_online_sas): return 83
        if self.categorize_ip_checks(ipaddr, def_cogent_communication): return 83
        if self.categorize_ip_checks(ipaddr, def_xtom): return 83
        if self.categorize_ip_checks(ipaddr, def_constant_company): return 83
        if self.categorize_ip_checks(ipaddr, def_nitronet_sp): return 83
        if self.categorize_ip_checks(ipaddr, def_cloud_nextgen): return 83
        if self.categorize_ip_checks(ipaddr, def_quantil_network): return 83
        if self.categorize_ip_checks(ipaddr, def_mach_dilemma): return 83
        if self.categorize_ip_checks(ipaddr, def_mci_communication): return 83
        if self.categorize_ip_checks(ipaddr, def_level3_communication): return 83
        if self.categorize_ip_checks(ipaddr, def_iweb_technologies): return 83
        if self.categorize_ip_checks(ipaddr, def_telia_company): return 83
        if self.categorize_ip_checks(ipaddr, def_tata_communications): return 83
        if self.categorize_ip_checks(ipaddr, def_infrastructure_Group_bv): return 83
        if self.categorize_ip_checks(ipaddr, def_mpvs_ltd): return 83
        if self.categorize_ip_checks(ipaddr, def_taiwan_network_information): return 83
        if self.categorize_ip_checks(ipaddr, def_serveroid): return 83
        if self.categorize_ip_checks(ipaddr, def_hosthatch): return 83
        if self.categorize_ip_checks(ipaddr, def_cz_nic_zspo): return 83
        if self.categorize_ip_checks(ipaddr, def_switch): return 83
        if self.categorize_ip_checks(ipaddr, def_datacamp): return 83
        if self.categorize_ip_checks(ipaddr, def_alphalink_sasu): return 83
        if self.categorize_ip_checks(ipaddr, def_aptum_technologies): return 83
        if self.categorize_ip_checks(ipaddr, def_andrews_arnold): return 83
        if self.categorize_ip_checks(ipaddr, def_highwinds_network_group): return 83
        if self.categorize_ip_checks(ipaddr, def_m247): return 83
        if self.categorize_ip_checks(ipaddr, def_outscale_sasu): return 83
        if self.categorize_ip_checks(ipaddr, def_llhost): return 83
        if self.categorize_ip_checks(ipaddr, defs_sdv_plurimedia): return 83
        if self.categorize_ip_checks(ipaddr, defs_automattic): return 83
        if self.categorize_ip_checks(ipaddr, def_alibaba): return 83
        if self.categorize_ip_checks(ipaddr, def_fly_io): return 83
        if self.categorize_ip_checks(ipaddr, def_shenzhen_tencent): return 83
        if self.categorize_ip_checks(ipaddr, defs_monaco_telecom): return 83
        if self.categorize_ip_checks(ipaddr, def_communityrack_org): return 83
        if self.categorize_ip_checks(ipaddr, def_wanagain): return 83
        if self.categorize_ip_checks(ipaddr, def_planethoster): return 83
        if self.categorize_ip_checks(ipaddr, def_ionos): return 83
        if self.categorize_ip_checks(ipaddr, defs_internap_holding): return 83
        if self.categorize_ip_checks(ipaddr, def_leaseweb): return 83
        if self.categorize_ip_checks(ipaddr, def_ntt): return 83
        if self.categorize_ip_checks(ipaddr, def_network_of_data_centers): return 83

        if self.categorize_ip_checks(ipaddr, def_criteo_sa): return 143
        if self.categorize_ip_checks(ipaddr, def_quantserve): return 143
        if self.categorize_ip_checks(ipaddr, def_new_relic): return 143

        if self.categorize_ip_checks(ipaddr, def_hetzner_online): return 236
        if self.categorize_ip_checks(ipaddr, def_nextdns): return 237

        if self.categorize_ip_checks(ipaddr, defs_conviva): return 100
        if self.categorize_ip_checks(ipaddr, def_netflix): return 100
        if self.categorize_ip_checks(ipaddr, defs_convia_inc): return 100

        if self.categorize_ip_checks(ipaddr, def_github):               return  126
        if self.categorize_ip_checks(ipaddr, def_smile_gie):            return  126
        if self.categorize_ip_checks(ipaddr, def_thomas_steen_rasmussen): return  126
        if self.categorize_ip_checks(ipaddr, defs_adobe):               return  126
        if self.categorize_ip_checks(ipaddr, def_canonical_group):      return  126
        if self.categorize_ip_checks(ipaddr, def_nvidia):               return  126
        if self.categorize_ip_checks(ipaddr, def_dell):                 return  126
        if self.categorize_ip_checks(ipaddr, def_nutannix):             return  126
        if self.categorize_ip_checks(ipaddr, def_vmware):               return  126
        if self.categorize_ip_checks(ipaddr, def_haproxy_technologies): return  126
        if self.categorize_ip_checks(ipaddr, def_bytedance)           : return  126


        if self.categorize_ip_checks(ipaddr, def_twitter): return 134

        if self.categorize_ip_checks(ipaddr, defs_salesforce): return 151

        if self.categorize_ip_checks(ipaddr, def_unversity): return 115
        if self.categorize_ip_checks(ipaddr, def_renater): return 115
        if self.categorize_ip_checks(ipaddr, def_index_education): return 115

        if self.categorize_ip_checks(ipaddr, def_kaspersky): return 147
        if self.categorize_ip_checks(ipaddr, def_eset): return 147



        if self.out: print("categorize_ip(%s) RETURN NONE L.842" % ipaddr)
        return 0

    def categorize_ip_checks(self,ipaddr,arrayof):
        for cdir in arrayof:
            try:
                if IPAddress(ipaddr) in IPNetwork(cdir): return True
            except:
                self.xsyslog("ERROR, categorize_ip_checks %s -> %s" % (ipaddr, cdir))
                continue

        return False

    def set_cache(self,domain,category_id):
        domain=str(domain)
        if len(self.local_cache) < self.TheShieldMaxItemsInMemory: self.local_cache[domain]=category_id
        if domain.find('isWhite:') > -1: return True

        if self.EnableCategoriesCache == 1:
            domain_md5 = str(hashlib.md5(domain).hexdigest())
            if self.TheShieldDebug == 1: self.xsyslog("%s set_cache %s -> %s" % (domain, domain_md5, category_id))
            if not self.mem.redis_set(domain_md5,str(category_id)):
                self.xsyslog("Saving in Categories Cache Failed item %s=%s error %s" % (domain, category_id,self.mem.error))

        dbm_cache="/var/log/squid/categories.dbm"
        try:
            db = anydbm.open(dbm_cache, flag='c')
            db[domain]=str(category_id)
            db.close()

        except:
            if self.TheShieldDebug == 1:
                self.xsyslog("Saving anydbm item %s=%s error" % (domain, category_id))
                self.xsyslog(tb.format_exc())

        smd5 = str("SHIELD.cat.%s" % hashlib.md5(domain.encode("utf-8")).hexdigest())
        try:
            if not self.mem.ksrncache_set(smd5,category_id,self.cache_time):
                self.xsyslog("Saving item %s error %s" % (smd5,self.mem.error))
                return False
            return True
        except:
            self.xsyslog(tb.format_exc())
            return False






    def ilog(self,line,func,text):
        text="--------------: categorize:%s %s %s" % (line,func,text)
        self.INTERNAL_LOGS.append(str(text))

    def get_linenumber(self):
        cf = currentframe()
        return cf.f_back.f_lineno

    def read_list_from_path(self,path):
        xlist = set()
        if not os.path.exists(path): return xlist
        try:
            with open(path, "r") as f:
                for line in f:
                    xlist.add(line.rstrip())
        except IOError:
            return xlist

        return xlist


    def load_cache(self):
        pickle_path="/home/artica/SQLITE/categories.caches.db"
        if not os.path.exists(pickle_path):
            self.local_cache={}
            return True
        try:
            with open(pickle_path, 'rb') as infile:
                self.local_cache=pickle.load(infile)
                if self.TheShieldDebug==1: self.xsyslog("CATEGORY, Loading Internal cache success")
        except IOError:
            if self.TheShieldDebug==1: self.xsyslog("CATEGORY, Loading Internal cache with error IOError")
            self.local_cache={}
            return False

        except EOFError:
            if self.TheShieldDebug==1: self.xsyslog("CATEGORY, Loading Internal cache with error EOFError")
            self.local_cache={}
            return False


        if self.logger is not None:
            elements=len(self.local_cache)
            if self.TheShieldDebug==1: self.xsyslog("CATEGORY, Loading Internal cache with %s elements Success" % elements)
        return True

    def save_cache(self):
        pickle_path = "/home/artica/SQLITE/categories.caches.db"
        if len(self.local_cache)==0: return True
        try:
            with open(pickle_path, 'wb') as outfile:
                pickle.dump(self.local_cache, outfile, protocol=2)
                if self.TheShieldDebug==1: self.xsyslog("CATEGORY, Saving Internal cache success")
        except:
            if self.logger is not None:self.xsyslog("CATEGORY, Save Internal cache %s with error" % pickle_path)
            return False

        elements = len(self.local_cache)
        if self.TheShieldDebug==1:  self.xsyslog("CATEGORY, Save Internal cache with %s elements success" % elements)
        return True




    def dump_tlds(self):
        func="dump_tlds"
        pickle_path = "/usr/share/artica-postfix/ressources/databases/tlds.tld"
        src_path = "/usr/share/artica-postfix/ressources/databases/effective_tld_names.dat"
        tld_path = "/usr/share/artica-postfix/ressources/databases/tlds-alpha-by-domain.txt"
        try:
            with open(pickle_path, 'rb') as infile:
                return pickle.load(infile)
        except IOError:
            pass

        tlds = {'starred': [], 'normal': []}
        try:
            with open(tld_path, "r") as response:
                for line in response:
                    line=line.lower()
                    line = line.strip()
                    tlds['normal'].append(line)
        except:
            self.ilog(self.get_linenumber(), func, "%s Error %s " % (tld_path,tb.format_exc()))

        with open(src_path, "r") as response:
            for line in response:
                if line.startswith('//') or line in ['\n', '']: continue

            if line.startswith('*'):
                tlds['starred'].append(line.strip())
            else:
                tlds['normal'].append(line.strip())

        with open(pickle_path, 'wb') as outfile:
            pickle.dump(tlds, outfile,protocol=2)
        return tlds


    def reload_dbs(self):
        self.trackers_dst=self.read_list_from_path("/usr/share/artica-postfix/ressources/databases/trackers.txt")
        self.whitelist_dst=self.read_list_from_path("/etc/squid3/acls_whitelist.dstdomain.conf")
        self.whitelist_dstrx=self.read_list_from_path("/etc/squid3/acls_whitelist.dstdom_regex.conf")
        self.whitelist_src=self.read_list_from_path("/etc/squid3/acls_whitelist.src.conf")
        self.whitelist_arp =    self.read_list_from_path("/etc/squid3/acls_whitelist.arp.conf")
        self.srnwhite  = self.read_list_from_path("/etc/squid3/acl_dstdomain_tempwhite.conf")
        self.advertbase = self.read_list_from_path("/usr/share/artica-postfix/ressources/databases/advertising.txt")
        self.blacklist_dst = self.read_list_from_path("/etc/squid3/DomainsBlackLists.acl")
        self.load_categories_perso()
        self.load_cache()


    def build_servernames(self):
        try:
            KSRNDns1Len=len(self.KSRNDns1)
        except:
            self.xsyslog("ERROR, %s" % tb.format_exc())
            self.KSRNDns1=GET_INFO_STR("KSRNDns1")
            KSRNDns1Len = len(self.KSRNDns1)

        if KSRNDns1Len > 3:
            if self.logger is not None:

                if self.debug: self.xsyslog("Append DNS Server [%s]" % self.KSRNDns1)
            self.nameservers_list.append(self.KSRNDns1)

        if len(self.KSRNDns2) > 3:
            if self.logger is not None:
                if self.debug: self.xsyslog("Append DNS Server [%s]" % self.KSRNDns2)
            self.nameservers_list.append(self.KSRNDns2)

        if len(self.nameservers_list)>0:
            return True

        if self.SQUIDEnable == 0:
            self.read_resolv_conf()
            return True

        if self.SquidDNSUseSystem == 1:
            if self.logger is not None:
                if self.debug: self.xsyslog("Reading resolv.conf")
            self.read_resolv_conf()
            return True

        SquidNameServer1=GET_INFO_STR("SquidNameServer1")
        SquidNameServer2=GET_INFO_STR("SquidNameServer2")
        if not SquidNameServer1 in  self.nameservers_list : self.nameservers_list.append( GET_INFO_STR("SquidNameServer1") )
        if not SquidNameServer2 in  self.nameservers_list : self.nameservers_list.append( GET_INFO_STR("SquidNameServer2") )

    def decrypt_txt( self, key,enc ):
        enc = base64.b64decode(enc)
        iv = enc[:16]
        cipher = AES.new(key,AES.MODE_CBC, iv )
        return cipher.decrypt( enc[16:] )

    def read_resolv_conf(self):
        try:
            f = open("/etc/resolv.conf", 'r')
        except IOError:
            self.nameservers_list.append('8.8.8.8')
            return

        try:
            for l in f:
                l = l.strip()
                if len(l) == 0 or l[0] == '#' or l[0] == ';': continue
                tokens = l.split()
                if len(tokens) < 2: continue
                if tokens[0] == 'nameserver':
                    if tokens[1] == "127.0.0.1": continue
                    self.nameservers_list.append(tokens[1])
        finally:
            f.close()

        if len(self.nameservers_list) == 0: self.nameservers_list.append('8.8.8.8')

    def get_category_ip(self,domain):
        categoryid=0
        matches = re.search('^([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)$',domain)
        if not matches: return 0
        ipstr = ip2long(domain)


        if ipstr in self.local_cache:
            categoryid=self.local_cache[ipstr]
            self.categoryname = self.category_int_to_string(categoryid)
            return categoryid

        if ipaddress.ip_address(unicode(domain)).is_private:
            self.local_cache[ipstr]=82
            return 82

        if not ipstr in self.not_calculated:
            try:
                if self.out: print("self.categorize_ip(%s) L.1083" % unicode(domain))
                categoryid=self.categorize_ip(unicode(domain))
                if categoryid==0:
                    if self.out: print("self.categorize_ip(%s) ! FALSE ! L.1086" % unicode(domain))
                    self.not_calculated[ipstr]=0
            except:
                categoryid=0
                if self.out: print(tb.format_exc())
                self.xsyslog("ERROR, categorize_ip [%s] -> [%s]" % (domain, tb.format_exc()))


        if categoryid >0:
            if self.out: print("self.categorize_ip(%s) == %s L.1095 !FOUND!" % (unicode(domain),categoryid))
            self.local_cache[ipstr] = categoryid
            self.categoryname = self.category_int_to_string(categoryid)
            return categoryid

        cdir = "%s-%s-%s.cdir" % ( matches.group(1),matches.group(2),matches.group(3) )

        categoryid=self.get_cache(cdir)
        if categoryid is not None:
            self.local_cache[ipstr] = categoryid
            return categoryid

        categoryid=self.get_category_official_dns(cdir)
        if categoryid > 0:
            self.categoryname = self.category_int_to_string(categoryid)
            self.set_cache(cdir,categoryid)
            self.local_cache[ipstr] = categoryid
            return categoryid

        ipstr=ip2long(domain)
        categoryid = self.get_cache(str(ipstr))
        if categoryid is not None:
            self.local_cache[ipstr] = categoryid
            self.categoryname = self.category_int_to_string(categoryid)
            return categoryid

        categoryid=self.get_category_official_dns("%s.addr" % ipstr)

        if categoryid > 0:
            self.local_cache[ipstr] = categoryid
            self.categoryname = self.category_int_to_string(categoryid)
            self.set_cache(str(ipstr), categoryid)
            return categoryid

        self.set_cache(str(ipstr), 0)
        return 0

    def is_ip_private(self,domain):
        try:
            return ipaddress.ip_address(domain).is_private
        except:
            return False

    def refreshlists(self):
        self.trackers_dst=self.read_list_from_path("/usr/share/artica-postfix/ressources/databases/trackers.txt")
        self.whitelist_dst=self.read_list_from_path("/etc/squid3/acls_whitelist.dstdomain.conf")
        self.whitelist_dstrx=self.read_list_from_path("/etc/squid3/acls_whitelist.dstdom_regex.conf")
        self.whitelist_src=self.read_list_from_path("/etc/squid3/acls_whitelist.src.conf")
        self.whitelist_arp =    self.read_list_from_path("/etc/squid3/acls_whitelist.arp.conf")


    def log_query(self,text):
        if self.ExternalAclFirstDebug == 0: return False
        if self.out: print(text)
        self.xsyslog(text)
        return True

    def get_category(self, domain):
        stime=time.time()
        self.INTERNAL_LOGS = []
        self.categoryname=""
        func="get_category"

        try:
            domain = domain.lower()
        except:
            self.log_query("%s ERROR not a string " % domain)
            return 0

        domain = domain.strip()
        if domain.startswith('www.'): domain = domain.replace("www.", '', 1)
        if domain.endswith('.'):
            matches=re.search('^(.+?)\.$',domain)
            domain=matches.group(1)
            if self.ExternalAclFirstDebug == 1: self.log_query("DEBUG: %s (removed '.')" % domain)

        matches=re.search('^[0-9]+\.[0-9]+$',domain)
        if matches: return 0

        if domain.find(".")<1: return 82
        if domain.find("*") > 0: return 82
        if domain == "192.in-addr.arpa": return 82
        if domain == "10.in-addr.arpa": return 82
        if domain == "172.in-addr.arpa": return 82
        if domain == "176.in-addr.arpa": return 82

        if self.isArpa(domain):
            domain=self.stripaddr
            categoryid = self.get_cache(domain)
            if categoryid > 0:
                if self.ExternalAclFirstDebug == 1: self.log_query("DEBUG: %s HIT L.953" % domain)
                return categoryid
            categoryid=self.get_category_ip(domain)
            if categoryid > 0: self.set_cache(domain,categoryid)
            return categoryid

        if self.out : print("self.get_cache(%s) L.1166" % domain)
        stime2 = time.time()
        categoryid = self.get_cache(domain)
        if categoryid is not None:
            self.categoryname = self.category_int_to_string(categoryid)
            duration_total = self.mem.TimeExec(stime)
            duration=self.mem.TimeExec(stime2)
            self.log_query("%s %s [%s] %s (duration %s seconds / %s seconds total)" % (domain,"get_category * * HIT * *",categoryid,self.categoryname,duration,duration_total))
            return categoryid


        if is_valid_ip(domain):
            if self.out: print("%s TRUE a valid IP" % domain)
            if domain.find('192.168.') > 0:
                self.set_cache(domain, 82)
                return 82

            categoryid = self.get_category_ip(domain)
            if categoryid > 0: self.set_cache(domain, categoryid)
            return categoryid
        else:
            if self.out: print("%s not a valid IP" % domain)

        self.CountOfQueriesCache=self.CountOfQueriesCache+1

        if self.ExternalAclFirstDebug == 1:
            duration = self.mem.TimeExec(stime)
            self.log_query("%s %s [%s] %s count=%s" % (domain, "get_category * * MISS * *", categoryid, self.categoryname,self.CountOfQueriesCache))

        categoryid=self.get_category_perso(domain)
        if categoryid>0:
            self.categoryname = self.category_int_to_string(categoryid)
            if self.ExternalAclFirstDebug == 1:
                duration = self.mem.TimeExec(stime)
                self.log_query("%s %s [%s] %s (duration %s seconds)" % (domain, "get_category_perso * * MISS * *", categoryid, self.categoryname,duration))
            self.set_cache(domain, categoryid)
            return categoryid


        categoryid=self.get_category_fixed(domain)

        if self.ExternalAclFirstDebug == 1:
            duration = self.mem.TimeExec(stime)
            self.log_query("%s %s [%s] %s count=%s (duration %s seconds)" % (domain, "get_category_fixed * * MISS * *", categoryid, self.categoryname,self.CountOfQueriesCache,duration))


        if categoryid > 0:
            self.categoryname = self.category_int_to_string(categoryid)
            self.log_query("%s %s [%s] %s" % (domain, "get_category FIXED MISS", categoryid,  self.categoryname))
            if self.debug: self.ilog(self.get_linenumber(), func, "Query %s --> FOUND : %s" % (domain, categoryid))
            self.set_cache(domain, categoryid)
            return categoryid




        start_time=time.time()
        categoryid = self.get_category_official_dns(domain)
        if self.TheShieldsLogTimes==1:
            duration=self.mem.TimeExec(start_time)
            duration_total = self.mem.TimeExec(stime)
            self.xsyslog("get_category:: get_category_official_dns: %s (duration %s seconds / %s seconds total)" % (domain,duration,duration_total))

        if categoryid > 0:
            if len(self.categoryname)==0: self.categoryname = self.category_int_to_string(categoryid)
            if self.debug: self.ilog(self.get_linenumber(), func, "Query %s --> FOUND : %s" % (domain, categoryid))
            if self.TheShieldsLogTimes == 1:
                duration = self.mem.TimeExec(stime)
                self.xsyslog("get_category: MISS %s duration %s" % (domain, duration))
            self.set_cache(domain, categoryid)
            return categoryid

        self.set_cache(domain,0)
        if self.TheShieldsLogTimes==1:
            if self.logger is not None:
                duration=self.mem.TimeExec(stime)
                self.xsyslog("get_category: MISS %s duration %s" % (domain,duration))


        self.log_query("%s %s [%s] %s" % (domain, "UNKNOWN", 0, "Unknown"))
        return 0


    def isArpa(self,sitename):
        sitename=sitename.strip()
        sitename=sitename.lower()
        matches = re.search('^([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)\.in-addr\.arpa$',sitename)
        if not matches: return False
        self.stripaddr="%s.%s.%s.%s" % (matches.group(4),matches.group(3),matches.group(2),matches.group(1))
        return True


    def check_dns_performance(self,servername):
        resolver = dns.resolver.Resolver(configure=False)
        resolver.lifetime = 1
        resolver.timeout= 1
        resolver.nameservers=[servername]
        start_time=datetime.now()
        func="check_dns_performance"
        try:
            result = resolver.query("www.ibm.com", "A")
        except dns.exception.Timeout:
            end_time = datetime.now()
            time_diff = (end_time - start_time)
            duration = time_diff.total_seconds() * 1000
            self.xsyslog("categorizeclass.so [ERROR]: %s not answering in time %sms" % (servername,duration))
            self.ilog(self.get_linenumber(), func, "%s not answering in time %sms" % (servername,duration))
            return False
        except:
            return True

    def check_nameservers(self):
        func="check_nameservers"
        self.ilog(self.get_linenumber(), func, "Testing nameservers")
        if self.nameservers_checked:
            if len(self.nameservers)>0 : return True

        cached=self.mem.ksrncache_get("GOOD_DNS_SERVERS")
        if cached is not None:
            self.ilog(self.get_linenumber(), func, "HIT %s" % cached)
            self.nameservers=cached.split(",")
            return True


        self.build_servernames()
        if len(self.KSRNDns1)>3:
            if len(self.KSRNDns2) > 3:
                self.ilog(self.get_linenumber(), func, "--> build_servernames %s,%s" % (self.KSRNDns1,self.KSRNDns2))
                self.mem.ksrncache_set("GOOD_DNS_SERVERS", "%s,%s" % (self.KSRNDns1,self.KSRNDns2), 1800)
                return True

        AL={}

        for servernames in self.nameservers_list:
            if servernames in AL: continue
            self.ilog(self.get_linenumber(), func, "Testing %s" % servernames)
            AL[servernames]=True
            if not self.check_dns_performance(servernames):
                self.ilog(self.get_linenumber(), func, "%s not answering in time, remove it from list" % servernames)
                continue

            self.nameservers.append(servernames)

        if len(self.nameservers)>0:
            self.mem.ksrncache_set("GOOD_DNS_SERVERS",",".join(self.nameservers),1800)
            self.nameservers_checked=True

        self.nameservers = ['8.8.8.8', '1.1.1.1']
        self.mem.ksrncache_set("GOOD_DNS_SERVERS", ",".join(self.nameservers), 1800)


    def get_category_cguard(self,sitename):
        if sitename.find(".")<1: return 82
        if sitename.find("*") > 0: return 82

        squery="%s.cloud.cguardprotect.net" % sitename
        data = self.get_cache(squery)
        if data is not None:
            self.categoryname=self.category_int_to_string(data)
            self.log_query("%s %s [%s] %s" % (sitename, "CGUARD HIT", data, self.categoryname))
            return data

        if len(self.nameservers)==0: self.build_servernames()

        if self.TheShieldLogDNSQ==1:
            xnames=",".join(self.nameservers)
            self.xsyslog("%s Q [CGuard] (%s)" % (sitename,xnames))
        data=self.query_dns_engine(squery,"TXT")
        if data is None: return 0
        zcat=int(data)
        if zcat < 5000: return 0
        self.categoryname = self.category_int_to_string(data)
        self.log_query("%s %s [%s] %s" % (sitename, "CGUARD MISS", data, self.categoryname))
        return zcat

    def log_filename(self):
        return self.log_filename_round(datetime.now(), timedelta(minutes=10)).strftime('%Y%m%d%H%M')
    
    def log_filename_round(self,dt=None, dateDelta=timedelta(minutes=1)):
        roundTo = dateDelta.total_seconds()
        if dt is None: dt = datetime.now()
        seconds = (dt - dt.min).seconds
        rounding = (seconds + roundTo / 2) // roundTo * roundTo
        return dt + timedelta(0, rounding - seconds, -dt.microsecond)

    def incr_statsline(self):
        stats_key = "SRNSTATSLINE:%s" % self.log_filename()
        self.mem.memcache_incr(stats_key)

    def query_dns_engine(self,query,queryType):
        func="query_dns_engine"
        resolver = dns.resolver.Resolver()
        Timeout                 = float(self.dnstimeout)
        resolver.lifetime       =  Timeout / 2.5
        resolver.timeout        =  Timeout
        start_time=datetime.now()

        if len(self.nameservers) == 0:
            if len(self.nameservers_list) > 0: self.nameservers=self.nameservers_list

        self.incr_statsline()
        self.ilog(self.get_linenumber(), func, "Query %s %s Global timeout=%s server timeout=%s" % (query, queryType,Timeout,resolver.timeout))
        if len(self.nameservers) == 0:
            self.build_servernames()
            if len(self.nameservers_list) > 0: self.nameservers = self.nameservers_list

        if len(self.nameservers) == 0:
            self.nameservers.append('1.1.1.1')
            self.nameservers.append('8.8.8.8')
        if len(self.nameservers) == 1: self.nameservers.append('1.1.1.1')

        resolver.nameservers = self.nameservers

        if self.TheShieldLogDNSQ==1:
            if self.logger is not None:
                for serv in self.nameservers: self.xsyslog("Servername [%s]" % serv)
                self.xsyslog("%s Q query_dns_engine[%s] servernames: %s" % (query,queryType,len(self.nameservers)))

        if self.debug:
            for serv in self.nameservers:
                self.ilog(self.get_linenumber(), func, "%s using %s as name server" % (query, serv))

        try:
            self.log_query("%s (%s) %s" % (query, self.get_linenumber(), "DNS QUERY"))
            result = resolver.query(query, queryType)
        except dns.resolver.NoAnswer:
            self.ilog(self.get_linenumber(), func, "%s %s" % (query, "Reputation return no result"))
            return 0
        except dns.exception.Timeout:
            end_time = datetime.now()
            time_diff = (end_time - start_time)
            duration = time_diff.total_seconds() * 1000
            self.ilog(self.get_linenumber(), func, "%s TimedOut ( %s seconds max / %s )" % (query,resolver.lifetime,duration))
            return 0
        except dns.resolver.NoNameservers:
            self.ilog(self.get_linenumber(), func, "%s NoNameserver, No non-broken nameservers are available to answer the query" % query)
            return 0

        except dns.resolver.NoAnswer:
            self.ilog(self.get_linenumber(), func, "%s NoAnswer, The response did not contain an answer to the question." % query)
            return 0


        except dns.name.EmptyLabel:
            self.ilog(self.get_linenumber(), func, "%s SyntaxError: EmptyLabel" % query)
            return 0

        except dns.resolver.NXDOMAIN:
            self.ilog(self.get_linenumber(), func, "%s The query name does not exist." % query)
            return 0

        except dns.name.LabelTooLong:
            self.ilog(self.get_linenumber(), func, "%s The Label is too long" % query)
            return 0
        except:
            self.ilog(self.get_linenumber(), func, "Unknown error: %s %s" % (query, tb.format_exc()))
            return 0


        try:
            if queryType == "A": return str(result[0])
            if queryType == "TXT":
                regexpat="([0-9]+):(.+?):([0-9]+)"
                for rdata in result:
                    for txt_string in rdata.strings:
                        matches = re.search(regexpat, txt_string)
                        if matches:
                            try:
                                cat = int(matches.group(1))
                                return cat
                            except:
                                error = tb.format_exc()
                                self.ilog(self.get_linenumber(), func, "FATAL ERROR %s" % error)
                                return 0

                        sdata=self.decrypt_txt("2FdJpHFckXau8226fKFyTts3y6Nd7wsa",txt_string)
                        self.ilog(self.get_linenumber(), func, "DECODED TXT [%s]" % sdata)
                        matches = re.search(regexpat, sdata)
                        if matches:
                            try:
                                cat = int(matches.group(1))
                                return cat
                            except:
                                error = tb.format_exc()
                                self.ilog(self.get_linenumber(), func, "FATAL ERROR %s" % error)
                                return 0
                        else:
                            self.ilog(self.get_linenumber(), func, "Regex2 not matches %s" % regexpat)



        except:
            self.ilog(self.get_linenumber(), func, "results Array out of bound %s" % tb.format_exc())
            return 0

    def parse_categories(self,key):
        compile_root = "/home/artica/theshieldsdb"
        for filename in self.local_db_files:
            fullpath="%s/%s" % (compile_root,filename)
            db=anydbm.open(fullpath,flag = 'r')
            value=db.get(key)
            if value is None: continue
            try:
                return int(value)
            except:
                continue


    def dump_local(self,index):
        compile_root = "/home/artica/theshieldsdb"
        fullpath = "%s/%s.dbm" % (compile_root, index)
        if not os.path.exists(fullpath):
            print(fullpath," no such file")
            return False

        db = anydbm.open(fullpath, flag='r')
        for key in db.keys():
            print(key,"=",db.get(key))


    def get_category_local(self,sitename):
        categoryid=0

        if self.useCGuardCategories==1:
            categoryid=self.get_category_cguard(sitename)
            duration = self.mem.TimeExec(start_time)
            if categoryid >0:
                self.categoryname = self.category_int_to_string(categoryid)
                self.log_query("%s %s [%s] %s" % (sitename, "CGUARD - get_category_official_dns (%s seconds)", categoryid, self.categoryname,duration))
                return categoryid

        sitename = sitename.lower()
        if sitename.startswith('www.'): sitename = sitename.replace("www.", '', 1)
        skey = str(hashlib.md5(sitename).hexdigest())
        categoryid=self.parse_categories(skey)
        if categoryid > 0 :return categoryid

        maindomain=publicsuffix.get_sld(sitename)
        if sitename == maindomain: return 0
        skey = str(hashlib.md5(maindomain).hexdigest())
        categoryid = self.parse_categories(skey)
        if categoryid > 0: return categoryid

        return 0


    def get_category_official_dns(self,sitename):
        if self.TheShieldsUseLocalCats==1:
            try:
                return self.get_category_local(sitename)
            except:
                self.xsyslog("[ERROR]: [%s]" % (sitename, tb.format_exc()))
                return 0

        start_time=time.time()
        categoryid=0
        duration=0

        if self.useCGuardCategories==1:
            categoryid=self.get_category_cguard(sitename)
            duration = self.mem.TimeExec(start_time)
            if categoryid >0:
                self.categoryname = self.category_int_to_string(categoryid)
                self.log_query("%s %s [%s] %s" % (sitename, "CGUARD - get_category_official_dns (%s seconds)", categoryid, self.categoryname,duration))
                return categoryid



        if self.TheShieldLogDNSQ==1: self.xsyslog("%s Q [Artica] (%s second)" % (sitename,duration))

        func="get_category_official_dns"
        q="%s.filter.artica.center" % sitename
        self.ilog(self.get_linenumber(), func, "Query")
        categoryid = self.query_dns_engine(q,"TXT")
        duration = self.mem.TimeExec(start_time)
        if self.logqueries==1: self.xsyslog("[%s]: get_category_official_dns:: ARTICA cat=%s-> [%s]s" % (sitename, categoryid,duration))
        if categoryid ==0:
            self.log_query("%s (%s) %s [%s] %s" % (sitename,self.get_linenumber(), "ARTICA", 0, "Unknown"))
            return 0
        self.categoryname = self.category_int_to_string(categoryid)
        self.set_cache(sitename,categoryid)
        self.log_query("%s (%s) %s [%s] %s" % (sitename, self.get_linenumber(),"ARTICA MISS", categoryid, self.categoryname))
        return int(categoryid)

    def category_int_to_string(self,category_int):
        translate_catz = {}
        if category_int is None:
            if self.TheShieldDebug == 1: self.xsyslog("category_int is None L.1377")
            return "Unknown"

        try:
            number = int(category_int)
        except:
            self.log_query("[%s]: Error Not seems an Integer to get the category name" % category_int)
            return "Unknown"

        if number in self.local_categories:
            strz=str(self.local_categories[number])
            strz=strz.replace(" ","_")
            strz=strz.replace("/","_")
            return strz


        translate_catz[0] = "Unknown"
        translate_catz[1] = "Facebook"
        translate_catz[2] = "Microsoft"
        translate_catz[3] = "Society"
        translate_catz[5] = "Advertising"
        translate_catz[6] = "Phishtank"
        translate_catz[7] = "Ransomwares"
        translate_catz[8] = "Shopping"
        translate_catz[9] = "Abortion"
        translate_catz[10] = "Agressive"
        translate_catz[11] = "Alcohol"
        translate_catz[12] = "Animals"
        translate_catz[13] = "Associations"
        translate_catz[14] = "Astrology"
        translate_catz[15] = "Audio-video"
        translate_catz[16] = "Youtube"
        translate_catz[17] = "Google"
        translate_catz[18] = "Apple"
        translate_catz[19] = "Amazonaws"
        translate_catz[20] = "Akamai"
        translate_catz[21] = "Yahoo"
        translate_catz[22] = "Skype"
        translate_catz[23] = "Citrix"
        translate_catz[24] = "Bikes"
        translate_catz[25] = "Boats"
        translate_catz[26] = "Carpool"
        translate_catz[27] = "Cars"
        translate_catz[28] = "Planes"
        translate_catz[29] = "Bicycles"
        translate_catz[30] = "Blogs"
        translate_catz[31] = "Books"
        translate_catz[32] = "Browsers plugins"
        translate_catz[33] = "Celebrities"
        translate_catz[34] = "Chat"
        translate_catz[35] = "Children"
        translate_catz[36] = "Cleaning"
        translate_catz[37] = "Clothing"
        translate_catz[38] = "Converters"
        translate_catz[39] = "Cosmetics"
        translate_catz[40] = "Culture"
        translate_catz[41] = "Dangerous materials"
        translate_catz[42] = "Dating"
        translate_catz[43] = "Dictionaries"
        translate_catz[44] = "Downloads"
        translate_catz[45] = "Drugs"
        translate_catz[46] = "Dynamic DHCP ISP"
        translate_catz[47] = "Electrical appliances"
        translate_catz[48] = "Electronic house"
        translate_catz[49] = "Filehosting"
        translate_catz[50] = "Banking"
        translate_catz[51] = "Insurances"
        translate_catz[52] = "Moneylending"
        translate_catz[53] = "Finance/other"
        translate_catz[54] = "Realestate"
        translate_catz[55] = "Financial"
        translate_catz[56] = "Forums"
        translate_catz[57] = "Gambling"
        translate_catz[58] = "Games"
        translate_catz[59] = "Genealogy"
        translate_catz[60] = "Gifts"
        translate_catz[62] = "Governments"
        translate_catz[63] = "Green"
        translate_catz[64] = "Hacking"
        translate_catz[65] = "Handicap"
        translate_catz[66] = "Health"
        translate_catz[67] = "Arts"
        translate_catz[68] = "Cooking"
        translate_catz[69] = "Hobby Other"
        translate_catz[70] = "Pets"
        translate_catz[71] = "Paytosurf"
        translate_catz[72] = "Terrorism"
        translate_catz[73] = "Fishing"
        translate_catz[74] = "Hospitals"
        translate_catz[75] = "Houseads"
        translate_catz[76] = "Housing accessories"
        translate_catz[77] = "Housing doityourself"
        translate_catz[78] = "Housing builders"
        translate_catz[79] = "Humanitarian"
        translate_catz[80] = "Images hosting"
        translate_catz[81] = "Industry"
        translate_catz[82] = "Internal"
        translate_catz[83] = "Internet Providers"
        translate_catz[85] = "Jobsearch"
        translate_catz[86] = "Jobtraining"
        translate_catz[87] = "Justice"
        translate_catz[88] = "Learning"
        translate_catz[89] = "Global White List"
        translate_catz[90] = "Luxury"
        translate_catz[91] = "Mailing"
        translate_catz[92] = "Malwares"
        translate_catz[93] = "Mangas"
        translate_catz[94] = "Maps"
        translate_catz[95] = "Marketingware"
        translate_catz[96] = "Medical"
        translate_catz[97] = "Mixed adult"
        translate_catz[98] = "Smartphones"
        translate_catz[99] = "Models"
        translate_catz[100] = "Movie and Streaming"
        translate_catz[101] = "Music"
        translate_catz[102] = "Nature"
        translate_catz[103] = "News and press"
        translate_catz[104] = "Passwords"
        translate_catz[105] = "Phishing"
        translate_catz[106] = "Photo"
        translate_catz[107] = "Pictures libraries"
        translate_catz[108] = "Politic"
        translate_catz[109] = "Porn"
        translate_catz[111] = "Proxies"
        translate_catz[112] = "Reaffected"
        translate_catz[113] = "Humor"
        translate_catz[114] = "Nightout"
        translate_catz[115] = "Schools Educational"
        translate_catz[116] = "Sports"
        translate_catz[117] = "Get Married"
        translate_catz[118] = "Police"
        translate_catz[119] = "Travel"
        translate_catz[120] = "Wellness"
        translate_catz[121] = "Redirector"
        translate_catz[122] = "Religion"
        translate_catz[123] = "Remote-control"
        translate_catz[124] = "Sciences"
        translate_catz[125] = "Astronomy"
        translate_catz[126] = "Science computing"
        translate_catz[127] = "Weather"
        translate_catz[128] = "Chemistry"
        translate_catz[129] = "Searchengines"
        translate_catz[130] = "Sect"
        translate_catz[131] = "Sexual Education"
        translate_catz[132] = "Lingerie (sex)"
        translate_catz[133] = "Smallads"
        translate_catz[134] = "Social Networks"
        translate_catz[135] = "Spywares"
        translate_catz[136] = "SSL certificates"
        translate_catz[137] = "Stockexchange"
        translate_catz[139] = "Redirector"
        translate_catz[140] = "Suspicious"
        translate_catz[141] = "Teens"
        translate_catz[142] = "Tobacco"
        translate_catz[143] = "Trackers"
        translate_catz[144] = "Translators"
        translate_catz[145] = "Transport"
        translate_catz[146] = "Cheater"
        translate_catz[147] = "Updatesites"
        translate_catz[148] = "Violence"
        translate_catz[149] = "Warez"
        translate_catz[150] = "Weapons"
        translate_catz[151] = "Web applications"
        translate_catz[152] = "Webmails"
        translate_catz[153] = "Web phones"
        translate_catz[154] = "Web plugins"
        translate_catz[155] = "Web radio"
        translate_catz[156] = "Web TV"
        translate_catz[157] = "Wine"
        translate_catz[158] = "Womanbrand"
        translate_catz[159] = "Horses"
        translate_catz[160] = "Meetings"
        translate_catz[161] = "Tattooing"
        translate_catz[163] = "Literature"
        translate_catz[166] = "Advertising"
        translate_catz[167] = "Porn"
        translate_catz[168] = "Agressive"
        translate_catz[169] = "Arjel"
        translate_catz[170] = "Religion"
        translate_catz[171] = "Astrology"
        translate_catz[172] = "Audio-video"
        translate_catz[173] = "Banking"
        translate_catz[174] = "Bitcoin"
        translate_catz[175] = "Blogs"
        translate_catz[176] = "Celebrities"
        translate_catz[177] = "Chat"
        translate_catz[178] = "Children"
        translate_catz[179] = "Cleaning"
        translate_catz[180] = "Cooking"
        translate_catz[181] = "Cryptojacking"
        translate_catz[182] = "Dangerous materials"
        translate_catz[183] = "Dating"
        translate_catz[184] = "D-DOS"
        translate_catz[185] = "Dialers"
        translate_catz[186] = "Downloads"
        translate_catz[187] = "Drugs"
        translate_catz[188] = "Schools Educational"
        translate_catz[189] = "filehosting"
        translate_catz[190] = "Financial"
        translate_catz[191] = "Forums"
        translate_catz[192] = "Gambling"
        translate_catz[193] = "Games"
        translate_catz[194] = "Proxies"
        translate_catz[195] = "Hacking"
        translate_catz[196] = "Jobsearch"
        translate_catz[197] = "Sex Lingerie"
        translate_catz[198] = "White list"
        translate_catz[199] = "Educational White list"
        translate_catz[200] = "Malwares"
        translate_catz[201] = "Manga"
        translate_catz[202] = "Marketingware"
        translate_catz[203] = "Mixed Adult"
        translate_catz[204] = "Smartphones"
        translate_catz[205] = "Phishing"
        translate_catz[207] = "Press"
        translate_catz[208] = "Redirector"
        translate_catz[209] = "Advertising"
        translate_catz[210] = "Radio"
        translate_catz[211] = "Reaffected"
        translate_catz[212] = "Redirector"
        translate_catz[213] = "Remote-control"
        translate_catz[214] = "Sect"
        translate_catz[215] = "Sexual Education"
        translate_catz[216] = "Shopping"
        translate_catz[217] = "Shorteners"
        translate_catz[218] = "Social Networks"
        translate_catz[219] = "Special"
        translate_catz[220] = "Sports"
        translate_catz[221] = "Redirector"
        translate_catz[222] = "Redirector"
        translate_catz[223] = "Translation"
        translate_catz[224] = "Cheater"
        translate_catz[225] = "Update"
        translate_catz[226] = "Warez"
        translate_catz[227] = "Webmail"
        translate_catz[228] = "Poneytelecom"
        translate_catz[229] = "OVH"
        translate_catz[230] = "DigitalOcean"
        translate_catz[231] = "Orange SA"
        translate_catz[232] = "SoftLayer Technologies"
        translate_catz[233] = "Linode"
        translate_catz[234] = "Cloudflare"
        translate_catz[235] = "cryptomining"
        translate_catz[236] = "Hetzner Online"
        translate_catz[237] = "DOH DNS"
        translate_catz[249] = "DNS Black Listing"
        translate_catz[5001] = "lem.adult.porn"
        translate_catz[5002] = "lem.notlegal.appz"
        translate_catz[5003] = "lem.notlegal.hardware"
        translate_catz[5004] = "lem.games.online"
        translate_catz[5005] = "lem.notlegal.generic"
        translate_catz[5006] = "lem.health.prevention.drugs"
        translate_catz[5007] = "lem.gov.justice"
        translate_catz[5008] = "lem.gov.health"
        translate_catz[5009] = "lem.dating"
        translate_catz[5010] = "lem.scam"
        translate_catz[5011] = "x.cd06.wl"
        translate_catz[5012] = "lem.games.app.apple"
        translate_catz[5013] = "lem.games.news"
        translate_catz[5014] = "lem.health.prevention.accident"
        translate_catz[5015] = "lem.finance.banks"
        translate_catz[5016] = "lem.hobby.manga"
        translate_catz[5017] = "lem.gamble"
        translate_catz[5018] = "lem.games.app.pc"
        translate_catz[5019] = "lem.health.risk.drugs"
        translate_catz[5020] = "lem.companies.insurance"
        translate_catz[5021] = "lem.games.app.android"
        translate_catz[5022] = "lem.health.prevention.riskypractice"
        translate_catz[5023] = "lem.gov.country.fr"
        translate_catz[5024] = "lem.infected"
        translate_catz[5025] = "lem.chat"
        translate_catz[5026] = "lem.tracker"
        translate_catz[5027] = "lem.malware"
        translate_catz[5028] = "lem.gov.edu"
        translate_catz[5029] = "lem.notlegal.moviez"
        translate_catz[5030] = "lem.notlegal.p2p"
        translate_catz[5031] = "lem.certificate"
        translate_catz[5032] = "lem.search.safe-engines"
        translate_catz[5033] = "lem.fake.news"
        translate_catz[5034] = "lem.fake.joke"
        translate_catz[5035] = "lem.fake.health"
        translate_catz[5036] = "lem.notlegal.downloadz"
        translate_catz[5037] = "lem.gov.rescue"
        translate_catz[5038] = "lem.gov.towns"
        translate_catz[5039] = "lem.gov.regions"
        translate_catz[5040] = "lem.gov.country"
        translate_catz[5041] = "lem.health.prevention.sects"
        translate_catz[5042] = "lem.notlegal.extractor"
        translate_catz[5043] = "lem.health.risk.sects"
        translate_catz[5044] = "lem.gov.police"
        translate_catz[5045] = "lem.finance.fr.notlegal"
        translate_catz[5046] = "lem.gov.generic"
        translate_catz[5047] = "lem.companies.industries"
        translate_catz[5048] = "lem.adult.underwears"
        translate_catz[5049] = "lem.health.products"
        translate_catz[5050] = "lem.network.monitoring"
        translate_catz[5051] = "lem.hobby.sport"
        translate_catz[5052] = "x.cd06.bl"
        translate_catz[5053] = "lem.computing"
        translate_catz[5054] = "lem.shop"
        translate_catz[5055] = "lem.companies.itservices"
        translate_catz[5056] = "lem.computing.pentesting"
        translate_catz[5057] = "lem.computing.freedns"
        translate_catz[5058] = "lem.adult.sexshop"
        translate_catz[5059] = "lem.learning"
        translate_catz[5060] = "lem.computing.update"
        translate_catz[5061] = "lem.hobby.art"
        translate_catz[5062] = "lem.cooking"
        translate_catz[5063] = "lem.companies.buildings"
        translate_catz[5064] = "lem.hobby.genealogy"
        translate_catz[5065] = "lem.hobby.astrology"
        translate_catz[5066] = "lem.ads"
        translate_catz[5067] = "lem.news.tv"
        translate_catz[5068] = "lem.news.mag"
        translate_catz[5069] = "lem.computing.webdesign"
        translate_catz[5070] = "lem.learning.schools"
        translate_catz[5071] = "lem.health.hospitals"
        translate_catz[5072] = "lem.hobby.travel"
        translate_catz[5073] = "lem.learning.manuals"
        translate_catz[5074] = "lem.learning.languages"
        translate_catz[5075] = "lem.learning.tools"
        translate_catz[5076] = "lem.hobby.animals"
        translate_catz[5077] = "lem.hobby.music"
        translate_catz[5078] = "lem.hobby.vehicles"
        translate_catz[5079] = "lem.health.disease"
        translate_catz[5080] = "lem.app.productivity"
        translate_catz[5081] = "lem.hobby.books"
        translate_catz[5082] = "lem.hobby.photo"
        translate_catz[5083] = "lem.sciences"
        translate_catz[5084] = "lem.companies.realestate"
        translate_catz[5085] = "lem.blogs.design"
        translate_catz[5086] = "lem.blogs.geek"
        translate_catz[5087] = "lem.socialnet"
        translate_catz[5088] = "lem.blogs.persdev"
        translate_catz[5089] = "lem.companies.models"
        translate_catz[5090] = "lem.politics"
        translate_catz[5091] = "lem.blogs"
        translate_catz[5092] = "lem.ecology"
        translate_catz[5093] = "lem.proxy"
        translate_catz[5094] = "lem.phishing"
        translate_catz[5095] = "lem.finance.cryptocoins"
        translate_catz[5096] = "lem.health.risk"
        translate_catz[5097] = "lem.pictures"
        translate_catz[5098] = "lem.blogs.celebrity"
        translate_catz[5099] = "lem.blogs.fashion"
        translate_catz[5100] = "lem.blogs.diy"
        translate_catz[5101] = "lem.violence"
        translate_catz[5102] = "lem.blogs.history"
        translate_catz[5103] = "lem.hobby.nature"
        translate_catz[5104] = "lem.notmoderated"
        translate_catz[5105] = "lem.blogs.lifestyle"
        translate_catz[5106] = "lem.videos"
        translate_catz[5107] = "lem.pwned"
        translate_catz[5108] = "lem.religious"
        translate_catz[5109] = "lem.tattouing"
        translate_catz[5110] = "lem.companies.events"
        translate_catz[5111] = "lem.anonymous"
        translate_catz[5112] = "lem.visio"
        translate_catz[5113] = "lem.adult.generic"
        translate_catz[5114] = "lem.weapons"
        translate_catz[5115] = "lem.job"
        translate_catz[5116] = "lem.blogs.lgbt"
        translate_catz[5117] = "lem.apple"
        translate_catz[5118] = "lem.timeloose"
        translate_catz[5119] = "lem.learning.cheat"
        translate_catz[5120] = "lem.health.prevention"
        translate_catz[5121] = "lem.computing.antivirus"
        translate_catz[5122] = "lem.videos.youtube"
        translate_catz[5123] = "lem.videos.tv"
        translate_catz[5124] = "lem.notused"
        translate_catz[5125] = "lem.search.nosafe-engines"
        translate_catz[5126] = "lem.meteo"
        translate_catz[5127] = "lem.finance.loan"
        translate_catz[5128] = "lem.companies.printing"

        try:
            cat = translate_catz[number]
            category_name = cat.replace(" ", "_")
            category_name = category_name.replace("/", "_")
            return category_name
        except:
            if self.TheShieldDebug == 1: self.xsyslog("Category [%s]: FAILED == 'Unknown' L.1753" % (number))
            return "Unknown"

    def dangerous_category(self,category_id):
        # Advertising
        if category_id ==5: return True
        # Trackers
        if category_id == 143: return True
        # Phishing
        if category_id == 105: return True
        # Spywares
        if category_id == 135: return True
        # Malwares
        if category_id == 92: return True
        return False


    def regex_microsoft(self,sitename):



        fixeddomains=['self.events.data.microsoft.com','presence.teams.microsoft.com','www.msftncsi.com',
                     'login.microsoftonline.com','atm-fp-direct.office.com','config.teams.microsoft.com',
                     'login.windows.net','ctldl.windowsupdate.com','edge.microsoft.com',
                     'outlook.office365.com','euaz.relay.teams.microsoft.com',
                     'api.msn.com','www.msftncsi.com','ctldl.windowsupdate.com','consumer.entitlement.skype.com',
                     'nav.smartscreen.microsoft.com','cdn.onenote.net','candycrushsoda.king.com','evoke-windowsservices-tas.msedge.net','wallet.microsoft.com','mediaredirect.microsoft.com','int.whiteboard.microsoft.com','wbd.ms','whiteboard.microsoft.com','whiteboard.ms','wd-prod-fe.cloudapp.azure.com','ris-prod-atm.trafficmanager.net','validation-v2.sls.trafficmanager.net','co4.telecommand.telemetry.microsoft.com','maps.windows.com','login.msa.akadns6.net','us.configsvc1.live.com.akadns.net','iecvlist.microsoft.com','go.microsoft.com','www.microsoft.com','exo-ring.msedge.net','fp.msedge.net','fp-vp.azureedge.net','odinvzc.azureedge.net','spo-ring.msedge.net','login.live.com','dmd.metaservices.microsoft.com','v10.events.data.microsoft.com','v10.vortex-win.data.microsoft.com','www.microsoft.com','cs11.wpc.v0cdn.net','smartscreen-sn3p.smartscreen.microsoft.com','unitedstates.smartscreen-prod.microsoft.com','storecatalogrevocation.storequality.microsoft.com','img-prod-cms-rt-microsoft-com','pti.store.microsoft.com','storeedgefd.dsx.mp.microsoft.com','markets.books.microsoft.com','share.microsoft.com','www.msftconnecttest.com','store-images.microsoft.com','cs1137.wpc.gammacdn.net','modern.watson.data.microsoft.com','watson.telemetry.microsoft.com','licensing.mp.microsoft.com','inference.location.live.net','location-inference-westus.cloudapp.net','www.bing.com','ctldl.windowsupdate.com','msagfx.live.com','oneclient.sfx.ms','windows.policies.live.net','cy2.settings.data.microsoft.com.akadns.net','settings.data.microsoft.com','settings-win.data.microsoft.com','browser.pipe.aria.microsoft.com','config.edge.skype.com','s2s.config.skype.com','skypeecs-prod-usw-0-b.cloudapp.net','wdcp.microsoft.com','definitionupdates.microsoft.com','go.microsoft.com','nexusrules.officeapps.live.com','ocos-office365-s2s.msedge.net','officeclient.microsoft.com','outlook.office365.com','client-office365-tas.msedge.net','www.office.com','onecollector.cloudapp.aria','v10.events.data.microsoft.com','self.events.data.microsoft.com','to-do.microsoft.com']

        if sitename in fixeddomains: return True

        fixed_regex=['(^|\.)(msauth|gfx|onestore|office|officeapps\.live|teams\.microsoft|smartscreen\.microsoft)\.(net|com|ms)$',
                     'microsoft-[a-z\.]+\.akamaized.net$','g\.akamaiedge\.net','\.wns\.windows\.com',
                     '\.md\.mp\.microsoft\.com','displaycatalog\.mp\.microsoft\.com','\.c-msedge\.net','\.e-msedge\.net',
                      'smartscreen\.microsoft\.com','\.search\.msn\.com','arc\.msn\.com','g\.msn\.com',
                     'query\.prod\.cms\.rt\.microsoft\.com','ris\.api\.iris\.microsoft\.com','\.prod\.do\.dsp\.mp\.microsoft\.com','emdl\.ws\.microsoft\.com','\.dl\.delivery\.mp\.microsoft\.com','\.windowsupdate\.com','\.delivery\.mp\.microsoft\.com',
                     '\.update\.microsoft\.com',
                     '(^|\.)(windows|s-msedge)\.net$',
                     '(^|\.)(office|msftstatic|sharepoint|azure)\.com$'
                     ]
        for regex in fixed_regex:
            matches = re.search(regex, sitename)
            if matches: return True

        return False




    def regex_maps(self,sitename):
        if sitename == "maps.google.com": return True
        if sitename == "maps.gstatic.com": return True
        if sitename == "khmdb0.google.com": return True
        if sitename == "khmdb0.googleapis.com": return True
        if sitename == "khmdb1.google.com": return True
        if sitename == "khmdb1.googleapis.com": return True
        if sitename == "khm.google.com": return True
        if sitename == "khm.googleapis.com": return True
        if sitename == "khm0.google.com": return True
        if sitename == "khm0.googleapis.com": return True
        if sitename == "khm1.google.com": return True
        if sitename == "khm1.googleapis.com": return True
        if sitename == "khms0.google.com": return True
        if sitename == "khms0.googleapis.com": return True
        if sitename == "khms1.google.com": return True
        if sitename == "khms1.googleapis.com": return True
        if sitename == "khms2.google.com": return True
        if sitename == "khms2.googleapis.com": return True
        if sitename == "khms3.google.com": return True
        if sitename == "khms3.googleapis.com": return True

    def regex_google(self,sitename):
        inarray=['edgedl.me.gvt1.com','encrypted-tbn0.gstatic.com','www.google.ch','google.ch','www.google.fr","inbox.google.com','sb-ssl.google.com','connectivitycheck.gstatic.com',
                 'crl.pki.goog','mts0.google.com','www.google.com.au','aa.google.com','developers.google.com','cloud.google.com',
                 'gstatic.com','drive-thirdparty.googleusercontent.com','mail-attachment.googleusercontent.com','calendar.google.com',
                 '0.docs.google.com','google.com','meet.google.com','mail.google.com','26.client-channel.google.com',
                 '0.client-channel.google.com','fundingchoicesmessages.google.com','www.gstatic.com','safebrowsing.google.com',
                 'drive.google.com','dl.google.com','docs.google.com','ogs.google.com','fonts.gstatic.com','chat.google.com',
                 'apis.google.com','contacts.google.com','hangouts.google.com','ssl.gstatic.com','www.google.com',
                 'suggestqueries.google.com','namebench.googlecode.com','tools.google.com','ocsp.pki.goog','mtalk.google.com',
                 'id.google.com','play.google.com','lh5.googleusercontent.com','lh1.google.com','lh2.google.com','lh3.google.com',
                 'lh4.googleusercontent.com','lh3.googleusercontent.com','lh2.googleusercontent.com','lh1.googleusercontent.com',
                 'accounts.google.com','ci1.googleusercontent.com','ci2.googleusercontent.com','ci3.googleusercontent.com',
                 'ci4.googleusercontent.com','ci5.googleusercontent.com','ci6.googleusercontent.com','encrypted-tbn0.gstatic.com',
                 'safebrowsing.googleapis.com','clients1.google.com','clients2.google.com','clients3.google.com','clients4.google.com']

        if sitename in inarray: return True

        matches = re.search('www\.google\.[a-z]+$', sitename)
        if matches: return True
        matches = re.search('\.goog$', sitename)
        if matches: return True

        matches = re.search('encrypted-.*?\.gstatic\.com$', sitename)
        if matches: return True

        matches = re.search('v[0-9]\.metric\.gstatic\.com$', sitename)
        if matches: return True

        matches = re.search('(\.|^)notebooks\.googleusercontent\.com$', sitename)
        if matches: return True

        matches = re.search('(\.|^)(googlebot|googleapis|gexperiments[0-9]+)\.(com|org)$', sitename)
        if matches: return True
        matches = re.search('(\.|^)(clients[0-9]+|docs)\.google\.[a-z]+$', sitename)
        if matches: return True
        return False


    def regex_society(self,sitename):
        patterns = ['(^|\.)sapo\.(pt|io)$',
                       '(^|\.)senscritique\.com$'
                       ]

        return self.regex_engines(patterns, sitename)


    def regex_travel(self,sitename):
        # Travel

        patterns = ['(^|\.)civitatis\.com$',
                       '(^|\.)tripadvisor\.(com|ch|net)$',
                    '(^|\.)(generationvoyage|easyvoyage\.(fr|com)'
                       ]

        return self.regex_engines(patterns, sitename)


    def regex_streaming(self,sitename):
        # Movies and streaming
        fixed=['disney.connections.edge.bamgrid.com']
        if sitename in fixed: return True

        patterns = ['(^|\.)(mediastre|mdstrm|nflxvideo|netflix|allocine|plex|amazonvideo|tvcine)\.[a-z]+$',
                    '(^|\.)(swarm)\.video$',
                    '(^|\.)one-piece-streaming-(.*?)\.com$',
                    '(^|\.)cammedia\.com$'
                    ]
        return self.regex_engines(patterns, sitename)
        #

    def regex_wellness(self,sitename):

        patterns=['(^|\.)(advideum)\.com$' ]
        return self.regex_engines(patterns,sitename)

    def regex_web_applications(self,sitename):
        # Web Applications 151 ctfassets.net
        patterns = ['(^|\.)(webex|beetween|qauditor|trello|trellocdn|firebaseio|clickup|myworkday|myworkdaycdn|lifesizecloud)\.com$',
                    '(^|\.)(trello)\.services$',
                    '(^|\.)ipify\.org$',
                    '(^|\.)ccmp\.eu$',
                    '(^|\.)sirh-saas\.fr$',
                    '(^|\.)matequiz\.com$',

                    ]
        return self.regex_engines(patterns, sitename)

    def regex_ipaddr(self,sitename):
        start_time = time.time()
        matches = re.search('^[0-9\.]+$', sitename)
        if not matches: return False

        try:
            self.category_id = self.categorize_ip(unicode(sitename))
            self.local_cache[sitename] = self.category_id
        except:
            self.xsyslog("ERROR, categorize_ip [%s] -> [%s]" % (sitename, tb.format_exc()))
            return True
        return True


    def get_category_fixed(self,sitename=""):
        start_time=time.time()
        self.category_id=0
        if len(str(sitename))==0: return 0
        func="get_category_fixed"
        allext="(biz|co.kr|com|com.akadns.net|co.nz|co.uk|de|dk|es|fi|fr|gr|it|jp|kr|mobi|no|pt|sg|tk|tw|vn)"
        if sitename in self.local_cache: return self.local_cache[sitename]
        if sitename in self.not_calculated: return 0
        if self.regex_ipaddr(sitename): return self.category_id

        if self.regex_updatesite(sitename):
            self.local_cache[sitename] = 147
            return 147

        if self.regex_tracker(sitename):
            self.local_cache[sitename] = 143
            return 143

        if self.regex_weather(sitename):
            self.local_cache[sitename] = 127
            return 127

        if self.regex_maps(sitename):
            self.local_cache[sitename] = 94
            return 94

        if self.regex_apple(sitename):
            self.local_cache[sitename] = 18
            return 18

        if self.regex_travel(sitename):
            self.local_cache[sitename] = 119
            return 119

        if self.regex_wellness(sitename):
            self.local_cache[sitename] = 120
            return 120

        if self.regex_web_applications(sitename):
            self.local_cache[sitename] = 151
            return 151

        if self.regex_society(sitename):
            self.local_cache[sitename] = 3
            return 3

        if self.regex_streaming(sitename):
            self.local_cache[sitename] = 100
            return 100

        if self.regex_doh_dns(sitename):
            self.local_cache[sitename] = 237
            return 237

        if self.regex_advertising(sitename):
            self.local_cache[sitename] = 5
            return 5


        if self.regex_porn(sitename):
            self.local_cache[sitename] = 109
            return 109

        if self.regex_microsoft(sitename):
            self.local_cache[sitename] = 2
            return 2

        if self.regex_associations(sitename):
            self.local_cache[sitename] = 13
            return 13

        if self.regex_clothing(sitename):
            self.local_cache[sitename] = 37
            return 37


        if  self.regex_sciences(sitename):
            self.local_cache[sitename] = 124
            return 124

        #Book
        matches = re.search('(^|\.)(scribd|scribdassets)\.com$', sitename)
        if matches:
            self.local_cache[sitename] = 31
            return 31

        # Cleaning
        cleaning=["ds.kaspersky.com","amcore.rest.gti.mcafee.com","lc.mcafee.com",
                  "simulate.activation-v2.kaspersky.com"]
        if sitename in cleaning:
            self.local_cache[sitename] = 36
            return 36

        #chat 34
        matches = re.search('(^|\.)(whatsapp|snapchat)\.(net|com)$', sitename)
        if matches:
            self.local_cache[sitename] = 34
            return 34

        #cars
        matches = re.search('(^|\.)(macadam)\.(eu|net)$',sitename)
        if matches:
            self.local_cache[sitename] = 27
            return 27



        #Yahoo
        matches = re.search('(^|\.)yahoo\.(com|co\.jp)', sitename)
        if matches:
            self.local_cache[sitename] = 21
            return 21




        # Pictures Library
        matches = re.search('(^|\.)(giphy|emojiterra|albumdecoloriages|shutterstock)\.com$', sitename)
        if matches:
            self.local_cache[sitename] = 107
            return 107

        # Mailing
        matches = re.search('(^|\.)sibautomation\.com$', sitename)
        if matches:
            self.local_cache[sitename] = 91
            return 91

        # SSL Sites
        matches = re.search('(^|\.)(msocsp|globalsign|rapidssl|lencr|usertrust|digicert|sectigo|thawte|comodoca|amazontrust|geotrust|ocsp-responder)\.(com|org)$', sitename)
        if matches:
            self.local_cache[sitename] = 136
            return 136
        matches = re.search('^(crl|ocsp)\.(apple|gandi|godaddy|microsoft|netsolssl|register|startssl|trust-provider|trustwave)\.(com|net)$', sitename)
        if matches:
            self.local_cache[sitename] = 136
            return 136



        if self.regex_spywares(sitename):
            self.local_cache[sitename] = 135
            return 135
        if self.regex_malwares(sitename):
            self.local_cache[sitename] = 92
            return 92

        if self.regex_translators(sitename):
            self.local_cache[sitename] = 144
            return 144
        if self.regex_games(sitename):
            self.local_cache[sitename] = 58
            return 58

        if self.regex_audio_video(sitename):
            self.local_cache[sitename] = 15
            return 15

        if self.regex_school(sitename):
            self.local_cache[sitename] = 115
            return 115

        if self.regex_shopping(sitename):
            self.local_cache[sitename] = 8
            return 8
        if self.regex_health(sitename):
            self.local_cache[sitename] = 66
            return 66
        if self.regex_hospitals(sitename):
            self.local_cache[sitename] = 74
            return 74


        
        if self.regex_medical(sitename):
            self.local_cache[sitename] = 96
            return 96
        if self.regex_chemistry(sitename):
            self.local_cache[sitename] = 128
            return 128

        if self.regex_science_computing(sitename):
            self.local_cache[sitename] = 126
            return 126

        if self.regex_smallads(sitename):
            self.local_cache[sitename] = 133
            return 133

        if self.regex_social_net(sitename):
            self.local_cache[sitename] = 134
            return 134
        if self.regex_web_plugins(sitename):
            self.local_cache[sitename] = 154
            return 154
        if self.regex_google(sitename):
            self.local_cache[sitename] = 17
            return 17

        if self.regex_dictionnary(sitename):
            self.local_cache[sitename] = 43
            return 43

        if self.regex_webradio(sitename):
            self.local_cache[sitename] = 155
            return 155
        if self.regex_learning(sitename):
            self.local_cache[sitename] = 88
            return 88

        if self.regex_electronic_house(sitename):
            self.local_cache[sitename] = 48
            return 48


        if self.regex_news(sitename):
            self.local_cache[sitename] = 103
            return 103


        # c.s-microsoft.com

        matches = re.search('(^|\.)algolia\.(com|fr|io|net)$', sitename)
        if matches:
            self.local_cache[sitename] = 129
            return 129

        if sitename == "bing.com":
            self.local_cache[sitename] = 129
            return 129
        if sitename == "www.bing.com":
            self.local_cache[sitename] = 129
            return 129




        #governements
        matches = re.search('(^|\.)(gouv.fr|govt\.nz|gov|gouv\.qc\.ca)$', sitename)
        if matches:
            self.local_cache[sitename] = 62
            return 62

        matches = re.search('(^|\.)ipma\.pt$', sitename)
        if matches:
            self.local_cache[sitename] = 62
            return 62

        # marketingware

        matches = re.search('(^|\.)hubspot\.com$', sitename)
        if matches:
            self.local_cache[sitename] = 95
            return 95




        #Amazon
        matches = re.search('(^|\.)(keepa|amazonaws|media-amazon)\.com$',sitename)
        if matches:
            self.local_cache[sitename] = 19
            return 19

        if sitename=='amazon.ssl':
            self.local_cache[sitename] = 19
            return 19

        #Yahoo
        if sitename == "s.yimg.com":
            self.local_cache[sitename] = 21
            return 21

        #Search Engine
        if sitename == "www.msn.com":
            self.local_cache[sitename] = 129
            return 129



        matches = re.search('msn-[a-z]+\.akamaized.net', sitename)
        if matches:
            self.local_cache[sitename] = 129
            return 129

        #images Hosting:
        matches = re.search('(^|\.)(woopic|imgur|imgix)\.(com|net)$', sitename)
        if matches:
            self.local_cache[sitename] = 80
            return 80

        # remote-control 123
        matches = re.search('(^|\.)(anydesk|teamviewer|dyngate|goteleport)\.com$', sitename)
        if matches:
            self.local_cache[sitename] = 123
            return 123

        # fACEBOOK
        matches = re.search('(^|\.)(facebook|fbcdn|fbsbx)\.[a-z\.]+$', sitename)
        if matches:
            self.local_cache[sitename] = 1
            return 1

        matches = re.search('(^|\.)(youtube|ytimg|googlevideo)\.[a-z]+$', sitename)
        if matches:
            self.local_cache[sitename] = 16
            return 16

        # Blogs
        matches = re.search('(^|\.)(over-blog|over-blog-kiwi|weebly)\.[a-z]+$', sitename)
        if matches:
            self.local_cache[sitename] = 30
            return 30

        # Transport
        matches = re.search('(^|\.)(fedex|laposte)\.(fr|com)$', sitename)
        if matches:
            self.local_cache[sitename] = 145
            return 145


        # DOH


        # Browsers Plugins 32

        matches = re.search('(^|\.)mywot\.com$', sitename)
        if matches:
            self.local_cache[sitename] = 32
            return 32

        # redirector
        if sitename=="t.co":
            self.local_cache[sitename] = 121
            return 121

        matches = re.search('(\.|^)(fontawesome|jsdelivr)\.(com|net)$', sitename)
        if matches:
            self.local_cache[sitename] = 154
            return 154

        # Cleaning
        matches = re.search('(\.|^)(kaspersky|mustcheck|kaspersky-labs|kasperskylabs|avg|cylance)\.(com|net)',sitename)
        if matches:
            self.local_cache[sitename] = 36
            return 36


        # Web TV
        matches = re.search('(^|\.)(nbc|canal-plus|tf1|indiatvnews)\.(com|fr)$',sitename)
        if matches:
            self.local_cache[sitename] = 156
            return 156

        matches = re.search('(^|\.)canalplus\.pro$',sitename)
        if matches:
            self.local_cache[sitename] = 156
            return 156


        #Internal
        matches = re.search('\.(vm|local|lan|intranet|internal|private|corp|home|lan|touzeau\.maison|localdomain)$',sitename)
        if matches:
            self.local_cache[sitename] = 82
            return 82

        matches = re.search('(\.|^)dzblb\.it$',sitename)
        if matches:
            self.local_cache[sitename] = 82
            return 82



        matches = re.search('(\.|^)(msn|onedrive|office365|office|onenote|sfx|live|msedge|azureedge|windows)\.[a-z]+$',sitename)
        if matches:
            self.local_cache[sitename] = 2
            return 2


        matches = re.search('(\.|^)(squarespace|synten|jimstatic|parastorage|squarespace-cdn|website-files|webflow|jimcdn|wixstatic|herokuapp)\.com$',sitename)
        if matches:
            self.local_cache[sitename] = 83
            return 83

        matches = re.search('(\.|^)ovh\.(fr|de|br|es|pl|com|net|cloud)$',sitename)
        if matches:
            self.local_cache[sitename] = 83
            return 83

        matches = re.search('(\.|^)fastly\.net$',sitename)
        if matches:
            self.local_cache[sitename] = 83
            return 83



        # Phishing
        matches = re.search('(\.|^)(firmwaresafe|soundestlink)\.(com|ru)$', sitename)
        if matches:
            self.local_cache[sitename] = 105
            return 105

        # FileHosting
        matches = re.search('\.(slideshare|llnwd)\.net$',sitename)
        if matches:
            self.local_cache[sitename] = 49
            return 49

        matches = re.search('\.(wetransfer)\.com$',sitename)
        if matches:
            self.local_cache[sitename] = 49
            return 49

        # Amazon
        matches = re.search('(\.|^)(cloudfront|amazontrust|amazonalexa)\.(net|com)$', sitename)
        if matches:
            self.local_cache[sitename] = 19
            return 19

        matches = re.search('(^|\.)(socgen|bnpparisbas|stripe|paypal|boursorama|pbebank|bankersalmanac)\.[a-z]+$', sitename)
        if matches:
            self.local_cache[sitename] = 50
            return 50

        matches = re.search('\.bnpparibas$', sitename)
        if matches:
            self.local_cache[sitename] = 50
            return 50

        matches = re.search('(^|\.)maybank2u\.com\.my$', sitename)
        if matches:
            self.local_cache[sitename] = 50
            return 50

        matches = re.search('(^|\.)(grouponcdn|groupondata|groupon|fnac)\.[a-z]+$', sitename)
        if matches:
            self.local_cache[sitename] = 8
            return 8

        matches = re.search('(^|\.)(linkedin|licdn|instagram|qzone\.qq|myspace|weibo|reddit|pinterest|flickr|staticflickr|slideflickr)\.[a-z]+$', sitename)
        if matches:
            self.local_cache[sitename] = 134
            return 134

        matches = re.search('(^|\.)(playbattlegrounds|playstation|ubi|king|xboxlive)\.(com|net)$', sitename)
        if matches:
            self.local_cache[sitename] = 58
            return 58



        #Webmails
        matches = re.search('(^|\.)(mail[0-9]+\.orange|hotmail|mailinblack)\.[0-9]+$', sitename)
        if matches:
            self.local_cache[sitename] = 152
            return 152

        matches = re.search('^webmail\..*?\.(fr|com|net|be|pl|co\.uk|es|pt|com\.br|de|it|nl)$',sitename)
        if matches:
            self.local_cache[sitename] = 152
            return 152
        

        matches = re.search('(^|\.)(digitaloceanspaces|digitaloceanspace|digitaloceanmirrors|digitalocean|digitaloceanllc|zerointellect)\.(com|net)$', sitename)
        if matches:
            self.local_cache[sitename] = 230
            return 230

        matches = re.search("(^|\.)(cloudfront|cloudflare|godaddy)\.(net|com)$", sitename)
        if matches:
            self.local_cache[sitename] = 234
            return 234

        matches = re.search("#(^|\.)(cloudflare|cloudflare-dns|cloudflare-ipfs)\.[a-z]+$#", sitename)
        if matches:
            self.local_cache[sitename] = 234
            return 234

        matches = re.search("(^|\.)(lastpass|bitwarden)\.com$", sitename)
        if matches:
            self.local_cache[sitename] = 104
            return 104

        matches = re.search("(^|\.)bootstrapcdn\.com$", sitename)
        if matches:
            self.local_cache[sitename] = 154
            return 154

        matches = re.search("(^|\.)teamviewer\.com$", sitename)
        if matches:
            self.local_cache[sitename] = 123
            return 123


        matches = re.search("(^|\.)(wikipedia|wikimedia)\.(com|org)$", sitename)
        if matches:
            self.local_cache[sitename] = 43
            return 43

        matches = re.search("(^|\.)gravatar\.(com|org)$", sitename)
        if matches:
            self.local_cache[sitename] = 107
            return 107

        matches = re.search('(^|\.)sante\.fr', sitename)
        if matches:
            self.local_cache[sitename] = 66
            return 66

        matches = re.search("(^|\.)virtualearth\.net", sitename)
        if matches:
            self.local_cache[sitename] = 94
            return 94

        matches = re.search("(^|\.)(dropbox|getdropbox|dropboxapi)\.com", sitename)
        if matches:
            self.local_cache[sitename] = 49
            return 49



        # Downloads
        matches = re.search('(^|\.)utorrent\.com$', sitename)
        if matches:
            self.local_cache[sitename] = 44
            return 44

        matches = re.search("(^|\.)e-i\.com", sitename)
        if matches:
            self.local_cache[sitename] = 55
            return 55



        matches = re.search("(^|\.)amazon\.(com|fr|pl|es|pt|de|cz|co\.uk|be|in|com\.br|it|ro|ru|tr)$", sitename)
        if matches:
            self.local_cache[sitename] = 19
            return 19





        matches = re.search('(^|\.)(signal)\.org', sitename)
        if matches:
            self.local_cache[sitename] = 153
            return 153


        # Industry
        matches = re.search('(^|\.)(|coloro|lawer|veritas)\.com$',sitename)
        if matches:
            self.local_cache[sitename] = 81
            return 81
        matches = re.search('(^|\.)intema-sas\.it$',sitename)
        if matches:
            self.local_cache[sitename] = 81
            return 81


        matches = re.search('(^|\.)(nflxvideo|netflix|allocine|plex)\.[a-z]+$',sitename)
        if matches:
            self.local_cache[sitename] = 100
            return 100

        #skype
        if sitename == "g.live.com": return 22
        matches = re.search("(^|\.)(messenger\.live|skype|skypeassets)\.com$", sitename)
        if matches:
            self.local_cache[sitename] = 22
            return 22

        # Microsoft
        matches = re.search("(^|\.)(live|office365|microsoft)\.com$", sitename)
        if matches:
            self.local_cache[sitename] = 2
            return 2
        matches = re.search("microsoft-[a-z\.]+]\.akamaized\.net$", sitename)
        if matches:
            self.local_cache[sitename] = 2
            return 2



        #music
        matches = re.search('(^|\.)(spotify|deezer)\.com$', sitename)
        if matches:
            self.local_cache[sitename] = 101
            return 101
        matches = re.search("spotify-com\.akamaized.net", sitename)
        if matches:
            self.local_cache[sitename] = 101
            return 101

        #Akamai
        matches = re.search('\.akamaihd.net$', sitename)
        if matches:
            self.local_cache[sitename] = 20
            return 20


        self.not_calculated[sitename]=True

        if self.logqueries == 1:
            duration = self.mem.TimeExec(start_time)
            self.xsyslog("[%s]: get_category_fixed:: NOT FOUND  -> [%s]s" % (sitename, duration))
        if self.debug: self.ilog(self.get_linenumber(), func, "NOT FOUND : %s" % (sitename))
        return 0


    def regex_tracker(self,sitename):
        func = "regex_tracker"


        infixed=['log.bntrace.com','asimov-win.vortex.data.trafficmanager.net','static.leaddyno.com','secure.leadforensics.com','ingestion.contentinsights.com','dmc.devatics.io','api.devatics.io','alb.reddit.com','static.hotjar.com','js.hs-scripts.com','mc.yandex.ru','measurements-api.wonderpush.com','trends.revcontent.com','cmp.uniconsent.com','smetrics.aem.playstation.com','telemetry.api.playstation.com','assets.customer.io','analytics.similarweb.com','api.gameanalytics.com','btloader.com','alb.reddit.com','direct-events-collector.spot.im',
                 'events-collector.spot.im','metrics-logger.spot.im','pix.spot.im','app.shopimind.co','cdn.bizible.com','cdn.foxpush.net','cdn.liftoff.io ','cdn.mouseflow.com','clarium.global.ssl.fastly.net','hits-i.iubenda.com','i.compendium.com','img.sedoparking.com','leetchi-1.leadsmonitor.io','o.actio.systems','parking.parklogic.com','pixel.wp.com','seal.digicert.com','secure.statcounter.com','sedoparking.com','sspapi-prd.samsungrs.com','p.cquotient.com','cdn.early-birds.fr','currency.prebid.org','100035579.collect.igodigital.com',
                 'vast.adsafeprotected.com','script.crazyegg.com','mscom.demdex.net','trk-consulatu.com','serverside3967.tagcommander.com','wikia-d.openx.net','a-fds.youborafds01.com','100035578.collect.igodigital.com','siteimproveanalytics.com','mm.eulerian.net','pbjs.sskzlabs.com','analytics.pagefly.io','metrics-broker.prod.p.tf1.fr','collector-11896.tvsquared.com','js.srvtrck.com','scripts.static-od.com','beacon.wikia-services.com','www.youvisit.com','image8.pubmatic.com','api.company-target.com','cdn.adsafeprotected.com','infinity-c1.youboranqs01.com',
                 's2s.adjust.com','cdn.bizible.com','beacon.riskified.com','hbopenbid.pubmatic.com','api.ipdata.co','cdn.krxd.net','pixel.wp.com','settings.luckyorange.net','api.segment.io','analytics.similarweb.com','analytics.plex.tv','piwik.ubuntu-fr.org','static.cloudflareinsights.com','freestar-io.videoplayerhub.com','api.wonderpush.com','api.realytics.io','beam.hubvisor.io','bvubje.leboncoin.fr','eule1.pmu.fr','elr.sfr.fr','dmxleo.dailymotion.com','collector.githubapp.com','stats.g.doubleclick.net','beacons.gcp.gvt2.com','beacons.gvt2.com','beacons4.gvt2.com','beacons5.gvt2.com',
                 'beacons3.gvt2.com','beacons2.gvt2.com','beacons1.gvt2.com','e2clock.gcp.gvt2.com','s.go-mpulse.net','g.live.com1','sc-static.net','cdp.cloud.unity3d.com','id.rlcdn.com','dynamic.criteo.com','pixel.quantserve.com','rules.quantcount.com','stat.glaze.ai','manager.tagcommander.com','tr.cloud-media.fr','smetrics.fnac.com','api.early-birds.fr','config.uca.cloud.unity3d.com','app-analytics-v2.snapchat.com','pk8n57.fnac.com','prd.jwpltx.com','www.clarity.ms','www.dwin1.com','eultech.fnac.com','static.mediarithmics.com','www.googleoptimize.com','p.typekit.net','spotify.demdex.net',
                 'static.cloudflareinsights.com','kinesis.us-east-1.amazonaws.com','analyticsnew.overwolf.com','referrer.disqus.com','dit.whatsapp.net','log16-normal-c-useast1a.tiktokv.com','referrer.disqus.com','analytics.tiktok.com','log.pinterest.com','mcs-va.tiktok.com','mcs-va.tiktokv.com','static.criteo.net','stats.wp.com','t.cfjump.com','t.contentsquare.net','t.paypal.com','tags.expo9.exponential.com','tags.w55c.net','track.hubspot.com','track.mailerlite.com','w.usabilla.com','widget.trustpilot.com','www.fastly-insights.com','www.rtb123.com','www.statcounter.com','affiliate.kinguin.net',
                 'analytics.tiktok.com','auth.estat.com','az416426.vo.msecnd.net','beacons5.gvt3.com','e2clock.gcp.gvt2.com','cdp.cloud.unity3d.com','config.uca.cloud.unity3d.com','perf-events.cloud.unity3d.com','c.contentsquare.net','cdn-eu.pagesense.io','cdn-eu.realytics.net','cdn.popt.in','cdn.ravelin.net','cdn.ywxi.net','cdn5.userzoom.com','collector.githubapp.com','contextual.media.net','dpm.demdex.net','i.realytics.io','log.outbrainimg.com','metrics.api.drift.com','mobile.eum-appdynamics.com','notes-analytics-events.apple.com','referrer.disqus.com','io.narrative.io','cdn.snigelweb.com',
                 'ejp.rlcdn.com','live.rezync.com','aa.agkn.com','config.seedtag.com','log.pinterest.com','metrics.icloud.com','analytics.valiuz.com','control.kochava.com','engage.commander1.com','events.mapbox.com','ib.isappcloud.com','analytics.shareaholic.com','reporting.aatkit.com','tracking.aatkit.com','analytics.valiuz.com','ms.applovin.com','sc.smardroid.com','cdn.funnelytics.io','cachecache.commander1.com','cdn.liftoff.io','lb.analytics.advalo.com','metrics.brightcove.com',
                 'websdk.accengage.net','nxtck.com','privacy.commander1.com','ws.facil-iti.com','log.affiliate.rakuten.co.jp','log.cribnotes.jp',
                 'ups.analytics.yahoo.com','incoming.telemetry.mozilla.org','spl.zeotap.com','appnexus-partners.tremorhub.com','btlr.sharethrough.com','track1.aniview.com','pre.ads.justpremium.com',
                 'wu-bg-shim.trafficmanager.net','api-notification-service.pdfarchitect.org','ic3.events.data.microsoft.com'

        ]
        if sitename in infixed: return True;

        inarray=['perf.hsforms.com','polka.typekit.com','notify.adobe.io','informer.yandex.ru','web.vortex.data.microsoft.com',
                 'web.vortex.data.msn.com','web.vortex-sandbox.data.msn.com','browser.events.data.microsoft.com','sb.scorecardresearch.com',
                 'pixel.quantserve.com','app.alertme.news','pixel.rubiconproject.com','token.rubiconproject.com','js-agent.newrelic.com',
                 'stats.wp.com','vars.hotjar.com','www.googletagservices.com','counter.yadro.ru','www.wysistat.com','rum-collector.pingdom.net',
                 'rum-static.pingdom.net','cdn.appconsent.io','api.taboola.com','gc.zgo.at','analytics.yahoo.co','b0.yahoo.co.jp',
                 'b90.yahoo.co.jp','b91.yahoo.co.jp','b92.yahoo.co.jp','b97.yahoo.co.jp','dcs.yahoo.co.jp','geo.yahoo.com',
                 'logql.yahoo.co.jp','rd.yahoo.co.jp','visit.geocities.jp','ybx.yahoo.co.jp','log.uniconsent.com','trk.pshtrk.com',
                  'i.isnssdk.com','mon.isnssdk.com','img-1000736.ad-score.com','api.taboola.com','e2c15.gcp.gvt2.com','cdn.hubvisor.io',
                 't.ocmhood.com','sibautomation.com','pad-v3.presage.io','player-telemetry.vimeo.com','	s2.statsupdate.microsoft.com.nsatc.net'

                 ]

        if sitename in inarray: return True

        if sitename in self.trackers_dst:
            if self.TheShieldLogDNSQ == 1:
                self.xsyslog("%s [CACHED] matches trackers_dst database" % sitename)
            self.ilog(self.get_linenumber(),func,"%s matches in trackers_dst dic" % sitename)
            return True

        allext = "(biz|co.kr|com|com.akadns.net|co.nz|co.uk|de|dk|es|fi|fr|gr|it|jp|kr|mobi|no|pt|sg|tk|tw|vn)"
        patterns = ['(^|\.)(mkt[0-9]+|crashlytics|app-measurement|goatcounter|voluumtrk|appnexus|flurry|mediarithmics|cedexis|gigya|amplitude|weborama|helpshift|outbrain|zemanta|teads|newrelic|acpm|mediego|googletagmanager|onesignal|walkme|cedexis-radar)\.(com|fr|tv|net)$',
                    '(\.|^)(demdex|themoneytizer|2o7|go-mpulse|webtrekk|wt-eu02)\.net$',
                    '(\.|^)(dotomi|splicky|richaudience|chartbeat|commander1|id5-sync|tagcommander|trk-consulatu|onetrust|ghostery|heapanalytics|asnapieu)\.(com|net)$',
                    '(\.|^)(optimizely|histats|trafficmotor|crazyegg|crazyeggcdn|letsgoconvert|pbstck|armalytics)\.com$',
                    '(\.|^)(4dex|hubvisor|akstat|realytics)\.io$',
                    '(\.|^)keywee\.co$',
                    '(\.|^)(youboranqs[0-9]+|y-track)\.com$'
                    '(\.|^)(perimeterx|appmetrica\.yandex|conductrics|hs-analytics|trafficmanager|nsatc)\.net$',
                    '(\.|^)metric\.gstatic\.com$'
                    '(\.|^)cookielaw\.org$',
                    '[0-9]+\.gcp\.gvt2\.com$',
                    '(\.|^)comasoiling\.casa$',
                    '(\.|^)[0-9]+-trk-srv\.com$',
                    '^(smetrics|adbsmetrics|adbmetrics|adobeanalytics|analytic|analytics|tracking)\.',
                    '(\.|^)log[0-9]+-normal-useast1a\.tiktokv\.com$',
                    '(\.|^)(leadsmonitor|meetrics|online-metrix)\.(io|net)$',
                    '-tpl[0-9]+\.kameleoon\.(com|eu)$',
                    'logs\.datadoghq\.eu$',
                    '(^|\.)tracker\.adotmob\.com$',
                    '(^|\.)marketingautomation\.services$',
                    '(^|\.)(getjad|event\.prod\.bidr|ingest\.sentry|axept)\.io$',
                    '(\.|^)(nxtck|collect\.igodigital|youvisit|xiti|avantisvideo|bounceexchange|hyros)\.com$',
                    '(\.|^)(footprintdns|r66net|stats.avast|bf\.dynatrace|mobileapptracking|devatics|adnxs|addthis|marketo|kameleoon)\.(com|io|ru|eu)',
                    '(^|\.)(stackpathdns|google-analytics|dwin2|appsflyer|criteo|estat|alexametrics|omnitagjs|adlooxtracking|imrworldwide)\.(com|io|net|org)$',
                    '(^|\.)(actonservice|gigya-api|wpengine\.netdna-cdn|ibytedtos|tailtarget|audiencerun|prismamedia)\.com$'
                    '(^|\.)(analytics-ua[0-9]+|inforsea|lijit|inmoment|usemessages)\.com$',
                    '(^|\.)(eulerian|euleriancdn)\.(net|com)$',
                    '(\.|^)analytics.yahoo\.%s' % allext]

        return self.regex_engines(patterns, sitename)

    def regex_smallads(self,sitename):
        patterns = ['(\.|^)(leboncoin|secondemain|ebay)\.fr$',
                    '(\.|^)ebay\.(co|cn|in|com|pl|cz|om|it|at|fr)$',
                    '(\.|^)(ebayexpress|ebayexpress|ebayshop|ebayshops|ebaystores|adcommerce)\.(co|cn|in|com|pl|cz|om|it|at|fr)$'
                    ]
        return self.regex_engines(patterns, sitename)

    
    def regex_health(self,sitename):
        func = "regex_health"
        patterns = ['(\.|^)pourquoidocteur|santemagazine|doctolib\.(com|fr|ch)$',
                    '(\.|^)has-sante\.fr$'
                    ]

        for regex in patterns:
            try:

                matches = re.search(regex, sitename)
            except:
                self.log_query("ERROR REGEX ON : %s - %s" % (sitename, regex))
                self.ilog(self.get_linenumber(), func, "ERROR REGEX ON : %s - %s" % (sitename, regex))
                continue

            if matches:
                self.log_query("SUCCESS REGEX ON : %s - %s" % (sitename, regex))
                if self.debug: self.ilog(self.get_linenumber(), func, "FOUND : %s - %s" % (sitename, regex))
                return True
        return False

    def regex_weather(self,sitename):

        sitenames = ['tile-service.weather.microsoft.com']
        if sitename in sitenames: return True

        patterns = ['(^|\.)weather\.(microsoft|oppomobile)\.com$',
                    '(^|\.)weather-data.apple\.com$',
                    '(^|\.)weather\.com$'
                    ]

        return self.regex_engines(patterns, sitename)


    def regex_medical(self,sitename):
        func="regex_medical"


        patterns = ['(\.|^)(bio-rad|vulgaris-medical|vidaldelafamille|biogaran|homeophyto|afssaps|afssa)\.(com|fr|ch)$',
                    '(\.|^)edqm\.eu$'

                ]
        return self.regex_engines(patterns, sitename)

    def regex_updatesite(self,sitename):
        func = "regex_updatesite"

        sitenames=['update.veritas.com','repository.eset.com','mirrors.digitalocean.com','_http._tcp.deb.debian.org','update.eset.com',
                   '_http._tcp.security.debian.org','repository.eset.com','repositorynocdn.eset.com','ds.kaspersky.com','repository.gtm.eset.com',
                   'a.cwip.eset.com' ,'refresh-bkg.activation-v2.kaspersky.com','i5.cwip.eset.com','update.gtm.eset.com','nocdn-repository.gtm.eset.com',
                   'ae.cwip.eset.com' ,'avcloud.e5.sk' ,'c.cwip.eset.com' ,'ce.cwip.eset.com' ,'dnsj.e5.sk' ,'dnsje.e5.sk' ,'i1.cwip.eset.com' ,
                   'i1e.cwip.eset.com' ,'i3.cwip.eset.com' ,'i4.cwip.eset.com' ,'i4e.cwip.eset.com' ,'u.cwip.eset.com' ,'ue.cwip.eset.com' ,
                   'c.eset.com' ,'a.c.eset.com' ,'u.eset.com' ,'i1.c.eset.com' ,'i3.c.eset.com' ,'i4.c.eset.com' ,'i5.c.eset.com' ,
                   'h1-c01.eset.com' ,'h1-c02.eset.com' ,'h1-c03.eset.com' ,'h1-c04.eset.com' ,'h1-c05.eset.com' ,'h3-c01.eset.com' ,
                   'h3-c02.eset.com' ,'h3-c03.eset.com' ,'h3-c04.eset.com' ,'h5-c01.eset.com' ,'38-90-226-11.ptr.eset.com' ,'h5-c02.eset.com' ,
                   '38-90-226-12.ptr.eset.com' ,'h5-c03.eset.com' ,'38-90-226-13.ptr.eset.com' ,'sm09.eset.com' ,'tsm10.eset.com' ,'tsm11.eset.com',
                   'tsm12.eset.com' ,'tsm13.eset.com' ,'tsm14.eset.com' ,'tsm15.eset.com' ,'tsm16.eset.com' ,'tsm17.eset.com' ,
                   'ts.eset.com' ,'h1-arsp01-v.eset.com' ,'h1-arsp02-v.eset.com' ,'h3-arsp01-v.eset.com' ,'h3-arsp02-v.eset.com' ,
                   'h5-arsp01-v.eset.com' ,'h5-arsp02-v.eset.com' ,'h1-ars01-v.eset.com' ,'h1-ars02-v.eset.com' ,'h1-ars03-v.eset.com' ,
                   'h1-ars04-v.eset.com' ,'h1-ars05-v.eset.com' ,'h3-ars01-v.eset.com' ,'h3-ars02-v.eset.com' ,'h3-ars03-v.eset.com' ,
                   'h3-ars04-v.eset.com' ,'h3-ars05-v.eset.com' ,'h5-ars01-v.eset.com' ,'h5-ars02-v.eset.com' ,'h5-ars03-v.eset.com' ,
                   'h5-ars04-v.eset.com' ,'h5-ars05-v.eset.com' ,'ext-pwm.eset.com' ,'eset-870273198.eu-west-1.elb.amazonaws.com' ,
                   'esetpwmdata-1.s3.amazonaws.com' ,'s3-3-w.amazonaws.com' ,'dns.e5.sk' ,'salt.e5.sk' ,'rsys.e5.sk' ,'arb.e5.sk' ,
                   'asplog.e5.sk' ,'mri.e5.sk' ,'ipt.e5.sk' ,'sample.e5.sk' ,'stat.e5.sk' ,'setting.e5.sk' ,'gid.e5.sk' ,'edf.eset.com' ,'edf.eset.com',
                   'edf.eset.com' ,'edf.eset.com' ,'edf.eset.com' ,'h1-edfspy02-v.eset.com' ,'h1-edfspy02-v.eset.com' ,'h1-arse01-v.eset.com' ,
                   'h1-arse02-v.eset.com' ,'h3-arse01-v.eset.com' ,'h3-arse02-v.eset.com' ,'h5-arse01-v.eset.com' ,'h5-arse02-v.eset.com' ,'h5-arse03-v.eset.com' ,'h5-arse04-v.eset.com' ,'ecp.eset.systems' ,'ecp.eset.systems' ,'pns.eset.com' ,'h1-epnsbroker01.eset.com' ,'h1-epnsbroker02.eset.com' ,'h1-epnsbroker03.eset.com' ,'h1-epnsbroker04.eset.com' ,'h1-epnsbroker05.eset.com' ,'h1-epnsbroker06.eset.com' ,'h1-epnsbroker07.eset.com' ,'h3-epnsbroker01.eset.com' ,'h3-epnsbroker02.eset.com' ,'h3-epnsbroker03.eset.com' ,'h3-epnsbroker04.eset.com' ,'h3-epnsbroker05.eset.com' ,'h3-epnsbroker06.eset.com' ,'h3-epnsbroker07.eset.com' ,'h5-epnsbroker01.eset.com' ,'h5-epnsbroker02.eset.com' ,'h5-epnsbroker03.eset.com' ,'h5-epnsbroker04.eset.com' ,'h5-epnsbroker05.eset.com' ,'h5-epnsbroker06.eset.com' ,'h5-epnsbroker07.eset.com' ,'r.edtd.eset.com' ,'d.edtd.eset.com' ,'proxy.eset.com' ,'proxy.eset.com' ,'proxy.eset.com' ,'proxy.eset.com' ,'h1-weblb01-v.eset.com' ,'h3-weblb01-v.eset.com' ,'proxy-detection.eset.com' ,'um01.eset.com' ,'um02.eset.com' ,'um03.eset.com' ,'um04.eset.com' ,'um05.eset.com' ,'um06.eset.com' ,'um07.eset.com' ,'um08.eset.com' ,'um09.eset.com' ,'um10.eset.com' ,'um11.eset.com' ,'um12.eset.com' ,'um13.eset.com' ,
                   'um14.eset.com' ,'um15.eset.com' ,'um21.eset.com' ,'um23.eset.com' ,'um01.ru.eset.com' ,'um01.cn.eset.com' ,
                   'um16.eset.com','api.royalapps.com','telechargement.druide.com','canonical-lcy01.cdn.snapcraftcontent.com']

        if sitename in sitenames: return True

        patterns = ['(^|\.)(msftncsi|msftconnecttest|update\.nai|maxmind|armmf\.adobe|database\.clamav|delivery\.mp\.microsoft|windowsupdate)\.(com|net)$',
                    '(^|\.)(xdr|url|manage|mgcp|fbs25|xbc|icrc)\.trendmicro\.com$',
                    'osce[0-9]+-[a-z]+-census\.trendmicro\.com$',
                    '(^|\.)(cwip|tsm[0-9]+|um[0-9]+|ptr|c|)\.eset\.com$',
                    '(^|\.)(sophosxl|symantecliveupdate|upd\.kaspersky|ksn\.kaspersky-labs)\.com$',
                    '(^|\.)(deb\.debian|deb-multimedia|ports\.debian|ftp\.debian)\.org$',
                    '(^|\.)(archive|security|extras)\.ubuntu\.com$',
                    '(^|\.)42\.pl$']

        for regex in patterns:
            try:
                matches = re.search(regex, sitename)
            except:
                self.log_query("ERROR REGEX ON : %s - %s" % (sitename, regex))
                self.ilog(self.get_linenumber(), func, "ERROR REGEX ON : %s - %s" % (sitename, regex))
                continue

            if matches:
                if self.debug: self.ilog(self.get_linenumber(), func, "FOUND : %s - %s" % (sitename, regex))
                return True

        return False





    def regex_doh_dns(self,sitename):
        func="regex_doh_dns"
        sitenames=['x.dvr-ddns.com','dns.digitalsize.net','freedns.controld.com','dnsnl.alekberg.net','dnsforge.de','unicast.uncensoreddns.org','doh.libredns.gr','dns.aa.net.uk','dns.therifleman.name','dns.digitale-gesellschaft.ch'
                   'dns.circl.lu','dns.switch.ch','dns.twnic.tw','doh.tiar.app','doh.ffmuc.net','doh.sb','doh.mullvad.net','doh.crypto.sx','dns.njal.la','doh.post-factum.tk','dns.arapurayil.com','doh.bortzmeyer.fr']
        domains=['dvr-ddns.com','hdns.io','appliedprivacy.net','dnswarden.com','cleanbrowsing.org','dnsforfamily.com','dnscrypt.[a-z]+','dnshome.[a-z]+','hdns.io','yepdns.com','ahadns.net','blahdns.com','quad9.net','cloudflare-dns.com','adguard.com']


        if sitename in sitenames: return True

        for regex in domains:
            regex=regex.replace('.','\.')
            regex='(\.|^)%s' % regex
            try:
                matches = re.search(regex, sitename)
            except:
                self.log_query("ERROR REGEX ON : %s - %s" % (sitename, regex))
                self.ilog(self.get_linenumber(), func, "ERROR REGEX ON : %s - %s" % (sitename, regex))
                continue
            if matches:
                self.log_query("SUCCESS REGEX ON : %s - %s" % (sitename, regex))
                if self.debug: self.ilog(self.get_linenumber(), func, "FOUND : %s - %s" % (sitename, regex))
                return True
        return False




    def regex_chemistry(self,sitename):
        if sitename=="www.huberlab.ch": return True


    def regex_malwares(self,sitename):
        func = "regex_malwares"
        patterns = ['(\.|^)(puwpush|ezodn)\.com$',
                    '(\.|^)ahacdn\.me$',
                    '(\.|^)adsco\.re$',
                    ]

        return self.regex_engines(patterns,sitename)


    def regex_shopping(self,sitename):
        patterns = ['(\.|^)(exlibris|bauundhobby|coop|lyreco)\.(com|fr|ch)$',
                    '(\.|^)(alicdn|westfield)\.com$',
                    '(\.|^)bonprix\.fr$'
                    ]
        return self.regex_engines(patterns,sitename)


    def regex_school(self,sitename):
        patterns = ['(^|\.)(edupole|manuel-numerique)\.(net|com)$',
                    '(^|\.)kahoot.(it|com)',
                    '(^|\.)(univ-lyon[0-9]+|lelivrescolaire|logicieleducatif|cmath)\.fr$',
                    '(^|\.)ostralo\.net$',
                    '(^|\.)strosaire95\.org$',
                    '(^|\.)ac-versailles\.fr$',
                    ]

        return self.regex_engines(patterns, sitename)

    def regex_news(self,sitename):
        # News and Press lavoixdunord.fr (103)
        patterns = ['(^|\.)(latribune|lefigaro|lemonde|leparisien|lesechos|nouvelobs|liberation|mediapart|huffingtonpost|atlantico|cnn)\.(com|fr)$',
                    '(^|\.)(bbc|bbci)\.(com|co\.uk)$',
                    '(^|\.)(lavoixdunord|nytimes|info-flash)\.com$',
                    '(^|\.)(heise)\.de$',
                    '(^|\.)(record)\.pt$',
                    '(^|\.)(lemde|20mn)\.fr$',
                    '(^|\.)(euractiv|blogactiv)\.(fr|com|eu|de)$',
                    '^foxnews.*?\.akamaihd'
                    ]

        return self.regex_engines(patterns,sitename)

    def regex_webradio(self,sitename):
        #WebRadio
        patterns = ['(^|\.)(rtl2|rtl)\.fr$','(^|\.)rtp\.pt$'
        ]
        return self.regex_engines(patterns,sitename)

    def regex_learning(self,sitename):
        patterns = ['(^|\.)anglaisfacile\.com$',
                    '(^|\.)wallstreetenglish\.fr$',
                    '(^|\.)wallstreetenglishconsent\.cloudfunctions\.net$',
                    ]
        return self.regex_engines(patterns, sitename)

    def regex_electronic_house(self,sitename):
        patterns = ['(^|\.)(ring|mmechocaptiveportal)\.com$','(^|\.)samsungcloud\.tv$'
                    ]
        return self.regex_engines(patterns, sitename)

    def regex_web_plugins(self,sitename):
        fixed=['widget-mediator.zopim.com','maxcdn.bootstrapcdn.com','s0.wp.com','s1.wp.com','s2.wp.com','s3.wp.com','privacy.commander1.com','use.fortawesome.com']
        if sitename in fixed: return True

        func = "regex_web_plugins"
        patterns = ['(^|\.)(shopify|shopifycdn|shopifysvc|pusher|smartsupp|jquery|wp|uniconsent|sentry-cdn|bootstrapcdn)\.com$',
                    '(^|\.)langshop\.app$',
                    '(^|\.)xe\.live$',
                    '(^|\.)crisp\.chat$',
                    '(^|\.)(typekit|trustcommander)\.net$',
                    '(^|\.)(privacymanager|sentry)\.io$',
                    '(^|\.)(privacy-center|schemastore)\.org']

        return self.regex_engines(patterns, sitename)


    def regex_hospitals(self,sitename):
        patterns = ['(^|\.)(clinfile|hopital-foch)\.com$']
        if self.regex_engines(patterns, sitename): return True


    def regex_social_net(self,sitename):
        func = "regex_social_net"
        #Social Net
        inarray = ['cdn.syndication.twimg.com','realtime.www.linkedin.com','twitter.com','t.co','www.linkedin.com','abs.twimg.com','pbs.twimg.com','o.twimg.com','amp.twimg.com','ton.twimg.com']
        if sitename in inarray: return True
        
        patterns = ['(^|\.)combin\.com$']
        if self.regex_engines(patterns, sitename): return True

        patterns = ['linkedin','cdninstagram','instagram','twitter','twimg','lightwidget','pinimg','tiktokcdn',
                    'tiktokv','ttlivecdn','ttoversea',
                    "tiktokcdn-in","tiktokcdn-us","tiktok","p1-tt-ipv6.byteimg.com","p1-tt.byteimg.com","p16-ad-sg.ibyteimg.com","p16-tiktok-sg.ibyteimg.com","p16-tiktok-sign-va-h2.ibyteimg.com","p16-tiktok-va-h2.ibyteimg.com","p16-tiktok-va.ibyteimg.com","p16-va-tiktok.ibyteimg.com",
                    "p26-tt.byteimg.com","p3-tt-ipv6.byteimg.com","p9-tt.byteimg.com"
        ]



        for regex in patterns:
            try:
                if regex.find('.com') >0:
                    spattern="(\.|^)%s" % regex
                    matches = re.search(spattern, sitename)
                    if matches: return True
                    continue

                spattern="(\.|^)%s\.(com|jp|fr|es|pl|pt|ru|co\.uk|it|nl|de|be|br|com\.br|li)$" % regex
                matches = re.search(spattern, sitename)
                if matches: return True
            except:
                self.log_query("ERROR REGEX ON : %s - %s" % (sitename, regex))
                self.ilog(self.get_linenumber(), func, "ERROR REGEX ON : %s - %s" % (sitename, regex))
                continue





    def regex_spywares(self,sitename):
        func = "regex_spywares"
        inarray=['101joints.com','ang-content.com','abdengineering.lk','acabadosfinostamayo.com','acroninternational.com','alkashaflab.org',
                 'allthatsgolden.com','aomua.websiteviet.vn','appreciationabjure.com','artemisiabaubo.art.br','asa4web.com',
                 'ashrafsedeek.com','assamtour.in','bad-tool-tell-doubt.xyz','banre24h.com','bardo.la','beefymartpronunciation.com',
                 'blaklockan.utvsite.se','blog.julianvilche.com','blotcreepy.com','ca.minexmr.com','camelridedubai.com','canntalks.co.uk',
                 'cdn.ordinarywinsprizedaily.rest','chonjunmo.com','cleaning-device.com','computeterrifyingobdurate.com','curtalink.online',
                 'de.minexmr.com','desertuntilcorn.top','destinypark.ro','diepatienten.net','drpriscila.com.br','ecc-engineering.com',
                 'eomsebin.com','excaliburgroup.com.hk','fawryservices.com','fedethezo.pro','fightcovidmisinfo.com','fr.minexmr.com','geluktech.com','github.dihe.moe','glassbeadsmachine.com','gomkgo.com','hanam.work','hidelen.com','hwangjiyong.com','ibancalculator-com.preview-domain.com','imagensefrases.com','irtheme.com','jacquelineshoppe.biz','jiu.bgt666.com','kelpmetorealiu.xyz','knotsparadise.com','kyleursino.com','linkutech.com','loadangorubbishremovals.com.au','longtrieuvintagehouse.com','luohu101.com','mangguo.info','mcpc.com.au','memangbau.com','mercadodelvino.com.ar','mine.c3pool.com','openedinfractructureilliterate.com','oqqcejco.xyz','ordinarywinsprizedaily.rest','pabsecurity.com','pace-merano.com','pdvpromocao.vhinfo.net','petpaw-eg.com','petrulaitis.tmartinkus.lt','phoenix.yizimg.com','pool.hashvault.pro','pool.minexmr.com','pool.supportxmr.com','preview-domain.com','quzaglobal.com','raiseexamscores.com','relifeagrovetbd.com','revealedsolid.com','safetyfireexperts.com','safetystudy1.biz','samizdatmagazine.co.uk','seanwinslow.com','security-system.net','sedbeni.com.bo','sermugion.com.br','sg.minexmr.com','slipclearing.com','spamvariationswithin.com','staylike.com','stemrxbiosciences.in','tainhacchuong.mobi','torturegratified.com','trk.bad-tool-tell-doubt.xyz','trybulgingcoefficient.com','unavailablebackedwaved.com','uncleyeah.com','us-west.minexmr.com','venture7program.biz','watanvision.sa','westerlundhealth.mx','www.3dtoolschool.com','www.abris-spa.net','www.boxingfit.sa.com','www.googpo.com','www.greylocke.com','www.labo2020.com','www.mangguo.info','www.miamiluxuryvacationrentals.com','www.nekokingdom.com','www.openhouse.ws','www.ordinarywinsprizedaily.rest','www.shinygoods.com.tw','www.slaapschool.com','www.solidarietachepassione.it','www.thinkcreatecontent.com','www.tianyun.info','www.zbfcxx.cn','xfnl-spspostit-online.preview-domain.com','xmr-asia1.nanopool.org','xmr-au1.nanopool.org','xmr-eu1.nanopool.org','xmr-eu2.nanopool.org','xmr-jp1.nanopool.org','xmr-us-east1.nanopool.org','xmr-us-west1.nanopool.org','xmr.2miners.com','xmr.f2pool.com','xmr.hashcity.org','xmrpool.eu','yardperformedtraumatize.com','yesterdayscancautiously.com','yourtubetvs.site','offfurreton.com']
        for pp in inarray:
            pp=pp.replace('.','\.')
            matches = re.search(pp, sitename)
            if matches: return True
        return False


    def regex_apple(self,sitename):

        inarray = ['captive.apple.com.edgekey.net']
        if sitename in inarray: return True

        patterns=['(\.|^)(apple|icloud|cdn-apple|icloud-content|appleiphonecell|apple-cloudkit|thinkdifferent|ibook|itools)\.[a-z]+$',
        '(\.|^)airport\.us']

        return self.regex_engines(patterns, sitename)

    def regex_advertising(self,sitename):
        func = "regex_advertising"
        if sitename in self.advertbase:
            if self.TheShieldLogDNSQ == 1:
                self.xsyslog("%s [CACHED] matches advertbase database" % sitename)
            return True
        if sitename == "px.ads.linkedin.com": return True
        if sitename == "ad.360yield.com": return True
        if sitename == "match.adsrvr.org": return True
        if sitename == "mail-ads.google.com": return True
        if sitename == "www.googleadservices.com": return True
        if sitename == 'adservice.google.fr': return True
        if sitename == 'js-agent.newrelic.com': return True
        if sitename == 'secure.quantserve.com': return True
        if sitename == 'px.ads.linkedin.com': return True
        if sitename == 'ads.pubmatic.com': return True
        if sitename == 'pre.ads.justpremium.com': return True
        if sitename == 'cdn.doubleverify.com': return True
        if sitename == 'syndication.twitter.com': return True
        if sitename == 'ad.mail.ru': return True
        if sitename == "ws.advalo.com": return True
        if sitename == "gambling-affiliation.com": return True
        if sitename == "life360.pubnub.com": return True
        if sitename == "pubsub.plex.tv": return True
        if sitename == "adserver.pandora.com" : return True
        if sitename == "googleads.g.doubleclick.net": return true;



        inarray = ['www.effectiveperformanceformat.com','bam-cell.nr-data.net','advgoogle.com','googleapi.club','doubleclickbygoogle.com','googlerank.info','google-pr7.de',
                   'usemarketings.com','google-rank.org','googleanalytcs.com','xml.trafficmoose.com','265.com','app-measurement.com','loftsbaacad.com','toldmeflex.com',
                   'r.baresi.xyz','molodgytot.biz','ec.walkme.com','px.ads.linkedin.com','hinisanex.biz','buysellads.com','buysellads.net','servedby-buysellads.com',
                   'carbonads.(net|com)','oulddev.biz','click.hoolig.app','engine.blacraft.com','mc.yandex.ru','ads.gaming1.com','adform.net','luzulabeguile.com',
                   'ficanportio.biz','hidelen.com','earchmess.fun','acrvclk.com','track.wg-aff.com','thumb.tapecontent.net','betgorebysson.club',
                   'in-page-push.com','itphanpytor.club','mktoresp.com','xid.i-mobile.co.jp','pubmine.com','ads.tremorhub.com']




        for pp in inarray:
            pp=pp.replace('.','\.')
            matches = re.search(pp, sitename)
            if matches: return True


        allext = "(biz|co.kr|com|com.akadns.net|co.nz|co.uk|de|dk|es|fi|fr|gr|it|jp|kr|mobi|no|pt|sg|tk|tw|vn)"
        patterns = [
        '(analytics|-logfile-service|creativecdn|zxcvads|postaffiliatepro|tapfiliate|adx-reporting|adx-vpc|logger|clickbank|webrecorder|api-click|tracking)-.*?[0-9]+\..*?\.amazonaws\.com$',
        '(ad-srv|ads-|adserver-|wildcard-ads-|[a-z0-9]+-telemetry-).*?\..*?\.amazonaws\.com$',
        '(\.|^)(impactify|connectad|adlive|visitor-analytics|bidmachine)\.io$',
        '(\.|^)adzerk\.net$',
        '(\.|^)(adsymptotic|doubleverify|googlesyndication|adtelligent|advertising|amazon-adsystem|adpushup|admob|adnxs|blkditsup|bngpt)\.com$',
        '(\.|^)(g\.doubleclick|bizible|aaxads|serving-sys|advanced-web-analytics|servedbyadbutler|productads\.hlserve|buysellads|youradexchange|adsrvr|amazon-adsystem|cedexis|adgrx|assoc-amazon|samsungads|carbonads|iadsdk\.apple|notifadz)\.[a-z]+$',
        '(\.|^)pub\.network$',
        '(\.|^)(asccdn|onclickalgo|onclickgenius|admitad|notifpush|onclickperformance|moatads|smartadserver|pubdirecte|onclickalgo)\.(com|ru)$',
        '(\.|^)(mmtro|yieldoptimizer|adroll|adsafeprotected|adrta|ads[0-9]-adnow|ezodn|displayvertising|adktrack|assistpup|adswizz)\.com$',
        '(\.|^)admo\.tv$',
        '^(adserver|adtrack|affiliate)\.',
        '(\.|^)(ayads|yovoads|publicidees|rlets|hyprmx|mkt[0-9]+)\.(co|com)$',
        '(\.|^)linkredirect\.biz$',
        '^adservice\.google\.[a-z]+$',
        '(\.|^)(admob|adnxs|adnext)\.%s$' % allext,
        '(\.|^)(ads-twitter|adxplay|publicidees|adsniper|zemanta|videostep|buysellads|carbonads|videoadex|taboola|adsafeprotected|pubmatic|adsmoloco|adspruce|adups)\.(com|ru)$'
        '(\.|^)weborama\.fr$',
        '(\.|^)(trafficjunky|openx|dnacdn|ad-srv|bidswitch|3wregie-biz|2mdn|doubleclick|nuggad|ad\.smaato)\.net$',
        '(\.|^)flowpubdom\.info$',
        '(\.|^)zog\.link$',
        '(\.|^)(consensu|adhash)\.org$',
        '(\.|^)(wt-eu[0-9]+|effectivemeasure|adpicmedia|adnxs)\.net$',
        '(\.|^)(clivads|unityads\.unity3d|oastatic|pushwoosh|visariomedia|predictivdisplay|max-adserv|ozongees|cdnativepush)\.com$',
        '(\.|^)(gpsecureads|exdynsrv|casalemedia|hot-mob|mookie1|moatpixel|advertising|advertnative|adventori|applovin|videostep|adverline)\.com$',
        '(\.|^)(realtime-bid|brznetwork|insurads|adhslx|prksism|adxcore|supdepub|iasds01|skimresources|m2pub)\.com$',
        '(\.|^)(ubembed|creativecdn|moartraffic|s-onetag|bluecore|adomik|adplugg|adpone|adpopcorn|adpushup|adrcdn|adrcntr|adrecover)\.com$',
        '(\.|^)m2\.ai$',
        '(\.|^)m2track\.co$',
        '(\.|^)m32\.media',
        '(\.|^)adop\.cc$',
        '(\.|^)adoptimize\.info$',
        '(\.|^)(adnxs-simple|adnxs|admedia|geoadnxs|addthis|addthiscdn)\.(com|net)$',
        '(\.|^)(intelligenceadx|adform|vivocha|taboola|affiliatly|advangelists|pushclk)\.com$',
        '(\.|^)adreach\.me$'
        ]

        return self.regex_engines(patterns,sitename)

    def regex_science_computing(self,sitename):
        if sitename == "programiz.com": return True
        if sitename == "api.accounts.firefox.com": return True
        if sitename == "www.programiz.com": return True
        if sitename == "scorecard.api.mywot.com": return True
        if sitename == "profile.accounts.firefox.com": return True
        if sitename == "github.githubassets.com": return True
        if sitename == "avatars.githubusercontent.com": return True
        if sitename == "detectportal.firefox.com": return True
        if sitename == "httpbin.org": return True
        if sitename == "hl2rcv.adobe.com": return True
        if sitename == "licensing.artica.center":  return True
        if sitename == "www.articatech.net":  return True
        if sitename == "a.root-servers.net": return True
        if sitename == "firefox.settings.services.mozilla.com": return True
        if sitename == "lists.squid-cache.org": return True
        if sitename == "content.dellsupportcenter.com": return True
        if sitename == "my.nalpeiron.com": return True
        if sitename == "contile-images.services.mozilla.com": return True
        if sitename == "connectivity-check.ubuntu.com": return True


        func = "regex_science_computing"
        patterns = ['(\.|^)(narkive|articatech|phpliveregex|ubuntu|mozilla|speedtest|synology|articatech|debian|jetbrains|w3|gnome)\.(com|org|net)',
                    '(\.|^)(cguardprotect|trendmicro|coderedirect|thunderbird|kxcdn|evernote|serverfault|crowdstrike|lemnia|opacc)\.(com|net)$',
                    '(\.|^)(adobelogin|intel|ibm|ibmcloud|ubuntu|cisco|dell|envato|seagate|atos|stackexchange|bluecoat|dellsupportcenter)\.com$',
                    '(\.|^)github(usercontent|app)\.com$',
                    '(\.|^)github\.(io|com)$',
                    '(\.|^)(jetbrains|nalpeiron|evernote|unix|ultimaker)\.com$',
                    '^www\.kaspersky\.(fr|com|pl|it|ch|co\.uk|nl|es|pt|ru)$'
                    '(\.|^)(artica|articatech)\.(fr|com|net|solutions|center)$',
                    '(\.|^)(squid-cache|haproxy|httpbin)\.org$'
                    '(\.|^)artica\.(center|fr)$',
                    '(\.|^)(mpi-internal|programcreek|nutanix|opentext|ip-api|oracle|java|oraclecloud|db-ip|zdassets|puffin|ibmcloud|db-ip)\.com$',
                    '(\.|^)(coro|cloudmosa|mozgcp.net)\.net$',
                    '(\.|^)(logitech)\.%s$' % self.exts,
                    '(\.|^)cho\.it$',
                    '(\.|^)intellij\.net$'

        ]
        
        for regex in patterns:
            try:
                matches = re.search(regex,sitename)
            except:
                self.ilog(self.get_linenumber(), func, "ERROR REGEX ON  %s - %s" % (sitename, regex))
                continue

            if not matches: continue
            if self.debug: self.ilog(self.get_linenumber(), func, "FOUND : %s - %s" % (sitename, regex))
            return True

        return False


    def regex_translators(self,sitename):
        func="regex_translators"
        patterns = ['(^|\.)translate\.(goog|google\.com|google\.fr)$',
                    '(^|\.)(linguee|deepl)\.(fr|pro|com|de|info|jp|pt|cn)$']

        return self.regex_engines(patterns, sitename)


    def regex_clothing(self,sitename):
        patterns = ['(^|\.)footlocker\.fr$'
        ]
        return self.regex_engines(patterns, sitename)

    def regex_associations(self,sitename):
        patterns = ['(^|\.)creativecommons\.org$',
                    ]
        return self.regex_engines(patterns, sitename)


    def regex_audio_video(self,sitename):
        # Audio-video wombo.ai 15
        patterns = ['(streaming|video|vod-adaptive).*?\.(akamaized|llnw)\.net$',
                    '(^|\.)wombo\.ai$',
                    '(^|\.)(vimeo|vimeocdn|trontv|dailymotion|cnevids)\.com$'
        ]
        return self.regex_engines(patterns, sitename)


    def regex_games(self,sitename):
        #Games 58
        patterns = ['(^|\.)maximus\.com\.ar$',
                    '(^|\.)(playstation|epicgames|outfit7|kidoz|nintendo)\.(net|com)',
                    '(\.|^)(ubi|nintendo|ea|playstation|gamedistribution|rbxcdn|tutotoons)\.com$',
                    '(\.|^)(parsecgaming)\.com$',
                    'steamcdn.*?\.akamaihd.net$',
                    '(^|\.)motmele\.fr$',
                    '(\.| ^)poki\.(com|io)'
                    ]
        return self.regex_engines(patterns,sitename)


    def regex_engines(self,patterns,sitename):
        func="regex_engines"
        try:
            for regex in patterns:
                try:
                    matches = re.search(regex,sitename)
                except:
                    if self.debug: self.ilog(self.get_linenumber(), func, tb.format_exc())
                    continue

                if matches:
                    if self.debug: self.ilog(self.get_linenumber(), func, "FOUND : %s - %s" % (sitename, regex))
                    return True
            return False
        except:
            if self.debug: self.ilog(self.get_linenumber(), func, tb.format_exc())
            return False


    def regex_sciences(self, sitename):
        patterns = [
            '(\.|^)(futura-sciences)\.com$',
        ]

        return self.regex_engines(patterns, sitename)

    def regex_dictionnary(self,sitename):

        patterns = [
            '(\.|^)(wikipedia|vikidia|universalis)\.(org|com|fr|pl|uk|co\.uk|es|pt|it|pl|ru|md|nl|nc|de|be|ch|br|com\.br)$',
            '(^|\.)adtarget\.com\.tr$'
        ]

        return self.regex_engines(patterns,sitename)


    def regex_porn(self,sitename):
        func="regex_porn"
        patterns=[
            '(\.|^)(youporn|sex|pornxs|vptpsn|xhamster|phncdn|xhcdn|xvideos|tube8|xtube|pornhub|hardsextube|redtubefiles)\.(com|net)$',
            '(\.|^)(icfcdn|ypncdn|youporn|playboy|xnxx|porn|tubepornclassic|teenshomeporn)\.(com|net)$',
            '(^|\.)(sex|mmoframes|newsensations|porndoe|lit-erotica|tubepleasure|viptube|voyeurhit|cdn13)\.(com|net)$',
            '\.xxx$','(^|\.)rabbits\.webcam$',
            '(^|\.)txxx\.tube$'
            '(^|\.)(icfcdn|youporn|pornhub|playboy|xvideos|xnxx|xhamster|porn)\.(com|net)$',
            '(^|\.)(sex|hclips|tubecorp|sex-and-flirt)\.(com|net)$',
            '(^|\.)(pornhub|pornhublive|porntrex|redtube|yourporn|pornimg|7porn|porn|porno365go|pornomixfree|pornsocket|sexualpitfall)\.(com|com\.br|sexy|xyz|ru)$'
        ]


        return self.regex_engines(patterns, sitename)



    def fixed_whitelist(self,url):
        func="fixed_whitelist"
        if self.KsrnDisableGoogleAdServices == 1:
            if url == "www.googleadservices.com": return True
            if url == "googleadservices.com": return True
            if url == "adservice.google.com": return True
            if url == "www.adservice.google.com": return True
            if url =="www.googletagmanager.com": return True
            if url =="pagead2.googlesyndication.com": return True
            if url =="partner.googleadservices.com": return True
            if url =="tpc.googlesyndication.com": return True
            if url =="www.googletagservices.com": return True


        skey = "isWhite:%s" % url

        val =self.mem.ksrncache_get(skey)
        if val is not None:return True
        if url == "suggestqueries.google.com": return True
        if url == "fonts.gstatic.com": return True
        if url == "ip.42.pl": return True
        if url == "discordservers.me": return True
        if url == "disboard.org": return True
        if url == "www.appleiphonecell.com": return True
        if url == "syndication.twitter.com": return True
        if url == "api.eu.amazonalexa.com": return True
        if url == "calendar.google.com": return True
        if url == "www.google.com": return True
        if url == "doh.this.web.id": return True

        if url == "plex.tv": return True
        if url == "jsonip.com": return True
        if url == "detectportal.firefox.com": return True
        if url == "www.thinkdifferent.us": return True
        if url == "www.airport.us": return True
        if url == "www.itools.info": return True
        if url == "www.ibook.info": return True
        if url == "packages.sury.org": return True

        if url == "www.netflix.com": return True
        if url == "connectivity-check.ubuntu.com": return True
        if url == "ocsp2.apple.com": return True
        if url == "mesu.apple.com": return True
        if url == "audiocontentdownload.apple.com": return True
        if url == "gateway.icloud.com": return True
        if url == "inappcheck.itunes.apple.com": return True
        if url == "ws.school.apple.com": return True

        if url == "ocws.officeapps.live.com": return True
        if url == "login.microsoftonline.com": return True
        if url == "go.microsoft.com": return True
        if url == "static-asm.secure.skypeassets.com": return True
        if url == "fpc.msedge.net": return True
        if url == "b-ring.msedge.net": return True
        if url == "outlook.live.com": return True

        if url == "client.wns.windows.com": return True
        if url == "activity.windows.com": return True

        if url == "bing.com": return True
        if url == "www.bing.com": return True

        if url == "api.aps.skype.com": return True
        if url == "config.edge.skype.com": return True
        if url == "people.skype.com": return True
        if url == "consumer.entitlement.skype.com": return True
        if url == "static.asm.skype.com": return True
        if url == "pear.php.net": return True

        if url == "targetemsecure.blob.core.windows.net": return True

        if url == "arcus-uswest.amazon.com": return True
        if url == "pollserver.lastpass.com": return True
        if url == "media1.giphy.com": return True
        if url == "media2.giphy.com": return True
        if url == "media3.giphy.com": return True


        if url == "am3pap006.storage.live.com": return True
        if url == "www.login.live.com": return True
        if url == "skyapi.policies.live.net": return True
        if url == "login.live.com": return True
        if url == "config.teams.microsoft.com": return True
        if url == "outlook.office365.com": return True
        if url == "login.microsoftonline.com": return True


        # Wordpress...
        if url == "i0.wp.com": return True

        #Microsoft
        if url== "c.s-microsoft.com": return True

        if url == "www.linkedin.com": return True
        if url == "realtime.www.linkedin.com": return True

        if url == "firefox.settings.services.mozilla.com": return True

        if url == "www.bookmyname.com": return True
        if url == "www.paypal.com": return True
        if url == "www.paypalobjects.com": return True
        if url == "checkout.paypal.com": return True
        if url == "b.stats.paypal.com": return True
        if url == "dub.stats.paypal.com": return True
        if url == "c6.paypal.com": return True

        if url == "events.gfe.nvidia.com": return True
        if url == "services.gfe.nvidia.com": return True

        if url == "alive.github.com": return True
        if url == "api.github.com": return True


        if url == "cdnjs.cloudflare.com": return True
        if url == "www.reddit.com": return True
        if url == "api.pinterest.com": return True
        if url == "share.yandex.ru": return True
        if url == "domainbigdata.com": return True
        if url == "speeddials.opera.com": return True
        if url == "s1.dmcdn.net": return True
        if url == "nmcheck.gnome.org": return True
        if url == "update.nai.com": return True
        if url == "update.veritas.com": return True


        if url == "accounts.youtube.com": return True

        if url == "cros-omahaproxy.appspot.com": return True
        if url == "gweb-gettingstartedguide.appspot.com": return True
        if url == "omahaproxy.appspot.com": return True

        if url == "doh.post-factum.tk": return True
        if url == "doh.bortzmeyer.fr": return True
        if url == "doh.crypto.sx": return True

        if url == "a-ring-fallback.msedge.net": return True
        if url == "ocsp.globalsign.com": return True



        matches = re.search('(\.|^)(drupal|articatech|artica)\.(org|center|net|com)$', url)
        if matches: return True

        matches = re.search('(\.|^)(drupal|articatech|artica)\.(org|center|net|com)$', url)
        if matches: return True

        matches = re.search('[a-z][0-9]+\.dualstack\.[a-z\-]+-[0-9]+\.amazonaws\.com$', url)
        if matches: return True

        if self.KsrnDisableGoogleAdServices == 1:
            matches = re.search('(\.|^)(adservice\.google|googleadservices)\.[a-z]+$', url)
            if matches:
                self.ilog(self.get_linenumber(), func, "[DEBUG]: %s = Forced to PASS" % url)
                return True

        matches = re.search('(\.|^)(1e100\.net|topsante|codegena|manga-news|googlevideo|netflix|narkive)\.com$', url)
        if matches: return True

        matches = re.search('(\.|^)client[0-9]+\.google\.com$', url)
        if matches: return True

        matches = re.search('(\.|^)(fbcdn)\.net$', url)
        if matches: return True

        matches = re.search('(\.|^)(nflxvideo|msedge|cguardprotect|office)\.net$', url)
        if matches: return True

        matches = re.search('(\.|^)(phishtank|drupal)\.org$', url)
        if matches: return True

        matches = re.search('(\.|^)(amazon|jetbrains|oracle|ssl-images-amazon)\.(co\.jp|com|net|fr|es|pt|pl|uk|com\.br)$',url)
        if matches: return True

        matches = re.search('(\.|^)(appdynamics|opendns|bitdefender|service-now|bechtle|gstatic|sharepoint|thinkdifferent|appleiphonecell|seagate|msftncsi|epicgames|)\.(fr|com|info|us|net)',url)
        if matches: return True

        matches = re.search("(\.|^)ac-(aix-marseille|am|amiens|besancon|bordeaux|caen|clermont|coaching|corse|creteil|dijon|grenoble|guadeloupe|guyane|lille|limoges|lyon|martinique|montpellier|nancy-metz|nantes|nice|normandie|orleans-tours|paris|poitiers|reims|rennes|reunion|rouen|spm|strasbourg|toulouse|versailles)\.fr$",url)
        if matches: return True

        matches = re.search('(\.|^)(ibook\.info|thinkdifferent\.us|mozilla\.net|airport\.us|playstation\.net|banquepopulaire\.fr)$', url)
        if matches: return True
        matches = re.search('(\.|^)(office365|bing|gr-assets|microsoft|icloud-content|msftconnecttest|kaspersky|firefox|appleiphonecell|samsungcloudsolution|live|apple|icloud|facebook)\.com$',url)
        if matches: return True

        matches = re.search('(\.|^)(sectigo|deepl|stackoverflow|vimeocdn|wordpress|ytimg|teamviewer|mozilla|brave|youtube|facebook|msftncsi|gravatar|messenger\.live|googlebot)\.com$',url)
        if matches: return True
        matches = re.search('(\.|^)(narkive|vorwerk-digital|msn|qwant|starleaf|ipdeny|xboxlive|github|githubapp|kaspersky-labs|githubassets|a2z)\.com$',url)
        if matches: return True

        matches = re.search('(\.|^)(squarespace|jimstatic|parastorage|squarespace-cdn|website-files|webflow|jimcdn|wixstatic)\.com$',url)
        if matches: return True

        matches = re.search('(\.|^)(ecosia|qwant|qwantjunior|edupole)\.[a-z]+$',url)
        if matches: return True

        matches = re.search('\.(corp|home|mail|tld)$', url)
        if matches: return True

        try:
            if url in self.srnwhite: return True
        except:
            self.ilog(self.get_linenumber(), func, "FATAL srnwhite %s" % tb.format_exc())


        return False


    def admin_whitelist_mac(self,mac):
        self.mac=mac
        self.mac.strip()
        if len(self.mac) < 3: return False
        if len(self.whitelist_arp)==0: return False
        if self.mac in self.whitelist_arp: return True
        return False


    def admin_whitelist_src(self,pattern):
        func = "admin_whitelist_src"
        if len(self.whitelist_src)==0: return False;
        pattern.strip()
        if len(pattern) < 3: return False
        skey = "WHITEDOM:%s" % pattern
        val = self.mem.ksrncache_get(skey)
        if val is not None: return True
        if pattern in self.whitelist_src:return True

        for cdir in self.whitelist_src:
            cdir = cdir.strip()
            if len(cdir) < 3: continue
            try:
                if IPAddress(pattern) in IPNetwork(cdir): return True
            except:
                self.ilog(self.get_linenumber(), func, "Wrong pattern %s --> %s" % (pattern,cdir))
                continue

        return False

    def whitelist_dstrx_parse(self,pattern):
        func="whitelist_dstrx_parse"
        if len(self.whitelist_dstrx)==0: return False
        pattern.strip()
        if len(pattern) < 3: return False
        pattern = pattern.lower()

        for srcdomain in self.whitelist_dst:
            srcdomain = srcdomain.strip()
            if len(srcdomain) < 3: continue
            try:
                matches = re.search(srcdomain, pattern)
                if matches: return True
            except:
                self.ilog(self.get_linenumber(),func,"Wrong pattern %s" % srcdomain)
                continue

        return False


    def theshields_white(self,domain):
        if len(self.srnwhite)==0: return False
        domain = domain.lower()
        tld, url = self.parse_domain(domain)
        array = url.split(".")
        reversed = array[::-1]
        testdomain = []

        for splitted in reversed:
            testdomain.append(splitted)
            testdomain_reversed = testdomain[::-1]
            pattern = "%s.%s" % (".".join(testdomain_reversed), tld)
            if pattern in self.srnwhite: return True

        maindomain = publicsuffix.get_sld(domain)
        if maindomain == domain: return 0
        if pattern in self.srnwhite: return True
        return False


    def load_categories_perso(self):
        pickle_path=self.local_database_path
        if not os.path.exists(pickle_path):
            if self.TheShieldDebug == 1: self.xsyslog("[%s] No such file L.3326" % pickle_path)
            self.local_categories={}
            return True
        try:
            with open(pickle_path, 'rb') as infile:
                self.local_categories=pickle.load(infile)
                if self.TheShieldDebug==1: self.xsyslog("CATEGORY, Loading Personal Categories databases")
        except IOError:
            if self.TheShieldDebug==1: self.xsyslog("CATEGORY, Loading Personal Categories with error")
            self.local_categories={}
            return False


        elements=len(self.local_categories)
        self.xsyslog("CATEGORY, Loading Personal Categories with %s elements Success" % elements)
        return True




    def get_category_perso(self,domain):
        domain=domain.lower()
        tld,url=self.parse_domain(domain)
        array=url.split(".")
        reversed = array[::-1]
        testdomain=[]

        for splitted in reversed:
            testdomain.append(splitted)
            testdomain_reversed=testdomain[::-1]
            pattern="%s.%s" % (".".join(testdomain_reversed),tld)
            if pattern in self.local_categories:
                category_id=self.local_categories[pattern]["category_id"]
                category_name=self.local_categories[pattern]["category_name"]
                self.categoryname=category_name
                return category_id

        maindomain = publicsuffix.get_sld(domain)
        if maindomain == domain: return 0
        if maindomain in self.local_categories:
            category_id = self.local_categories[maindomain]["category_id"]
            category_name = self.local_categories[maindomain]["category_name"]
            self.categoryname = category_name
            return category_id

        return 0

    def parse_domain(self,url, encoding='utf-8'):
        if not (url.startswith('http://') or url.startswith('https://')): url = 'http://' + url
        parsed = urlparse(url.lower())
        hostname = parsed.netloc.decode('utf-8')
        if hostname.startswith('www.'):hostname=url.replace("www." ,'',1)
        tld = ''
        uri = hostname.split('.')
        effectived_tld=""
        reversed=uri[::-1]
        chomp=[]
        for splitted in reversed:
            if splitted in self.tld['normal']: effectived_tld=tld
            chomp.append(splitted)
            chomp_reversed=chomp[::-1]
            tld = '.'.join(chomp_reversed)
            if tld in self.tld['normal']: effectived_tld=tld
            tld2 = '.'.join(['*'] + [tld])
            if tld2 in self.tld['normal']: effectived_tld = tld

        hostname=hostname.replace(".%s" % effectived_tld,'')
        return effectived_tld.encode(encoding),hostname.encode(encoding)

    def admin_blacklist(self,pattern,gethit=True):
        func = "admin_blacklist"
        pattern = pattern.lower()
        pattern.strip()
        if len(pattern) < 3: return False
        skey = "isBlack:%s" % pattern
        if skey in self.local_white: return self.local_white[skey]

        if self.get_cache(skey) is not None:
            self.local_white[skey]=True
            return True

        if gethit:
            val = self.mem.ksrncache_get(skey)
            if val is not None:
                self.local_white[skey]=True
                self.set_cache(skey,1)
                return True

        if len(self.blacklist_dst) == 0: return False

        pattern_point=".%s" % pattern

        if pattern_point in self.blacklist_dst:
            self.set_cache(skey, 1)
            self.mem.ksrncache_set(skey, str(1), 600)
            self.local_white[skey] = True
            return True

        for srcdomain in self.blacklist_dst:
            srcdomain = self.domain_to_regex(srcdomain)
            if len(srcdomain) < 3: continue
            try:
                matches = re.search("%s$" % srcdomain, pattern)
                if matches:
                    self.set_cache(skey, 1)
                    self.mem.ksrncache_set(skey,str(1),600)
                    self.local_white[skey] = True
                    return True
            except:
                self.ilog(self.get_linenumber(),func,"Wrong pattern %s" % srcdomain)
                continue






    def admin_whitelist(self,pattern,gethit=True):
        func="admin_whitelist"
        pattern = pattern.lower()
        pattern.strip()
        if len(pattern) < 3: return False

        skey = "isWhite:%s" % pattern
        if skey in self.local_white: return self.local_white[skey]

        if self.get_cache(skey) is not None:
            self.local_white[skey]=True
            return True


        if gethit:
            val = self.mem.ksrncache_get(skey)
            if val is not None:
                self.local_white[skey]=True
                self.set_cache(skey,1)
                return True


        if self.KSRNCategoryWhite > 0:
            category_id=self.get_category(pattern)
            if category_id == self.KSRNCategoryWhite: return True


        if len(self.whitelist_dst) == 0:
            try:
                if self.whitelist_dstrx_parse(pattern):
                    self.mem.ksrncache_set(skey, str(1), 600)
                    self.local_white[skey] = True
                    self.set_cache(skey, 1)
                    return True
            except:
                self.ilog(self.get_linenumber(), func, tb.format_exc)
                return False

        pattern_point=".%s" % pattern

        if pattern_point in self.whitelist_dst:
            self.set_cache(skey, 1)
            self.mem.ksrncache_set(skey, str(1), 600)
            self.local_white[skey] = True
            return True


        if pattern in self.whitelist_dst:
            self.set_cache(skey, 1)
            self.mem.ksrncache_set(skey, str(1), 600)
            self.local_white[skey] = True
            return True

        for srcdomain in self.whitelist_dst:
            srcdomain = self.domain_to_regex(srcdomain)
            if len(srcdomain) < 3: continue
            try:
                matches = re.search("%s$" % srcdomain, pattern)
                if matches:
                    self.set_cache(skey, 1)
                    self.mem.ksrncache_set(skey,str(1),600)
                    self.local_white[skey] = True
                    return True
            except:
                self.ilog(self.get_linenumber(),func,"Wrong pattern %s" % srcdomain)
                continue


        val = self.whitelist_dstrx_parse(pattern)
        if val:
            self.set_cache(skey, 1)
            self.local_white[skey] = True
            return True

        self.local_white[skey] = False
        if len(self.local_white)>2500: self.local_white={}
        return False


    def domain_to_regex(self,srcdomain):
        srcdomain = srcdomain.strip()
        matches = [".*", "(", ")", "[","]",".+","?","\\","|"]
        if any(x in srcdomain for x in matches):  return srcdomain
        if len(srcdomain) < 3: return ""
        srcdomain = srcdomain.lstrip("^")
        srcdomain = srcdomain.lstrip(".")
        srcdomain = srcdomain.replace(".", "\.")
        srcdomain = srcdomain.replace(";", ".")
        srcdomain = srcdomain.replace("*", ".*?")
        return "%s$" % srcdomain

